{ parameter
    (or (or (or (unit %collect) (unit %interrupt_for_tk))
            (or (unit %interrupt_for_tz)
                (pair %setunits (pair (int %dunit) (int %tkunit)) (mutez %tzunit))))
        (or (int %start_with_tk) (unit %start_with_tz))) ;
  storage
    (pair (pair (pair (pair (timestamp %interruption) (address %owner))
                      (pair (int %read_interval) (int %time_unit)))
                (pair (pair (pair %tk_rate int int) (int %tk_unit))
                      (pair (address %token) (pair %tz_rate int int))))
          (pair (mutez %tz_unit) (option %user address))) ;
  code { LAMBDA
           (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
           (pair int int)
           { DUP ;
             CAR ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CDR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     MUL ;
                     PAIR ;
                     DIP { DROP } }
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     MUL ;
                     SUB ;
                     PAIR ;
                     DIP { DROP } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     MUL ;
                     PAIR ;
                     DIP { DROP } }
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     MUL ;
                     ADD ;
                     PAIR ;
                     DIP { DROP } } ;
                 DIP { DROP } } ;
             DUP ;
             DIP { DROP 4 } } ;
         DUP ;
         LAMBDA
           (pair mutez mutez)
           int
           { DUP ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             INT ;
             DUP ;
             DIP { DROP 2 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair int int) int)
           int
           { DUP ;
             CAR ;
             DUP ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP 2 } } ;
         SWAP ;
         LAMBDA
           (option address)
           address
           { PUSH address "tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg" ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             IF_NONE
               { PUSH string "getopt_address: argument is none" ; FAILWITH }
               { DIG 1 ; DUP ; DUG 2 ; DIG 1 ; DUP ; DUG 2 ; DIP { DROP 2 } } ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair mutez mutez) int)
                       (lambda
                          (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
                          (pair int int)))
                 (pair (pair (pair (pair timestamp address) (pair int int))
                             (pair (pair (pair int int) int) (pair address (pair int int))))
                       (pair mutez (option address))))
           (pair int int)
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             PUSH mutez 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SWAP ;
             EXEC ;
             PUSH int 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             PUSH int 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CDR ;
             CDR ;
             PAIR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             CDR ;
             CDR ;
             UNIT ;
             LEFT unit ;
             RIGHT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             SWAP ;
             EXEC ;
             UNIT ;
             LEFT unit ;
             LEFT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             SWAP ;
             EXEC ;
             DUP ;
             DIP { DROP 5 } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ;
         SWAP ;
         LAMBDA
           (pair (lambda
                    (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
                    (pair int int))
                 (pair (pair (pair (pair timestamp address) (pair int int))
                             (pair (pair (pair int int) int) (pair address (pair int int))))
                       (pair mutez (option address))))
           (pair int int)
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             PUSH int 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CAR ;
             CDR ;
             PAIR ;
             PUSH int 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             CDR ;
             CDR ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CDR ;
             CAR ;
             CAR ;
             UNIT ;
             LEFT unit ;
             RIGHT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SWAP ;
             EXEC ;
             UNIT ;
             LEFT unit ;
             LEFT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SWAP ;
             EXEC ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; DUP ; DIP { PAIR } ; SWAP } ;
                     SWAP } ;
               DUP ;
               DIP { PAIR } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (pair timestamp address) (pair int int))
                                      (pair (pair (pair int int) int) (pair address (pair int int))))
                                (pair mutez (option address)))
                          (pair int int))
                       (pair (lambda (pair (pair int int) int) int)
                             (lambda
                                (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
                                (pair int int))))
                 (pair (pair (pair (pair timestamp address) (pair int int))
                             (pair (pair (pair int int) int) (pair address (pair int int))))
                       (pair mutez (option address))))
           mutez
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
             NOW ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             CAR ;
             SUB ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SWAP ;
             EXEC ;
             PUSH int 1 ;
             PUSH int 1 ;
             PAIR ;
             UNIT ;
             LEFT unit ;
             LEFT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             SWAP ;
             EXEC ;
             PAIR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SWAP ;
             EXEC ;
             PUSH mutez 1 ;
             PUSH int 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DUP ;
             CAR ;
             DUP ;
             CDR ;
             ABS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             ABS ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DUP ;
             DIP { DROP 3 } ;
             DUP ;
             DIP { DROP 6 } } ;
         SWAP ;
         APPLY ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CDR ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { NIL operation ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     NOT ;
                     IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                     PUSH mutez 0 ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { DIG 6 ;
                          DUP ;
                          DUG 7 ;
                          DIG 8 ;
                          DUP ;
                          DUG 9 ;
                          SWAP ;
                          EXEC ;
                          DIG 1 ;
                          DUP ;
                          DUG 2 ;
                          DIG 1 ;
                          DUP ;
                          DUG 2 ;
                          DIP { DROP 2 } }
                        { DUP } ;
                     PUSH mutez 0 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     BALANCE ;
                     SUB ;
                     COMPARE ;
                     GT ;
                     IF { DIG 3 ;
                          DUP ;
                          DUG 4 ;
                          DIG 8 ;
                          DUP ;
                          DUG 9 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CDR ;
                          CONTRACT unit ;
                          IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          BALANCE ;
                          SUB ;
                          UNIT ;
                          TRANSFER_TOKENS ;
                          CONS ;
                          DIG 4 ;
                          DUP ;
                          DUG 5 ;
                          DIG 1 ;
                          DUP ;
                          DUG 2 ;
                          DIP { DROP 2 } }
                        { DIG 3 ; DUP ; DUG 4 } ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIP { DROP 6 } }
                   { NIL operation ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CDR ;
                     CDR ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     SWAP ;
                     EXEC ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     AND ;
                     NOT ;
                     IF { PUSH string "require r5 failed" ; FAILWITH } { PUSH unit Unit } ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CONTRACT
                       (or (or (pair %approve (address %ispender) (int %value))
                               (pair %dotransfer (address %dest) (int %value)))
                           (or (pair %dotransferfromsource (address %dest) (int %value))
                               (pair %transferFrom (pair (address %from_) (address %to_)) (int %value)))) ;
                     IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                     NOW ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SUB ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     SWAP ;
                     EXEC ;
                     PUSH int 1 ;
                     PUSH int 1 ;
                     PAIR ;
                     UNIT ;
                     LEFT unit ;
                     LEFT (or unit unit) ;
                     PAIR ;
                     PAIR ;
                     DIG 15 ;
                     DUP ;
                     DUG 16 ;
                     SWAP ;
                     EXEC ;
                     PAIR ;
                     DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     SWAP ;
                     EXEC ;
                     DUP ;
                     DIP { DROP } ;
                     SENDER ;
                     PAIR ;
                     RIGHT (pair (address %ispender) (int %value)) ;
                     LEFT (or (pair (address %dest) (int %value))
                              (pair (pair (address %from_) (address %to_)) (int %value))) ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     TRANSFER_TOKENS ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     NOW ;
                     SUB ;
                     DIP { DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CDR } ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CONS ;
                     PAIR ;
                     DIP { DROP 7 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { NIL operation ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CDR ;
                     CDR ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     SWAP ;
                     EXEC ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     AND ;
                     NOT ;
                     IF { PUSH string "require r4 failed" ; FAILWITH } { PUSH unit Unit } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SENDER ;
                     CONTRACT unit ;
                     IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     SWAP ;
                     EXEC ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     NOW ;
                     SUB ;
                     DIP { DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CDR } ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DIP { DROP 5 } }
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     NOT ;
                     IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     CAR ;
                     DIP { DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CDR ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     CDR ;
                     DIP { DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 5 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 NIL operation ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 NOT ;
                 IF { PUSH string "require r2 failed" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH int 0 ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 COMPARE ;
                 GT ;
                 NOT ;
                 IF { PUSH string "require r3 failed" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH int 1 ;
                 PUSH int 1 ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 SWAP ;
                 EXEC ;
                 UNIT ;
                 LEFT unit ;
                 RIGHT (or unit unit) ;
                 PAIR ;
                 PAIR ;
                 DIG 17 ;
                 DUP ;
                 DUG 18 ;
                 SWAP ;
                 EXEC ;
                 PAIR ;
                 DIG 14 ;
                 DUP ;
                 DUG 15 ;
                 SWAP ;
                 EXEC ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 COMPARE ;
                 GT ;
                 IF { DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      CAR ;
                      CONTRACT
                        (or (or (pair %approve (address %ispender) (int %value))
                                (pair %dotransfer (address %dest) (int %value)))
                            (or (pair %dotransferfromsource (address %dest) (int %value))
                                (pair %transferFrom (pair (address %from_) (address %to_)) (int %value)))) ;
                      IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CDR ;
                      PAIR ;
                      LEFT (pair (pair (address %from_) (address %to_)) (int %value)) ;
                      RIGHT (or (pair (address %ispender) (int %value)) (pair (address %dest) (int %value))) ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      PUSH mutez 0 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      TRANSFER_TOKENS ;
                      DIG 8 ;
                      DUP ;
                      DUG 9 ;
                      DIG 9 ;
                      DUP ;
                      DUG 10 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      NOW ;
                      ADD ;
                      ADD ;
                      DIP { DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            CDR } ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      SENDER ;
                      SOME ;
                      DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      CONS ;
                      SWAP ;
                      CDR ;
                      SWAP ;
                      PAIR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIP { DROP 5 } }
                    { DUP } ;
                 DUP ;
                 DIP { DROP 10 } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 NOT ;
                 IF { PUSH string "require r1 failed" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH mutez 1 ;
                 AMOUNT ;
                 PAIR ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 SWAP ;
                 EXEC ;
                 PUSH int 1 ;
                 PUSH int 1 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 SWAP ;
                 EXEC ;
                 UNIT ;
                 LEFT unit ;
                 RIGHT (or unit unit) ;
                 PAIR ;
                 PAIR ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 SWAP ;
                 EXEC ;
                 PAIR ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 SWAP ;
                 EXEC ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 GT ;
                 IF { DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      NOW ;
                      ADD ;
                      ADD ;
                      DIP { DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            CDR } ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      SENDER ;
                      SOME ;
                      DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIP { DROP } ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DROP 3 } }
                    { DIG 5 ; DUP ; DUG 6 } ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } } ;
         DIP { DROP 9 } } }
