{ storage
    (pair (pair (address %manager) (set %participants address))
          (pair (int %playerCount) (pair (map %players address int) (address %winner)))) ;
  parameter
    (or (or (list %addParticipants address) (unit %play))
        (or (list %removeParticipants address) (or (unit %reset) (int %selectWinner)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SENDER ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CAR ;
                   COMPARE ;
                   EQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: self.data.manager == sp.sender" ; FAILWITH } } ;
                   DUP ;
                   PUSH nat 1 ;
                   SWAP ;
                   SIZE ;
                   COMPARE ;
                   GE ;
                   IF { {} }
                      { { PUSH string "WrongCondition: sp.len(params.participants) >= 1" ; FAILWITH } } ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          CAR ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          MEM ;
                          IF { { PUSH string "WrongCondition: ~ (self.data.participants.contains(participant))" ;
                                 FAILWITH } }
                             { {} } ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          CAR ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          PUSH bool True ;
                          DIG 4 ;
                          DUP ;
                          DUG 5 ;
                          UPDATE ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DUG 3 ;
                          DROP ;
                          SWAP ;
                          DROP } ;
                   DROP } }
               { { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   CDR ;
                   CDR ;
                   COMPARE ;
                   EQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: self.data.winner == self.data.manager" ;
                          FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CDR ;
                   SOURCE ;
                   MEM ;
                   IF { {} }
                      { { PUSH string "WrongCondition: self.data.participants.contains(sp.source)" ;
                          FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CDR ;
                   CDR ;
                   CAR ;
                   SOURCE ;
                   MEM ;
                   IF { { PUSH string "WrongCondition: ~ (self.data.players.contains(sp.source))" ;
                          FAILWITH } }
                      { {} } ;
                   SENDER ;
                   SOURCE ;
                   COMPARE ;
                   NEQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: sp.source != sp.sender" ; FAILWITH } } ;
                   PUSH mutez 1000000 ;
                   AMOUNT ;
                   COMPARE ;
                   EQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: sp.amount == sp.tez(1)" ; FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CDR ;
                   CAR ;
                   SOME ;
                   SOURCE ;
                   UPDATE ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   DUG 2 ;
                   SWAP ;
                   DROP ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CDR ;
                   PUSH int 1 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CDR ;
                   CAR ;
                   ADD ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   DUG 2 ;
                   DROP ;
                   DROP } } }
           { IF_LEFT
               { { SENDER ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CAR ;
                   COMPARE ;
                   EQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: self.data.manager == sp.sender" ; FAILWITH } } ;
                   DUP ;
                   PUSH nat 1 ;
                   SWAP ;
                   SIZE ;
                   COMPARE ;
                   GE ;
                   IF { {} }
                      { { PUSH string "WrongCondition: sp.len(params.participants) >= 1" ; FAILWITH } } ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          CAR ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          MEM ;
                          IF { {} }
                             { { PUSH string "WrongCondition: self.data.participants.contains(participant)" ;
                                 FAILWITH } } ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          CAR ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          PUSH bool False ;
                          DIG 4 ;
                          DUP ;
                          DUG 5 ;
                          UPDATE ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DUG 3 ;
                          DROP ;
                          SWAP ;
                          DROP } ;
                   DROP } }
               { IF_LEFT
                   { { SENDER ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CAR ;
                       CAR ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string "WrongCondition: self.data.manager == sp.sender" ; FAILWITH } } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       CAR ;
                       CAR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       DUG 2 ;
                       SWAP ;
                       DROP ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CDR ;
                       PUSH int 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       DUG 2 ;
                       SWAP ;
                       DROP ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CDR ;
                       CAR ;
                       ITER { CAR ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              NONE int ;
                              DIG 5 ;
                              DUP ;
                              DUG 6 ;
                              UPDATE ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              DUG 3 ;
                              DROP ;
                              SWAP ;
                              DROP } ;
                       DROP } }
                   { { SENDER ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CAR ;
                       CAR ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string "WrongCondition: self.data.manager == sp.sender" ; FAILWITH } } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       CDR ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string "WrongCondition: self.data.winner == self.data.manager" ;
                              FAILWITH } } ;
                       DUP ;
                       PUSH int 0 ;
                       SWAP ;
                       COMPARE ;
                       GE ;
                       IF { { SWAP ; DUP ; DUG 2 ; CDR ; CAR ; SWAP ; DUP ; DUG 2 ; COMPARE ; LE } }
                          { PUSH bool False } ;
                       IF { {} }
                          { { PUSH string
                                   "WrongCondition: (params.luckyNum >= 0) & (params.luckyNum <= self.data.playerCount)" ;
                              FAILWITH } } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CDR ;
                       CAR ;
                       ITER { PUSH int 1 ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              SUB ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CDR ;
                              COMPARE ;
                              EQ ;
                              IF { { DIG 2 ;
                                     DUP ;
                                     DUG 3 ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     CAR ;
                                     DIG 3 ;
                                     DUP ;
                                     DUG 4 ;
                                     CAR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     DUG 3 ;
                                     DIG 2 ;
                                     DROP } }
                                 { {} } ;
                              DROP } ;
                       DROP } } } } ;
         NIL operation ;
         PAIR } }
