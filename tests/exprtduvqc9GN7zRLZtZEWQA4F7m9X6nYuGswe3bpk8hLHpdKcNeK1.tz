{ storage
    (pair (pair (address %admin)
                (pair (nat %all_auctions)
                      (big_map %auctions
                         nat
                         (pair (pair (pair (address %author) (nat %cut))
                                     (pair (timestamp %end_timestamp) (address %nft_address)))
                               (pair (pair (nat %number) (nat %price))
                                     (pair (timestamp %start_timestamp) (map %token_metadata string bytes)))))))
          (pair (pair (big_map %bidders nat (set bytes)) (nat %counter))
                (pair (set %operators address)
                      (map %prices
                         nat
                         (list (pair (pair (address %bidder) (bytes %payment_data))
                                     (pair (string %payment_method) (pair (nat %price) (address %user))))))))) ;
  parameter
    (or (or (pair %bid (nat %auction_id) (bytes %data))
            (pair %create_auction
               (pair (pair (address %author) (nat %cut))
                     (pair (timestamp %end_timestamp) (address %nft_address)))
               (pair (pair (nat %number) (nat %price))
                     (pair (timestamp %start_timestamp) (map %token_metadata string bytes)))))
        (or (list %update_operator (pair (address %operator) (bool %valid)))
            (pair %withdraw
               (nat %auction_id)
               (list %bids
                  (pair (pair (address %bidder) (bytes %payment_data))
                        (pair (string %payment_method) (pair (nat %price) (address %user)))))))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 SENDER ;
                 MEM ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.operators.contains(sp.sender)" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 1282 ; FAILWITH } {} ;
                 GET 5 ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "AUC_AUCTION_NOT_START" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 1282 ; FAILWITH } {} ;
                 CAR ;
                 GET 3 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "AUC_AUCTION_IS_OVER" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 MEM ;
                 IF {}
                    { SWAP ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      UNPAIR ;
                      PUSH (option (set bytes)) (Some {}) ;
                      DUP 6 ;
                      CAR ;
                      UPDATE ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP } ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 DUP ;
                 DUP 6 ;
                 CAR ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 1288 ; FAILWITH } {} ;
                 PUSH bool True ;
                 DUP 8 ;
                 CDR ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PUSH int 300 ;
                 NOW ;
                 DUP 4 ;
                 CAR ;
                 GET 4 ;
                 DUP 4 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 1282 ; FAILWITH } {} ;
                 CAR ;
                 GET 3 ;
                 SUB ;
                 COMPARE ;
                 LT ;
                 IF { SWAP ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      SWAP ;
                      DUP ;
                      DUP 6 ;
                      CAR ;
                      DUP ;
                      DUG 2 ;
                      GET ;
                      IF_NONE { PUSH int 1291 ; FAILWITH } {} ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      CDR ;
                      NOW ;
                      PUSH int 300 ;
                      ADD ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      DUG 2 ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      SWAP ;
                      DIG 5 ;
                      CAR ;
                      GET 4 ;
                      DUP 6 ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 1282 ; FAILWITH } {} ;
                      SOME ;
                      DIG 5 ;
                      CAR ;
                      UPDATE ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR }
                    { DROP } }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 SENDER ;
                 MEM ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.operators.contains(sp.sender)" ;
                      FAILWITH } ;
                 NOW ;
                 PUSH int 60 ;
                 DUP ;
                 PUSH int 1 ;
                 MUL ;
                 MUL ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "AUC_END_DATE_TOO_SOON" ; FAILWITH } ;
                 DUP ;
                 GET 5 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "AUC_END_DATE_TOO_SOON" ; FAILWITH } ;
                 NOW ;
                 PUSH int 60 ;
                 DUP ;
                 PUSH int 168 ;
                 MUL ;
                 MUL ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 3 ;
                 COMPARE ;
                 LE ;
                 IF {} { PUSH string "AUC_END_DATE_TOO_LATE" ; FAILWITH } ;
                 DUP ;
                 GET 3 ;
                 CDR ;
                 PUSH nat 100 ;
                 SWAP ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "AUC_BID_PRICE_TOO_LOW" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 DIG 4 ;
                 DUP ;
                 GET 6 ;
                 SWAP ;
                 DUP ;
                 DUG 6 ;
                 GET 5 ;
                 PAIR %start_timestamp %token_metadata ;
                 DIG 5 ;
                 DUP ;
                 GET 3 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 7 ;
                 GET 3 ;
                 CAR ;
                 PAIR %number %price ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 CAR ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 7 ;
                 CAR ;
                 GET 3 ;
                 PAIR %end_timestamp %nft_address ;
                 DIG 6 ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 PAIR %author %cut ;
                 PAIR ;
                 PAIR ;
                 SOME ;
                 DIG 5 ;
                 CAR ;
                 GET 3 ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 PUSH (option (set bytes)) (Some {}) ;
                 DIG 5 ;
                 CAR ;
                 GET 3 ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 PUSH nat 1 ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR } ;
             NIL operation }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.admin" ; FAILWITH } ;
                 DUP ;
                 ITER { DUP ;
                        CDR ;
                        IF { DIG 2 ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             PUSH bool True ;
                             DIG 5 ;
                             CAR ;
                             UPDATE ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP }
                           { DIG 2 ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             PUSH bool False ;
                             DIG 5 ;
                             CAR ;
                             UPDATE ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP } } ;
                 DROP ;
                 NIL operation }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                 CAR ;
                 GET 3 ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "AUC_AUCTION_IS_ONGOING" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 ITER { DUP 3 ;
                        GET 3 ;
                        CAR ;
                        DUP 3 ;
                        CAR ;
                        GET ;
                        IF_NONE { PUSH int 1307 ; FAILWITH } {} ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        CDR ;
                        SHA256 ;
                        DUP 3 ;
                        GET 3 ;
                        PACK ;
                        SHA256 ;
                        DUP 4 ;
                        GET 6 ;
                        PACK ;
                        SHA256 ;
                        DUP 5 ;
                        GET 5 ;
                        PACK ;
                        SHA256 ;
                        DUP 6 ;
                        CAR ;
                        CAR ;
                        PACK ;
                        SHA256 ;
                        CONCAT ;
                        CONCAT ;
                        CONCAT ;
                        CONCAT ;
                        MEM ;
                        IF {}
                           { PUSH string
                                  "WrongCondition: self.data.bidders[params.auction_id].contains((((sp.sha256(sp.pack(bid.bidder)) + sp.sha256(sp.pack(bid.price))) + sp.sha256(sp.pack(bid.user))) + sp.sha256(sp.pack(bid.payment_method))) + sp.sha256(bid.payment_data))" ;
                             FAILWITH } ;
                        DIG 2 ;
                        UNPAIR ;
                        SWAP ;
                        UNPAIR ;
                        UNPAIR ;
                        DUP ;
                        DUP 7 ;
                        CAR ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { PUSH int 1308 ; FAILWITH } {} ;
                        PUSH bool False ;
                        DUP 8 ;
                        CAR ;
                        CDR ;
                        SHA256 ;
                        DUP 9 ;
                        GET 3 ;
                        PACK ;
                        SHA256 ;
                        DUP 10 ;
                        GET 6 ;
                        PACK ;
                        SHA256 ;
                        DUP 11 ;
                        GET 5 ;
                        PACK ;
                        SHA256 ;
                        DUP 12 ;
                        CAR ;
                        CAR ;
                        PACK ;
                        SHA256 ;
                        CONCAT ;
                        CONCAT ;
                        CONCAT ;
                        CONCAT ;
                        UPDATE ;
                        SOME ;
                        SWAP ;
                        UPDATE ;
                        PAIR ;
                        PAIR ;
                        SWAP ;
                        PAIR ;
                        DUP ;
                        DUG 3 ;
                        GET 6 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET 5 ;
                        MEM ;
                        IF {}
                           { DIG 2 ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             SWAP ;
                             PUSH (option
                                     (list (pair (pair (address %bidder) (bytes %payment_data))
                                                 (pair (string %payment_method) (pair (nat %price) (address %user))))))
                                  (Some {}) ;
                             DUP 6 ;
                             GET 5 ;
                             UPDATE ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DUG 2 } ;
                        DUP 3 ;
                        UNPAIR ;
                        SWAP ;
                        UNPAIR ;
                        SWAP ;
                        UNPAIR ;
                        SWAP ;
                        DIG 6 ;
                        GET 6 ;
                        DUP 6 ;
                        GET 5 ;
                        GET ;
                        IF_NONE { PUSH int 1312 ; FAILWITH } {} ;
                        DUP 6 ;
                        CONS ;
                        SOME ;
                        DIG 5 ;
                        GET 5 ;
                        UPDATE ;
                        SWAP ;
                        PAIR ;
                        SWAP ;
                        PAIR ;
                        SWAP ;
                        PAIR ;
                        SWAP } ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 GET 3 ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 1314 ; FAILWITH } {} ;
                 SIZE ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.len(self.data.bidders[params.auction_id]) == 0" ;
                      FAILWITH } ;
                 NIL operation ;
                 NIL (list (pair (pair (address %bidder) (bytes %payment_data))
                                 (pair (string %payment_method) (pair (nat %price) (address %user))))) ;
                 DUP 4 ;
                 GET 6 ;
                 ITER { CDR ; CONS } ;
                 NIL (list (pair (pair (address %bidder) (bytes %payment_data))
                                 (pair (string %payment_method) (pair (nat %price) (address %user))))) ;
                 SWAP ;
                 ITER { CONS } ;
                 NIL (list (pair (pair (address %bidder) (bytes %payment_data))
                                 (pair (string %payment_method) (pair (nat %price) (address %user))))) ;
                 SWAP ;
                 ITER { CONS } ;
                 ITER { PUSH nat 0 ;
                        DUP 5 ;
                        CAR ;
                        GET 4 ;
                        DUP 5 ;
                        CAR ;
                        GET ;
                        IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                        GET 3 ;
                        CAR ;
                        COMPARE ;
                        GT ;
                        IF { DUP 4 ;
                             UNPAIR ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             SWAP ;
                             DUP ;
                             DUP 8 ;
                             CAR ;
                             DUP ;
                             DUG 2 ;
                             GET ;
                             IF_NONE { PUSH int 1318 ; FAILWITH } {} ;
                             UNPAIR ;
                             SWAP ;
                             UNPAIR ;
                             CDR ;
                             PUSH int 0 ;
                             DUP ;
                             DUP 11 ;
                             SIZE ;
                             DIG 14 ;
                             CAR ;
                             GET 4 ;
                             DUP 15 ;
                             CAR ;
                             GET ;
                             IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                             GET 3 ;
                             CAR ;
                             SUB ;
                             DUP ;
                             DUG 2 ;
                             COMPARE ;
                             LE ;
                             IF { DROP } { SWAP ; DROP } ;
                             ISNAT ;
                             IF_NONE { PUSH int 1318 ; FAILWITH } {} ;
                             PAIR ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SOME ;
                             SWAP ;
                             UPDATE ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             DUG 3 ;
                             DUP ;
                             ITER { DUP 5 ;
                                    CAR ;
                                    GET 4 ;
                                    DUP 5 ;
                                    CAR ;
                                    GET ;
                                    IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                                    GET 3 ;
                                    CDR ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    GET 5 ;
                                    COMPARE ;
                                    GE ;
                                    IF {}
                                       { PUSH string
                                              "WrongCondition: bid.price >= self.data.auctions[params.auction_id].price" ;
                                         FAILWITH } ;
                                    DIG 2 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    GET 6 ;
                                    CONTRACT %pay (pair (nat %amount) (pair (bytes %data) (string %method))) ;
                                    IF_NONE { PUSH int 1322 ; FAILWITH } {} ;
                                    PUSH mutez 0 ;
                                    DIG 3 ;
                                    DUP ;
                                    GET 3 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 5 ;
                                    CAR ;
                                    CDR ;
                                    PAIR %data %method ;
                                    DUP 5 ;
                                    GET 5 ;
                                    PAIR %amount ;
                                    TRANSFER_TOKENS ;
                                    CONS ;
                                    DUP 5 ;
                                    CAR ;
                                    GET 4 ;
                                    DUP 5 ;
                                    CAR ;
                                    GET ;
                                    IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                                    CAR ;
                                    CAR ;
                                    CAR ;
                                    CONTRACT %update_balance (pair (nat %amount) (bool %increase)) ;
                                    IF_NONE { PUSH int 1326 ; FAILWITH } {} ;
                                    PUSH mutez 0 ;
                                    PUSH bool True ;
                                    PUSH nat 100 ;
                                    DUP 9 ;
                                    CAR ;
                                    GET 4 ;
                                    DUP 9 ;
                                    CAR ;
                                    GET ;
                                    IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                                    CAR ;
                                    CAR ;
                                    CDR ;
                                    DUP 7 ;
                                    GET 5 ;
                                    MUL ;
                                    EDIV ;
                                    IF_NONE { PUSH int 1325 ; FAILWITH } { CAR } ;
                                    PAIR %amount %increase ;
                                    TRANSFER_TOKENS ;
                                    CONS ;
                                    DUG 2 ;
                                    DIG 4 ;
                                    UNPAIR ;
                                    SWAP ;
                                    UNPAIR ;
                                    UNPAIR ;
                                    SWAP ;
                                    PUSH nat 1 ;
                                    ADD ;
                                    SWAP ;
                                    PAIR ;
                                    PAIR ;
                                    SWAP ;
                                    PAIR ;
                                    DUP ;
                                    DUG 5 ;
                                    UNPAIR ;
                                    UNPAIR ;
                                    SWAP ;
                                    UNPAIR ;
                                    SWAP ;
                                    DUP ;
                                    DUP 9 ;
                                    CAR ;
                                    DUP ;
                                    DUG 2 ;
                                    GET ;
                                    IF_NONE { PUSH int 1331 ; FAILWITH } {} ;
                                    UNPAIR ;
                                    SWAP ;
                                    UNPAIR ;
                                    SWAP ;
                                    UNPAIR ;
                                    SWAP ;
                                    DIG 13 ;
                                    GET 3 ;
                                    CDR ;
                                    PACK ;
                                    SOME ;
                                    PUSH string "edition" ;
                                    UPDATE ;
                                    SWAP ;
                                    PAIR ;
                                    SWAP ;
                                    PAIR ;
                                    SWAP ;
                                    PAIR ;
                                    SOME ;
                                    SWAP ;
                                    UPDATE ;
                                    SWAP ;
                                    PAIR ;
                                    SWAP ;
                                    PAIR ;
                                    PAIR ;
                                    DUG 4 ;
                                    DIG 2 ;
                                    DUP 5 ;
                                    CAR ;
                                    GET 4 ;
                                    DUP 5 ;
                                    CAR ;
                                    GET ;
                                    IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                                    CAR ;
                                    GET 4 ;
                                    CONTRACT %mint (pair (address %address) (map %metadata string bytes)) ;
                                    IF_NONE { PUSH int 1332 ; FAILWITH } {} ;
                                    PUSH mutez 0 ;
                                    DUP 7 ;
                                    CAR ;
                                    GET 4 ;
                                    DUP 7 ;
                                    CAR ;
                                    GET ;
                                    IF_NONE { PUSH int 1297 ; FAILWITH } {} ;
                                    GET 6 ;
                                    DIG 4 ;
                                    CAR ;
                                    CAR ;
                                    PAIR %address %metadata ;
                                    TRANSFER_TOKENS ;
                                    CONS ;
                                    SWAP } ;
                             DROP }
                           { DROP } } ;
                 DIG 2 ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 NONE (pair (pair (pair (address %author) (nat %cut))
                                  (pair (timestamp %end_timestamp) (address %nft_address)))
                            (pair (pair (nat %number) (nat %price))
                                  (pair (timestamp %start_timestamp) (map %token_metadata string bytes)))) ;
                 DIG 6 ;
                 CAR ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 EMPTY_MAP
                   nat
                   (list (pair (pair (address %bidder) (bytes %payment_data))
                               (pair (string %payment_method) (pair (nat %price) (address %user))))) ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PUSH nat 0 ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
