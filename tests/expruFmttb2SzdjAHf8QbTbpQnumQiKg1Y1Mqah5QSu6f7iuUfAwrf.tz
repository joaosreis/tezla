{ parameter
    (or (or (pair %addNewExchange
               (pair (string %domain_name) (pair (string %exchange_type) (string %id)))
               (pair (mutez %price) (pair (address %seller) (mutez %shipping))))
            (address %changeOwner))
        (or (pair %updateExchangeType (string %escrow_type) (nat %commission))
            (or (string %validateExchange) (string %validateSellerTransmission)))) ;
  storage
    (pair (pair (map %exchange_states int string) (map %exchange_types string nat))
          (pair (map %exchanges
                   string
                   (pair (pair (address %buyer) (pair (string %domain_name) (string %exchange_type)))
                         (pair (pair (timestamp %lastUpdate) (address %seller))
                               (pair (string %state)
                                     (pair %total_escrow
                                        (pair (mutez %asked_price) (mutez %commission))
                                        (pair (mutez %escrow) (pair (mutez %shipping) (mutez %slashing))))))))
                (pair (address %owner) (nat %slashing_rate)))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 MEM ;
                 IF {}
                    { DUP ;
                      CAR ;
                      CDR ;
                      CAR ;
                      PUSH string " does not exist" ;
                      SWAP ;
                      PUSH string "The type" ;
                      CONCAT ;
                      CONCAT ;
                      FAILWITH } ;
                 DUP ;
                 GET 6 ;
                 PUSH nat 100 ;
                 DUP 3 ;
                 GET 3 ;
                 DUP 5 ;
                 GET 6 ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                 CAR ;
                 PUSH nat 100 ;
                 DUP 4 ;
                 GET 3 ;
                 DUP 6 ;
                 CAR ;
                 CDR ;
                 DUP 6 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 90 ; FAILWITH } {} ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                 CAR ;
                 DUP 4 ;
                 GET 3 ;
                 ADD ;
                 ADD ;
                 ADD ;
                 AMOUNT ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "The amount sent is not enough" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 MEM ;
                 IF { PUSH string "The exchange for this item already exists" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 PUSH nat 100 ;
                 DUP 5 ;
                 GET 3 ;
                 DUP 7 ;
                 GET 6 ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                 CAR ;
                 DUP 5 ;
                 GET 6 ;
                 PAIR %shipping %slashing ;
                 AMOUNT ;
                 PAIR %escrow ;
                 PUSH nat 100 ;
                 DUP 6 ;
                 GET 3 ;
                 DUP 8 ;
                 CAR ;
                 CDR ;
                 DUP 8 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 90 ; FAILWITH } {} ;
                 MUL ;
                 EDIV ;
                 IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                 CAR ;
                 DUP 6 ;
                 GET 3 ;
                 PAIR %asked_price %commission ;
                 PAIR ;
                 DIG 5 ;
                 CAR ;
                 CAR ;
                 PUSH int 0 ;
                 GET ;
                 IF_NONE { PUSH int 96 ; FAILWITH } {} ;
                 PAIR %state %total_escrow ;
                 DUP 5 ;
                 GET 5 ;
                 NOW ;
                 PAIR %lastUpdate %seller ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CAR ;
                 PAIR %domain_name %exchange_type ;
                 SENDER ;
                 PAIR %buyer ;
                 PAIR ;
                 SOME ;
                 DIG 4 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { SENDER ;
                 DUP 3 ;
                 GET 5 ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "Only the owner of the contract can designate a new owner" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CDR ;
                 DIG 3 ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR } ;
             NIL operation }
           { IF_LEFT
               { SENDER ;
                 DUP 3 ;
                 GET 5 ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "Only the owner of the contract can update the escrow types" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 DUP 4 ;
                 CDR ;
                 SOME ;
                 DIG 4 ;
                 CAR ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 NIL operation }
               { IF_LEFT
                   { SENDER ;
                     DUP 3 ;
                     GET 5 ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH bool True }
                        { SENDER ;
                          DUP 3 ;
                          GET 3 ;
                          DUP 3 ;
                          GET ;
                          IF_NONE { PUSH int 129 ; FAILWITH } {} ;
                          CAR ;
                          CAR ;
                          COMPARE ;
                          EQ } ;
                     IF {}
                        { PUSH string
                               "Only the owner of the contract or the buyer can validate the reception of the goods" ;
                          FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     IF {} { PUSH string "The exchange does not exist" ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     PUSH int 1 ;
                     GET ;
                     IF_NONE { PUSH int 131 ; FAILWITH } {} ;
                     PACK ;
                     DUP 3 ;
                     GET 3 ;
                     DUP 3 ;
                     GET ;
                     IF_NONE { PUSH int 131 ; FAILWITH } {} ;
                     GET 5 ;
                     PACK ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string "The exchange is not waiting for a validation" ; FAILWITH } ;
                     NIL operation ;
                     SENDER ;
                     CONTRACT unit ;
                     IF_NONE { PUSH int 133 ; FAILWITH } {} ;
                     DUP 4 ;
                     GET 3 ;
                     DUP 4 ;
                     GET ;
                     IF_NONE { PUSH int 133 ; FAILWITH } {} ;
                     GET 12 ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DUP 3 ;
                     GET 5 ;
                     CONTRACT unit ;
                     IF_NONE { PUSH int 134 ; FAILWITH } {} ;
                     DUP 4 ;
                     GET 3 ;
                     DUP 4 ;
                     GET ;
                     IF_NONE { PUSH int 134 ; FAILWITH } {} ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CDR ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DUP 3 ;
                     GET 3 ;
                     DUP 3 ;
                     GET ;
                     IF_NONE { PUSH int 136 ; FAILWITH } {} ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CONTRACT unit ;
                     IF_NONE { PUSH int 136 ; FAILWITH } {} ;
                     DUP 4 ;
                     GET 3 ;
                     DUP 4 ;
                     GET ;
                     IF_NONE { PUSH int 136 ; FAILWITH } {} ;
                     GET 11 ;
                     DUP 5 ;
                     GET 3 ;
                     DUP 5 ;
                     GET ;
                     IF_NONE { PUSH int 136 ; FAILWITH } {} ;
                     CDR ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CAR ;
                     ADD ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DUP 3 ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     DUP ;
                     DUP 6 ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 137 ; FAILWITH } {} ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     CDR ;
                     DIG 9 ;
                     CAR ;
                     CAR ;
                     PUSH int 2 ;
                     GET ;
                     IF_NONE { PUSH int 137 ; FAILWITH } {} ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 138 ; FAILWITH } {} ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     CDR ;
                     NOW ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP }
                   { SENDER ;
                     DUP 3 ;
                     GET 5 ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string
                               "Only the owner of the contract can validate the transmission of the goods" ;
                          FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     IF {} { PUSH string "The exchange does not exist" ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     PUSH int 0 ;
                     GET ;
                     IF_NONE { PUSH int 119 ; FAILWITH } {} ;
                     PACK ;
                     DUP 3 ;
                     GET 3 ;
                     DUP 3 ;
                     GET ;
                     IF_NONE { PUSH int 119 ; FAILWITH } {} ;
                     GET 5 ;
                     PACK ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string
                               "WrongCondition: sp.pack(sp.set_type_expr(self.data.exchanges[params.id].state, sp.TString)) == sp.pack(sp.set_type_expr(self.data.exchange_states[0], sp.TString))" ;
                          FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     DUP ;
                     DUP 5 ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     CDR ;
                     DIG 8 ;
                     CAR ;
                     CAR ;
                     PUSH int 1 ;
                     GET ;
                     IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP ;
                     DIG 4 ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 121 ; FAILWITH } {} ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     CDR ;
                     NOW ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     NIL operation } } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
