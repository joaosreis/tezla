{ parameter
    (or (pair %assertTransfer (address :from) (address :to))
        (or (address %assertReceiver) (list %assertReceivers address))) ;
  storage (pair (list %sTransfers (pair address address)) (set %sReceivers address)) ;
  code { CAST (pair (or (pair address address) (or address (list address)))
                    (pair (list (pair address address)) (set address))) ;
         NIL operation ;
         SWAP ;
         DUP ;
         CAR ;
         DIP { CDR ; DUP ; CAR ; DIP { CDR } } ;
         DUP ;
         IF_LEFT
           { PUSH bool False ;
             DIP 3 { DUP } ;
             DIG 3 ;
             ITER { DIP 2 { DUP } ;
                    DIG 2 ;
                    CDR ;
                    DIP { DUP } ;
                    SWAP ;
                    CDR ;
                    COMPARE ;
                    EQ ;
                    DIP 3 { DUP } ;
                    DIG 3 ;
                    CAR ;
                    DIP 2 { DUP } ;
                    DIG 2 ;
                    CAR ;
                    COMPARE ;
                    EQ ;
                    AND ;
                    IF { PUSH bool True ; DIP 2 { DROP } ; DUG 1 } {} ;
                    DROP } ;
             DUP ;
             IF {} { UNIT ; PUSH string "AssertionFailure" ; PAIR ; FAILWITH } ;
             DROP 2 }
           { IF_LEFT
               { DIP 3 { DUP } ;
                 DIG 3 ;
                 DIP { DUP } ;
                 SWAP ;
                 MEM ;
                 IF {} { UNIT ; PUSH string "AssertionFailure" ; PAIR ; FAILWITH } ;
                 DROP }
               { DUP ;
                 ITER { DIP 4 { DUP } ;
                        DIG 4 ;
                        DIP { DUP } ;
                        SWAP ;
                        MEM ;
                        IF {} { UNIT ; PUSH string "AssertionFailure" ; PAIR ; FAILWITH } ;
                        DROP } ;
                 DROP } } ;
         DROP ;
         PAIR ;
         SWAP ;
         PAIR } }
