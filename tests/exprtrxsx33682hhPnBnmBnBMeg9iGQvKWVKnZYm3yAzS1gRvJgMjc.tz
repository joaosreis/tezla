{ parameter
    (or :action
       (pair %Post (list bytes) (list nat))
       (or (pair %Poke address bytes) (pair %Register (option bytes) bytes))) ;
  storage
    (big_map
       address
       (pair :user_data
          (pair (bytes %identity_key) (bytes %prekey))
          (pair (list %postal_box (pair :message (bytes %content) (timestamp %timestamp)))
                (list %pokes bytes)))) ;
  code { DUP ;
         CDR ;
         DIP { CAR } ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         IF_LEFT
           { DUP ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             PUSH unit Unit ;
             DROP ;
             SENDER ;
             PUSH unit Unit ;
             DROP ;
             NOW ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             LAMBDA
               (pair timestamp bytes)
               (pair :message (bytes %content) (timestamp %timestamp))
               { DUP ;
                 DIP { CAR } ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIP { DROP 2 } } ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             APPLY ;
             SWAP ;
             MAP { DIP { DUP } ; EXEC } ;
             DIP { DROP } ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             GET ;
             DUP ;
             IF_NONE
               { PUSH string "user is not registered" ; FAILWITH }
               { DUP ;
                 CDR ;
                 CAR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 PAIR ;
                 PUSH nat 0 ;
                 PAIR ;
                 PUSH (lambda
                         (pair nat
                               (pair (list nat) (list (pair :message (bytes %content) (timestamp %timestamp)))))
                         (lambda
                            (pair :message (bytes %content) (timestamp %timestamp))
                            (pair nat
                                  (pair (list nat) (list (pair :message (bytes %content) (timestamp %timestamp)))))))
                      { DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        LAMBDA
                          (pair (list (pair :message (bytes %content) (timestamp %timestamp)))
                                (pair (list nat) (pair nat (pair :message (bytes %content) (timestamp %timestamp)))))
                          (pair nat
                                (pair (list nat) (list (pair :message (bytes %content) (timestamp %timestamp)))))
                          { DUP ;
                            DIP { CAR } ;
                            CDR ;
                            DUP ;
                            DIP { CAR } ;
                            CDR ;
                            DUP ;
                            DIP { CAR } ;
                            CDR ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            IF_CONS
                              { DUP ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                COMPARE ;
                                EQ ;
                                IF { DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     DIG 2 ;
                                     DUP ;
                                     DUG 3 ;
                                     PAIR ;
                                     PUSH nat 1 ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     ADD ;
                                     PAIR }
                                   { DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     DIG 3 ;
                                     DUP ;
                                     DUG 4 ;
                                     CONS ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     PAIR ;
                                     PUSH nat 1 ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     ADD ;
                                     PAIR } ;
                                DIP { DROP 2 } }
                              { DIG 3 ;
                                DUP ;
                                DUG 4 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CONS ;
                                PUSH (list nat) {} ;
                                PAIR ;
                                PUSH nat 1 ;
                                DIG 3 ;
                                DUP ;
                                DUG 4 ;
                                ADD ;
                                PAIR } ;
                            DIP { DROP 4 } } ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        APPLY ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        APPLY ;
                        DIG 4 ;
                        DUP ;
                        DUG 5 ;
                        APPLY ;
                        DIP { DROP 5 } } ;
                 SWAP ;
                 DIP { SWAP } ;
                 SWAP ;
                 ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                 DIP { DROP } ;
                 DUP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 IF_CONS { PUSH bool False ; DIP { DROP 2 } } { PUSH bool True } ;
                 { IF {} { { UNIT ; FAILWITH } } } ;
                 UNIT ;
                 DROP ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             SOME ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             UPDATE ;
             NIL operation ;
             PAIR ;
             DIP { DROP 7 } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 GET ;
                 DUP ;
                 IF_NONE
                   { PUSH string "invalid address" ; FAILWITH }
                   { DUP ;
                     CDR ;
                     CDR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CONS ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SOME ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     UPDATE ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 2 } } ;
                 DIP { DROP 4 } }
               { DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 PUSH unit Unit ;
                 DROP ;
                 SENDER ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 IF_NONE
                   { DUP ;
                     IF_NONE
                       { PUSH string "must register with identity key" ; FAILWITH }
                       { DUP ;
                         CDR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP } } }
                   { DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     IF_NONE
                       { PUSH (pair (list (pair :message (bytes %content) (timestamp %timestamp))) (list bytes))
                              (Pair {} {}) ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         PAIR ;
                         PAIR }
                       { DUP ;
                         CDR ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP } } ;
                     DIP { DROP } } ;
                 DIP { DROP 3 } ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SOME ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 UPDATE ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } } ;
         DIP { DROP 2 } } }
