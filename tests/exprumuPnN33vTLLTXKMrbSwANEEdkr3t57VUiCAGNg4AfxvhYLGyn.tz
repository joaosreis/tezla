{ parameter
    (big_map %update
       (string :assetcode)
       (pair (timestamp %start)
             (pair (timestamp %end)
                   (pair (nat %open) (pair (nat %high) (pair (nat %low) (pair (nat %close) (nat %volume)))))))) ;
  storage
    (pair (pair (string %assetCode) (pair (nat %computedPrice) (timestamp %lastUpdateTime)))
          (pair (pair (int %numDataPoints) (address %oracleContract))
                (pair (pair %prices (pair (int %first) (int %last)) (pair (map %saved int nat) (nat %sum)))
                      (pair %volumes (pair (int %first) (int %last)) (pair (map %saved int nat) (nat %sum)))))) ;
  code { DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         DUG 2 ;
         { CDR ; CAR ; CDR } ;
         SENDER ;
         COMPARE ;
         EQ ;
         IF {}
            { PUSH string "Can only be called by the oracle contract." ; FAILWITH } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         { CAR ; CDR ; CDR } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         CAR ;
         COMPARE ;
         GT ;
         IF {}
            { PUSH string
                   "WrongCondition: sp.fst(params[self.data.assetCode]) > self.data.lastUpdateTime" ;
              FAILWITH } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         { CDR ; CAR } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         DIG 5 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         CAR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CDR ;
         SWAP ;
         { CAR ; CAR } ;
         PUSH int 1 ;
         DIG 7 ;
         { CDR ; CDR ; CAR ; CAR ; CDR } ;
         ADD ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         { CDR ; CAR } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR } ;
         PUSH nat 3 ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CAR } ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         DIG 10 ;
         DUP ;
         DUG 11 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CAR } ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         DIG 11 ;
         DUP ;
         DUG 12 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CAR } ;
         ADD ;
         ADD ;
         EDIV ;
         { IF_NONE { PUSH string "division by zero" ; FAILWITH } { CAR } } ;
         MUL ;
         DIG 7 ;
         { CDR ; CDR ; CAR ; CDR ; CDR } ;
         ADD ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DIG 6 ;
         DUP ;
         DUG 7 ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR } ;
         PUSH nat 3 ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         DIG 10 ;
         DUP ;
         DUG 11 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CAR } ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         DIG 11 ;
         DUP ;
         DUG 12 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CAR } ;
         DIG 10 ;
         DUP ;
         DUG 11 ;
         DIG 12 ;
         DUP ;
         DUG 13 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CAR } ;
         ADD ;
         ADD ;
         EDIV ;
         { IF_NONE { PUSH string "division by zero" ; FAILWITH } { CAR } } ;
         MUL ;
         SOME ;
         DIG 8 ;
         { CDR ; CDR ; CAR ; CAR ; CDR } ;
         UPDATE ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         { CAR ; CAR } ;
         PUSH int 1 ;
         DIG 7 ;
         { CDR ; CDR ; CDR ; CAR ; CDR } ;
         ADD ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         { CDR ; CAR } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR } ;
         DIG 7 ;
         { CDR ; CDR ; CDR ; CDR ; CDR } ;
         ADD ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DIG 6 ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         { CAR ; CAR } ;
         GET ;
         { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
         { CDR ; CDR ; CDR ; CDR ; CDR ; CDR } ;
         SOME ;
         DIG 7 ;
         { CDR ; CDR ; CDR ; CAR ; CDR } ;
         UPDATE ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         { CDR ; CAR ; CAR } ;
         PUSH int 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         { CDR ; CDR ; CAR ; CAR ; CAR } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         { CDR ; CDR ; CAR ; CAR ; CDR } ;
         SUB ;
         ADD ;
         COMPARE ;
         GT ;
         IF { DUP ;
              { CDR ; CDR ; CAR ; CAR ; CDR } ;
              SWAP ;
              DUP ;
              DUG 2 ;
              { CDR ; CDR ; CAR ; CAR ; CAR } ;
              COMPARE ;
              LT ;
              IF {}
                 { PUSH string "WrongCondition: self.data.prices.first < self.data.prices.last" ;
                   FAILWITH } ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CAR ;
              SWAP ;
              { CDR ; CAR } ;
              DIG 5 ;
              DUP ;
              DUG 6 ;
              { CDR ; CDR ; CAR ; CDR ; CAR } ;
              DIG 6 ;
              DUP ;
              DUG 7 ;
              { CDR ; CDR ; CAR ; CAR ; CAR } ;
              GET ;
              { IF_NONE { PUSH string "Get-item:27" ; FAILWITH } {} } ;
              DIG 6 ;
              { CDR ; CDR ; CAR ; CDR ; CDR } ;
              SUB ;
              ISNAT ;
              { IF_NONE { UNIT ; FAILWITH } {} } ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              NONE nat ;
              DIG 7 ;
              { CDR ; CDR ; CAR ; CAR ; CAR } ;
              UPDATE ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CDR ;
              SWAP ;
              { CAR ; CDR } ;
              PUSH int 1 ;
              DIG 6 ;
              { CDR ; CDR ; CAR ; CAR ; CAR } ;
              ADD ;
              PAIR ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              { CDR ; CDR ; CDR ; CAR ; CDR } ;
              SWAP ;
              DUP ;
              DUG 2 ;
              { CDR ; CDR ; CDR ; CAR ; CAR } ;
              COMPARE ;
              LT ;
              IF {}
                 { PUSH string "WrongCondition: self.data.volumes.first < self.data.volumes.last" ;
                   FAILWITH } ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              { CDR ; CAR } ;
              DIG 5 ;
              DUP ;
              DUG 6 ;
              { CDR ; CDR ; CDR ; CDR ; CAR } ;
              DIG 6 ;
              DUP ;
              DUG 7 ;
              { CDR ; CDR ; CDR ; CAR ; CAR } ;
              GET ;
              { IF_NONE { PUSH string "Get-item:10" ; FAILWITH } {} } ;
              DIG 6 ;
              { CDR ; CDR ; CDR ; CDR ; CDR } ;
              SUB ;
              ISNAT ;
              { IF_NONE { UNIT ; FAILWITH } {} } ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              NONE nat ;
              DIG 7 ;
              { CDR ; CDR ; CDR ; CAR ; CAR } ;
              UPDATE ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              DUP ;
              CDR ;
              SWAP ;
              { CAR ; CDR } ;
              PUSH int 1 ;
              DIG 6 ;
              { CDR ; CDR ; CDR ; CAR ; CAR } ;
              ADD ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP ;
              PAIR }
            {} ;
         DUP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         { CDR ; CDR } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         { CDR ; CDR ; CDR ; CDR ; CDR } ;
         DIG 4 ;
         { CDR ; CDR ; CAR ; CDR ; CDR } ;
         EDIV ;
         { IF_NONE { PUSH string "division by zero" ; FAILWITH } { CAR } } ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         NIL operation ;
         PAIR } }
