{ storage
    (pair (address %owner)
          (pair (map %questions int (pair address mutez)) (map %users address mutez))) ;
  parameter
    (or (or (pair %complete_question (address %address) (int %id))
            (pair %create_question (address %address) (pair (int %id) (mutez %reward))))
        (or (pair %delete_question (int %id) (bool %sendBackToOwner))
            (or (unit %deposit) (mutez %withdraw)))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SENDER ;
                 DUP 3 ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.owner == sp.sender" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 MEM ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.questions.contains(params.id)" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 MEM ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.users.contains(params.address)" ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 DUP ;
                 DUP 5 ;
                 CAR ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 51 ; FAILWITH } {} ;
                 DIG 6 ;
                 GET 3 ;
                 DUP 7 ;
                 CDR ;
                 GET ;
                 IF_NONE { PUSH int 51 ; FAILWITH } {} ;
                 CDR ;
                 ADD ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 NONE (pair address mutez) ;
                 DIG 4 ;
                 CDR ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { SENDER ;
                 DUP 3 ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.owner == sp.sender" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 MEM ;
                 IF { PUSH string "WrongCondition: ~ (self.data.questions.contains(params.id))" ;
                      FAILWITH }
                    {} ;
                 DUP ;
                 GET 4 ;
                 PUSH mutez 0 ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "WrongCondition: params.reward > sp.tez(0)" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 MEM ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.users.contains(params.address)" ;
                      FAILWITH } ;
                 DUP ;
                 GET 4 ;
                 DUP 3 ;
                 GET 4 ;
                 DUP 3 ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH int 23 ; FAILWITH } {} ;
                 COMPARE ;
                 GE ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.users[params.address] >= params.reward" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 DIG 3 ;
                 DUP ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 5 ;
                 CAR ;
                 PAIR ;
                 SOME ;
                 DUP 5 ;
                 GET 3 ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 DUP ;
                 DUP 5 ;
                 CAR ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 26 ; FAILWITH } {} ;
                 DIG 5 ;
                 GET 4 ;
                 SWAP ;
                 SUB ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR } ;
             NIL operation }
           { IF_LEFT
               { SENDER ;
                 DUP 3 ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: self.data.owner == sp.sender" ; FAILWITH } ;
                 DUP ;
                 CDR ;
                 PUSH bool True ;
                 COMPARE ;
                 EQ ;
                 IF { SWAP ;
                      DUP ;
                      GET 4 ;
                      SWAP ;
                      DUP ;
                      DUG 3 ;
                      GET 3 ;
                      DUP 3 ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 36 ; FAILWITH } {} ;
                      CAR ;
                      MEM ;
                      IF {}
                         { PUSH string
                                "WrongCondition: self.data.users.contains(sp.fst(self.data.questions[params.id]))" ;
                           FAILWITH } ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      SWAP ;
                      DUP ;
                      DUP 6 ;
                      GET 3 ;
                      DUP 6 ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 36 ; FAILWITH } {} ;
                      CAR ;
                      DUP ;
                      DUG 2 ;
                      GET ;
                      IF_NONE { PUSH int 38 ; FAILWITH } {} ;
                      DIG 6 ;
                      GET 3 ;
                      DUP 7 ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 36 ; FAILWITH } {} ;
                      CDR ;
                      ADD ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP }
                    {} ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 NONE (pair address mutez) ;
                 DIG 4 ;
                 CAR ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 NIL operation }
               { IF_LEFT
                   { DROP ;
                     DUP ;
                     GET 4 ;
                     SENDER ;
                     MEM ;
                     IF { UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          DUP ;
                          SENDER ;
                          DUP ;
                          DUG 2 ;
                          GET ;
                          IF_NONE { PUSH int 67 ; FAILWITH } {} ;
                          AMOUNT ;
                          ADD ;
                          SOME ;
                          SWAP ;
                          UPDATE ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR }
                        { UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          AMOUNT ;
                          SOME ;
                          SENDER ;
                          UPDATE ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR } ;
                     NIL operation }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 4 ;
                     SENDER ;
                     MEM ;
                     IF {}
                        { PUSH string "WrongCondition: self.data.users.contains(sp.sender)" ;
                          FAILWITH } ;
                     DUP ;
                     DUP 3 ;
                     GET 4 ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH int 59 ; FAILWITH } {} ;
                     COMPARE ;
                     GE ;
                     IF {}
                        { PUSH string "WrongCondition: self.data.users[sp.sender] >= params.amount" ;
                          FAILWITH } ;
                     NIL operation ;
                     SENDER ;
                     CONTRACT unit ;
                     IF_NONE { PUSH int 60 ; FAILWITH } {} ;
                     DUP 3 ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DIG 2 ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     IF_NONE { PUSH int 61 ; FAILWITH } {} ;
                     DIG 6 ;
                     SWAP ;
                     SUB ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP } } } ;
         PAIR } }
