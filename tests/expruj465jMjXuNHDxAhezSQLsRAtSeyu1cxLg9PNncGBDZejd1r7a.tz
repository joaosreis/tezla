{ storage (pair (mutez %max_bid) (pair (timestamp %deadline) (map %bid address mutez))) ;
  parameter (or (unit %place_bid) (unit %reclaim)) ;
  code { NIL operation ;
         DIG 1 ;
         UNPAIR ;
         DIP { UNPAIR ; SWAP ; UNPAIR ; SWAP } ;
         IF_LEFT
           { DROP ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             NOW ;
             COMPARE ;
             LT ;
             NOT ;
             IF { PUSH string "InvalidCondition: c1" ; FAILWITH } {} ;
             DUP ;
             SENDER ;
             MEM ;
             IF { PUSH string "KeyAlreadyExists" ; FAILWITH }
                { DUP ; AMOUNT ; SOME ; SENDER ; UPDATE ; SWAP ; DROP } ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             AMOUNT ;
             PAIR ;
             DUP ;
             UNPAIR ;
             COMPARE ;
             LT ;
             IF { CDR } { CAR } ;
             DIP { DIG 2 ; DROP } ;
             DUG 2 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 1 ;
             PAIR }
           { DROP ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             NOW ;
             COMPARE ;
             LT ;
             NOT ;
             IF { PUSH string "InvalidCondition: c2" ; FAILWITH } {} ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             SENDER ;
             GET ;
             IF_NONE { PUSH string "GetNoneValue" ; FAILWITH } {} ;
             COMPARE ;
             LT ;
             NOT ;
             IF { PUSH string "InvalidCondition: c3" ; FAILWITH } {} ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SENDER ;
             CONTRACT unit ;
             IF_NONE { PUSH string "BadContract" ; FAILWITH } {} ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SENDER ;
             GET ;
             IF_NONE { PUSH string "GetNoneValue" ; FAILWITH } {} ;
             UNIT ;
             TRANSFER_TOKENS ;
             CONS ;
             DIP { DIG 3 ; DROP } ;
             DUG 3 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 1 ;
             PAIR } } }
