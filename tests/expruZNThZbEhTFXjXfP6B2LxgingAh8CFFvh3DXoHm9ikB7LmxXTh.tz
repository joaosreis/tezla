{ storage
    (pair (pair (bool %check) (pair (map %deck int (map int int)) (bool %draw)))
          (pair (pair (map %kings int (pair (int %i) (pair (int %j) (bool %moved)))) (int %nextPlayer))
                (pair (option %previousPawnMove
                         (pair (pair %f (int %i) (int %j)) (pair %t (int %i) (int %j))))
                      (int %winner)))) ;
  parameter (pair %play (pair %f (int %i) (int %j)) (pair %t (int %i) (int %j))) ;
  code { UNPAIR ;
         PUSH int 0 ;
         DUP 3 ;
         GET 6 ;
         COMPARE ;
         EQ ;
         IF { SWAP ; DUP ; DUG 2 ; CAR ; GET 4 ; NOT } { PUSH bool False } ;
         IF {}
            { PUSH string "WrongCondition: (self.data.winner == 0) & (~ self.data.draw)" ;
              FAILWITH } ;
         DUP ;
         CAR ;
         CAR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { DUP ; CAR ; CAR ; PUSH int 8 ; COMPARE ; GT } { PUSH bool False } ;
         IF {}
            { PUSH string "WrongCondition: (params.f.i >= 0) & (params.f.i < 8)" ;
              FAILWITH } ;
         DUP ;
         CAR ;
         CDR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { DUP ; CAR ; CDR ; PUSH int 8 ; COMPARE ; GT } { PUSH bool False } ;
         IF {}
            { PUSH string "WrongCondition: (params.f.j >= 0) & (params.f.j < 8)" ;
              FAILWITH } ;
         DUP ;
         GET 3 ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { DUP ; GET 3 ; PUSH int 8 ; COMPARE ; GT } { PUSH bool False } ;
         IF {}
            { PUSH string "WrongCondition: (params.t.i >= 0) & (params.t.i < 8)" ;
              FAILWITH } ;
         DUP ;
         GET 4 ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { DUP ; GET 4 ; PUSH int 8 ; COMPARE ; GT } { PUSH bool False } ;
         IF {}
            { PUSH string "WrongCondition: (params.t.j >= 0) & (params.t.j < 8)" ;
              FAILWITH } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 3 ;
         CDR ;
         PUSH int 0 ;
         DUP 4 ;
         CAR ;
         GET 3 ;
         DUP 4 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 51 ; FAILWITH } {} ;
         DUP 4 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 51 ; FAILWITH } {} ;
         COMPARE ;
         COMPARE ;
         EQ ;
         IF {}
            { PUSH string
                   "WrongCondition: sp.sign(self.data.deck[params.f.i][params.f.j]) == self.data.nextPlayer" ;
              FAILWITH } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 3 ;
         CDR ;
         PUSH int 0 ;
         DUP 4 ;
         CAR ;
         GET 3 ;
         DUP 4 ;
         GET 3 ;
         GET ;
         IF_NONE { PUSH int 52 ; FAILWITH } {} ;
         DUP 4 ;
         GET 4 ;
         GET ;
         IF_NONE { PUSH int 52 ; FAILWITH } {} ;
         COMPARE ;
         COMPARE ;
         NEQ ;
         IF {}
            { PUSH string
                   "WrongCondition: sp.sign(self.data.deck[params.t.i][params.t.j]) != self.data.nextPlayer" ;
              FAILWITH } ;
         PUSH nat 1 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 53 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 53 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { PUSH int 0 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              COMPARE ;
              NEQ ;
              IF { PUSH int 0 ;
                   DUP ;
                   DUP 4 ;
                   CAR ;
                   GET 3 ;
                   DUP 4 ;
                   GET 3 ;
                   GET ;
                   IF_NONE { PUSH int 55 ; FAILWITH } {} ;
                   DUP 4 ;
                   GET 4 ;
                   GET ;
                   IF_NONE { PUSH int 55 ; FAILWITH } {} ;
                   COMPARE ;
                   COMPARE ;
                   EQ }
                 { PUSH bool False } ;
              IF { PUSH nat 1 ;
                   SWAP ;
                   DUP ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DUG 3 ;
                   GET 4 ;
                   SUB ;
                   ABS ;
                   COMPARE ;
                   EQ ;
                   IF {}
                      { PUSH string "WrongCondition: (abs(params.t.j - params.f.j)) == 1" ;
                        FAILWITH } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET 5 ;
                   IF_NONE
                     {}
                     { DROP ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 5 ;
                       IF_NONE { PUSH int 58 ; FAILWITH } {} ;
                       GET 3 ;
                       DUP 3 ;
                       GET 5 ;
                       IF_NONE { PUSH int 58 ; FAILWITH } {} ;
                       CAR ;
                       CAR ;
                       COMPARE ;
                       EQ ;
                       IF {}
                          { PUSH string
                                 "WrongCondition: self.data.previousPawnMove.open_some().f.i == self.data.previousPawnMove.open_some().t.i" ;
                            FAILWITH } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       GET 3 ;
                       CDR ;
                       PUSH int 2 ;
                       MUL ;
                       DUP 3 ;
                       GET 5 ;
                       IF_NONE { PUSH int 58 ; FAILWITH } {} ;
                       GET 4 ;
                       SUB ;
                       DUP 3 ;
                       GET 5 ;
                       IF_NONE { PUSH int 58 ; FAILWITH } {} ;
                       CAR ;
                       CDR ;
                       COMPARE ;
                       EQ ;
                       IF {}
                          { PUSH string
                                 "WrongCondition: self.data.previousPawnMove.open_some().f.j == (self.data.previousPawnMove.open_some().t.j - (2 * self.data.nextPlayer))" ;
                            FAILWITH } } }
                 {} ;
              DUP ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              CAR ;
              PAIR ;
              SOME ;
              UPDATE 5 ;
              SWAP }
            { SWAP ; NONE (pair (pair int int) (pair int int)) ; UPDATE 5 ; SWAP } ;
         PUSH nat 5 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 65 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 65 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { PUSH int 0 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              COMPARE ;
              EQ ;
              IF { PUSH bool True }
                 { PUSH int 0 ;
                   SWAP ;
                   DUP ;
                   CAR ;
                   CAR ;
                   SWAP ;
                   DUP ;
                   DUG 3 ;
                   GET 3 ;
                   SUB ;
                   COMPARE ;
                   EQ } ;
              IF { PUSH bool True }
                 { DUP ;
                   CAR ;
                   CAR ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET 3 ;
                   SUB ;
                   ABS ;
                   SWAP ;
                   DUP ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DUG 3 ;
                   GET 4 ;
                   SUB ;
                   ABS ;
                   COMPARE ;
                   EQ } ;
              IF {}
                 { PUSH string
                        "WrongCondition: (((params.t.j - params.f.j) == 0) | ((params.t.i - params.f.i) == 0)) | ((abs(params.t.j - params.f.j)) == (abs(params.t.i - params.f.i)))" ;
                   FAILWITH } ;
              PUSH int 1 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              ABS ;
              DUP ;
              DIG 3 ;
              DUP ;
              CAR ;
              CAR ;
              SWAP ;
              DUP ;
              DUG 5 ;
              GET 3 ;
              SUB ;
              ABS ;
              DUP ;
              DUG 2 ;
              COMPARE ;
              LE ;
              IF { DROP } { SWAP ; DROP } ;
              INT ;
              SUB ;
              PUSH int 1 ;
              DUP ;
              DUP 3 ;
              COMPARE ;
              GT ;
              LOOP { PUSH int 0 ;
                     DUP 5 ;
                     CAR ;
                     GET 3 ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 3 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CAR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 70 ; FAILWITH } {} ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 4 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CDR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 70 ; FAILWITH } {} ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string
                               "WrongCondition: self.data.deck[params.f.i + (k * sp.sign(params.t.i - params.f.i))][params.f.j + (k * sp.sign(params.t.j - params.f.j))] == 0" ;
                          FAILWITH } ;
                     PUSH int 1 ;
                     ADD ;
                     DUP ;
                     DUP 3 ;
                     COMPARE ;
                     GT } ;
              DROP 2 }
            {} ;
         PUSH nat 6 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 71 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 71 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { PUSH nat 1 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              ABS ;
              COMPARE ;
              LE ;
              IF { PUSH nat 1 ;
                   SWAP ;
                   DUP ;
                   CAR ;
                   CAR ;
                   SWAP ;
                   DUP ;
                   DUG 3 ;
                   GET 3 ;
                   SUB ;
                   ABS ;
                   COMPARE ;
                   LE }
                 { PUSH bool False } ;
              IF {}
                 { PUSH string
                        "WrongCondition: ((abs(params.t.j - params.f.j)) <= 1) & ((abs(params.t.i - params.f.i)) <= 1)" ;
                   FAILWITH } ;
              SWAP ;
              DUP ;
              DUG 2 ;
              UNPAIR ;
              SWAP ;
              UNPAIR ;
              UNPAIR ;
              DUP ;
              DIG 6 ;
              GET 3 ;
              CDR ;
              DUP ;
              DUG 2 ;
              GET ;
              IF_NONE { PUSH int 74 ; FAILWITH } {} ;
              PUSH bool True ;
              UPDATE 4 ;
              SOME ;
              SWAP ;
              UPDATE ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUG 2 ;
              UNPAIR ;
              SWAP ;
              UNPAIR ;
              UNPAIR ;
              DUP ;
              DIG 6 ;
              GET 3 ;
              CDR ;
              DUP ;
              DUG 2 ;
              GET ;
              IF_NONE { PUSH int 75 ; FAILWITH } {} ;
              DUP 7 ;
              GET 3 ;
              UPDATE 1 ;
              SOME ;
              SWAP ;
              UPDATE ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              DUG 2 ;
              UNPAIR ;
              SWAP ;
              UNPAIR ;
              UNPAIR ;
              DUP ;
              DIG 6 ;
              GET 3 ;
              CDR ;
              DUP ;
              DUG 2 ;
              GET ;
              IF_NONE { PUSH int 76 ; FAILWITH } {} ;
              DUP 7 ;
              GET 4 ;
              UPDATE 3 ;
              SOME ;
              SWAP ;
              UPDATE ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              SWAP }
            {} ;
         PUSH nat 2 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 77 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 77 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { PUSH int 0 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              COMPARE ;
              EQ ;
              IF { PUSH bool True }
                 { PUSH int 0 ;
                   SWAP ;
                   DUP ;
                   CAR ;
                   CAR ;
                   SWAP ;
                   DUP ;
                   DUG 3 ;
                   GET 3 ;
                   SUB ;
                   COMPARE ;
                   EQ } ;
              IF {}
                 { PUSH string
                        "WrongCondition: ((params.t.j - params.f.j) == 0) | ((params.t.i - params.f.i) == 0)" ;
                   FAILWITH } ;
              PUSH int 1 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              ABS ;
              DUP ;
              DIG 3 ;
              DUP ;
              CAR ;
              CAR ;
              SWAP ;
              DUP ;
              DUG 5 ;
              GET 3 ;
              SUB ;
              ABS ;
              DUP ;
              DUG 2 ;
              COMPARE ;
              LE ;
              IF { DROP } { SWAP ; DROP } ;
              INT ;
              SUB ;
              PUSH int 1 ;
              DUP ;
              DUP 3 ;
              COMPARE ;
              GT ;
              LOOP { PUSH int 0 ;
                     DUP 5 ;
                     CAR ;
                     GET 3 ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 3 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CAR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 82 ; FAILWITH } {} ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 4 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CDR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 82 ; FAILWITH } {} ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string
                               "WrongCondition: self.data.deck[params.f.i + (k * sp.sign(params.t.i - params.f.i))][params.f.j + (k * sp.sign(params.t.j - params.f.j))] == 0" ;
                          FAILWITH } ;
                     PUSH int 1 ;
                     ADD ;
                     DUP ;
                     DUP 3 ;
                     COMPARE ;
                     GT } ;
              DROP 2 }
            {} ;
         PUSH nat 4 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 83 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 83 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { DUP ;
              CAR ;
              CAR ;
              SWAP ;
              DUP ;
              DUG 2 ;
              GET 3 ;
              SUB ;
              ABS ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              ABS ;
              COMPARE ;
              EQ ;
              IF {}
                 { PUSH string
                        "WrongCondition: (abs(params.t.j - params.f.j)) == (abs(params.t.i - params.f.i))" ;
                   FAILWITH } ;
              PUSH int 1 ;
              SWAP ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 4 ;
              SUB ;
              ABS ;
              DUP ;
              DIG 3 ;
              DUP ;
              CAR ;
              CAR ;
              SWAP ;
              DUP ;
              DUG 5 ;
              GET 3 ;
              SUB ;
              ABS ;
              DUP ;
              DUG 2 ;
              COMPARE ;
              LE ;
              IF { DROP } { SWAP ; DROP } ;
              INT ;
              SUB ;
              PUSH int 1 ;
              DUP ;
              DUP 3 ;
              COMPARE ;
              GT ;
              LOOP { PUSH int 0 ;
                     DUP 5 ;
                     CAR ;
                     GET 3 ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 3 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CAR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 88 ; FAILWITH } {} ;
                     PUSH int 0 ;
                     DIG 5 ;
                     DUP ;
                     CAR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 7 ;
                     GET 4 ;
                     SUB ;
                     COMPARE ;
                     DUP 4 ;
                     MUL ;
                     DUP 6 ;
                     CAR ;
                     CDR ;
                     ADD ;
                     GET ;
                     IF_NONE { PUSH int 88 ; FAILWITH } {} ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string
                               "WrongCondition: self.data.deck[params.f.i + (k * sp.sign(params.t.i - params.f.i))][params.f.j + (k * sp.sign(params.t.j - params.f.j))] == 0" ;
                          FAILWITH } ;
                     PUSH int 1 ;
                     ADD ;
                     DUP ;
                     DUP 3 ;
                     COMPARE ;
                     GT } ;
              DROP 2 }
            {} ;
         PUSH nat 3 ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         DUP 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 89 ; FAILWITH } {} ;
         DUP 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 89 ; FAILWITH } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { PUSH nat 2 ;
              SWAP ;
              DUP ;
              CAR ;
              CAR ;
              SWAP ;
              DUP ;
              DUG 3 ;
              GET 3 ;
              SUB ;
              DIG 2 ;
              DUP ;
              CAR ;
              CDR ;
              SWAP ;
              DUP ;
              DUG 4 ;
              GET 4 ;
              SUB ;
              MUL ;
              ABS ;
              COMPARE ;
              EQ ;
              IF {}
                 { PUSH string
                        "WrongCondition: (abs((params.t.j - params.f.j) * (params.t.i - params.f.i))) == 2" ;
                   FAILWITH } }
            {} ;
         SWAP ;
         DUP ;
         DUG 2 ;
         UNPAIR ;
         UNPAIR ;
         SWAP ;
         UNPAIR ;
         DUP ;
         DUP 6 ;
         GET 3 ;
         DUP ;
         DUG 2 ;
         GET ;
         IF_NONE { PUSH int 91 ; FAILWITH } {} ;
         DIG 7 ;
         CAR ;
         GET 3 ;
         DUP 8 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { PUSH int 91 ; FAILWITH } {} ;
         DUP 8 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH int 91 ; FAILWITH } {} ;
         SOME ;
         DUP 8 ;
         GET 4 ;
         UPDATE ;
         SOME ;
         SWAP ;
         UPDATE ;
         DUP ;
         DUP 6 ;
         CAR ;
         CAR ;
         DUP ;
         DUG 2 ;
         GET ;
         IF_NONE { PUSH int 92 ; FAILWITH } {} ;
         PUSH (option int) (Some 0) ;
         DIG 7 ;
         CAR ;
         CDR ;
         UPDATE ;
         SOME ;
         SWAP ;
         UPDATE ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         UNPAIR ;
         SWAP ;
         UNPAIR ;
         CAR ;
         DIG 3 ;
         GET 3 ;
         CDR ;
         NEG ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         NIL operation ;
         PAIR } }
