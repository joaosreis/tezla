{ parameter
    (or :BrokerContractTypes.message
       (or (pair :BrokerContractTypes.origination_request %Originate
              (pair (string %sprthash) (nat %template))
              (pair (bytes %genparam) (mutez %initbalance)))
           (address %SudoAddAdmin))
       (or (or (address %SudoRemoveAdmin)
               (pair :BrokerContractTypes.template_descriptor %SudoAddTemplate
                  (pair (nat %template_id)
                        (or :BrokerContractTypes.fee_descriptor %template_fee
                           (int %FreeOfCharge)
                           (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                              (mutez %fee_amount)
                              (address %fee_collector))))
                  (pair (pair (bool %template_availability) (bytes %ccgen))
                        (pair (option %bookhash string) (string %tmplhash)))))
           (or (pair :BrokerContractTypes.message.SudoUpdateBroker %SudoUpdateBroker
                  (option %new_fee
                     (or :BrokerContractTypes.fee_descriptor
                        (int %FreeOfCharge)
                        (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                           (mutez %fee_amount)
                           (address %fee_collector))))
                  (option %new_availability bool))
               (pair :BrokerContractTypes.message.SudoUpdateTemplate %SudoUpdateTemplate
                  (nat %template)
                  (pair (option %new_fee
                           (or :BrokerContractTypes.fee_descriptor
                              (int %FreeOfCharge)
                              (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                                 (mutez %fee_amount)
                                 (address %fee_collector))))
                        (option %new_availability bool)))))) ;
  storage
    (pair :BrokerContractTypes.storage
       (pair (or :BrokerContractTypes.fee_descriptor %broker_fee
                (int %FreeOfCharge)
                (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                   (mutez %fee_amount)
                   (address %fee_collector)))
             (set %broker_admins address))
       (pair (bool %broker_availability)
             (pair (big_map %templates
                      nat
                      (pair :BrokerContractTypes.template_descriptor
                         (pair (nat %template_id)
                               (or :BrokerContractTypes.fee_descriptor %template_fee
                                  (int %FreeOfCharge)
                                  (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                                     (mutez %fee_amount)
                                     (address %fee_collector))))
                         (pair (pair (bool %template_availability) (bytes %ccgen))
                               (pair (option %bookhash string) (string %tmplhash)))))
                   (big_map %instances
                      string
                      (pair :BrokerContractTypes.instance_descriptor
                         (pair (string %sprthash) (address %originator))
                         (pair (string %tmplhash) (map %ensemble string address))))))) ;
  code { DUP ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         DUP ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         DUP ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 CAR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 MEM ;
                 DUP ;
                 IF { PUSH string "sprthash conflict" ; DUP ; FAILWITH } { UNIT } ;
                 DUP ;
                 DROP ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 GET ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 CAR ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 IF_NONE { PUSH string "112" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                 DUP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 UNPACK
                   (pair :BrokerContractTypes.ccgen
                      (lambda %genprog
                         bytes
                         (list (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes))))
                      (lambda %initprog bytes (lambda (map string address) (map string bytes)))) ;
                 DUP ;
                 IF_NONE { PUSH string "114" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 12 ;
                 DUP ;
                 DUG 13 ;
                 EXEC ;
                 LAMBDA
                   (pair (mutez %initbalance)
                         (pair (string %sprthash)
                               (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes))))
                   (pair string (pair operation address))
                   { DUP ;
                     DIP { CAR } ;
                     CDR ;
                     DUP ;
                     DIP { CAR } ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     PAIR ;
                     DUP ;
                     SOME ;
                     PUSH (option key_hash) None ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     PAIR ;
                     DUP ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     PAIR ;
                     DUP ;
                     DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CREATE_CONTRACT
                       { parameter bytes ;
                         storage
                           (pair :storage
                              (lambda %wfunc (pair bytes bytes) (pair (list operation) bytes))
                              (pair (bytes %wstorage)
                                    (option %avatarid (pair :avatar_identity (string %sprthash) (string %rclabel))))) ;
                         code { DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DUP ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                PAIR ;
                                DIG 3 ;
                                DUP ;
                                DUG 4 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                EXEC ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DIG 7 ;
                                DUP ;
                                DUG 8 ;
                                CAR ;
                                DIG 8 ;
                                DUP ;
                                DUG 9 ;
                                CDR ;
                                DUP ;
                                CDR ;
                                DUP ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                PAIR ;
                                DUP ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                PAIR ;
                                DUP ;
                                DIG 7 ;
                                DUP ;
                                DUG 8 ;
                                PAIR ;
                                DUP ;
                                DIP { DROP 16 } } } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 17 } } ;
                 DIG 12 ;
                 DUP ;
                 DUG 13 ;
                 APPLY ;
                 DIG 14 ;
                 DUP ;
                 DUG 15 ;
                 APPLY ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 MAP { DIP { DUP } ; EXEC } ;
                 DIP { DROP } ;
                 PUSH (lambda
                         (map string address)
                         (lambda (pair string (pair operation address)) (map string address)))
                      { LAMBDA
                          (pair (map string address) (pair string (pair operation address)))
                          (map string address)
                          { DUP ;
                            DIP { CAR } ;
                            CDR ;
                            DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            CDR ;
                            DUP ;
                            SOME ;
                            DIG 5 ;
                            DUP ;
                            DUG 6 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            DIG 5 ;
                            DUP ;
                            DUG 6 ;
                            UPDATE ;
                            DUP ;
                            DIP { DROP 7 } } ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        APPLY ;
                        DUP ;
                        DIP { DROP 2 } } ;
                 EMPTY_MAP string address ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 SWAP ;
                 DIP { SWAP } ;
                 SWAP ;
                 ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                 DIP { DROP } ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 18 ;
                 DUP ;
                 DUG 19 ;
                 EXEC ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 EXEC ;
                 LAMBDA
                   (pair (map string bytes) (pair string (pair operation address)))
                   (list operation)
                   { DUP ;
                     DIP { CAR } ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     GET ;
                     DUP ;
                     IF_NONE
                       { NIL operation ;
                         DUP ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CONS ;
                         DUP ;
                         DIP { DROP 2 } }
                       { PUSH mutez 0 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CONTRACT bytes ;
                         DUP ;
                         IF_NONE
                           { PUSH string "process_origination#contract" ; DUP ; FAILWITH }
                           { DUP ; DIP { DROP } } ;
                         DUP ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         TRANSFER_TOKENS ;
                         NIL operation ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CONS ;
                         DUP ;
                         DIG 10 ;
                         DUP ;
                         DUG 11 ;
                         CONS ;
                         DUP ;
                         DIP { DROP 8 } } ;
                     DUP ;
                     DIP { DROP 8 } } ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 APPLY ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 MAP { DIP { DUP } ; EXEC } ;
                 DIP { DROP } ;
                 PUSH (lambda (pair (list operation) (list operation)) (list operation))
                      { DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        DUP ;
                        DIP { NIL operation } ;
                        ITER { CONS } ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        ITER { CONS } ;
                        DUP ;
                        DIP { DROP 5 } } ;
                 NIL operation ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 SWAP ;
                 DIP { SWAP } ;
                 SWAP ;
                 ITER { SWAP ; PAIR ; DIP { DUP } ; EXEC } ;
                 DIP { DROP } ;
                 PUSH (lambda (pair string (pair operation address)) (pair string address))
                      { DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        DUP ;
                        CDR ;
                        DUP ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        PAIR ;
                        DUP ;
                        DIP { DROP 5 } } ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 MAP { DIP { DUP } ; EXEC } ;
                 DIP { DROP } ;
                 PUSH (lambda (map string address) (lambda (pair string address) (map string address)))
                      { LAMBDA
                          (pair (map string address) (pair string address))
                          (map string address)
                          { DUP ;
                            DIP { CAR } ;
                            CDR ;
                            DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            SOME ;
                            DIG 4 ;
                            DUP ;
                            DUG 5 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            DIG 4 ;
                            DUP ;
                            DUG 5 ;
                            UPDATE ;
                            DUP ;
                            DIP { DROP 6 } } ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        APPLY ;
                        DUP ;
                        DIP { DROP 2 } } ;
                 EMPTY_MAP string address ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 SWAP ;
                 DIP { SWAP } ;
                 SWAP ;
                 ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                 DIP { DROP } ;
                 DUP ;
                 DIG 22 ;
                 DUP ;
                 DUG 23 ;
                 PAIR ;
                 DUP ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 PUSH unit Unit ;
                 DUP ;
                 DROP ;
                 SOURCE ;
                 DUP ;
                 DIG 45 ;
                 DUP ;
                 DUG 46 ;
                 PAIR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PAIR ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DUP ;
                 SOME ;
                 DIG 52 ;
                 DUP ;
                 DUG 53 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 50 ;
                 DUP ;
                 DUG 51 ;
                 UPDATE ;
                 DIG 61 ;
                 DUP ;
                 DUG 62 ;
                 CAR ;
                 DIG 62 ;
                 DUP ;
                 DUG 63 ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 64 ;
                 DUP ;
                 DUG 65 ;
                 CDR ;
                 DUP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PAIR ;
                 DUP ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 PAIR ;
                 DUP ;
                 DIG 20 ;
                 DUP ;
                 DUG 21 ;
                 PAIR ;
                 DUP ;
                 DIP { DROP 56 } ;
                 DUP ;
                 DIP { DROP 7 } }
               { DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 CAR ;
                 DUP ;
                 CDR ;
                 PUSH unit Unit ;
                 DUP ;
                 DROP ;
                 SOURCE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 MEM ;
                 DUP ;
                 NOT ;
                 DUP ;
                 IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                 DUP ;
                 DROP ;
                 NIL operation ;
                 DIG 18 ;
                 DUP ;
                 DUG 19 ;
                 CAR ;
                 DUP ;
                 CAR ;
                 PUSH bool True ;
                 DIG 17 ;
                 DUP ;
                 DUG 18 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 UPDATE ;
                 DUP ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 PAIR ;
                 DIG 23 ;
                 DUP ;
                 DUG 24 ;
                 CDR ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DUP ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 PAIR ;
                 DIP { DROP 8 } ;
                 DUP ;
                 DIP { DROP 9 } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIG 11 ;
                     DUP ;
                     DUG 12 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     NIL operation ;
                     DIG 19 ;
                     DUP ;
                     DUG 20 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     PUSH bool False ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     UPDATE ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     PAIR ;
                     DIG 24 ;
                     DUP ;
                     DUG 25 ;
                     CDR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DIP { DROP 8 } ;
                     DUP ;
                     DIP { DROP 9 } }
                   { DUP ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     IF { PUSH string "template id conflict" ; DUP ; FAILWITH } { UNIT } ;
                     DUP ;
                     DROP ;
                     NIL operation ;
                     DIG 16 ;
                     DUP ;
                     DUG 17 ;
                     CAR ;
                     DIG 17 ;
                     DUP ;
                     DUG 18 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     SOME ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     UPDATE ;
                     DIG 21 ;
                     DUP ;
                     DUG 22 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     PAIR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     PAIR ;
                     DUP ;
                     DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     PAIR ;
                     DIP { DROP 12 } ;
                     DUP ;
                     DIP { DROP 6 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     IF_NONE { DIG 10 ; DUP ; DUG 11 } { DUP ; DIP { DROP } } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     IF_NONE { DIG 9 ; DUP ; DUG 10 } { DUP ; DIP { DROP } } ;
                     NIL operation ;
                     DIG 16 ;
                     DUP ;
                     DUG 17 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DIG 19 ;
                     DUP ;
                     DUG 20 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 14 } }
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     GET ;
                     DUP ;
                     IF_NONE { PUSH string "207" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     IF_NONE { DIG 2 ; DUP ; DUG 3 } { DUP ; DIP { DROP } } ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     IF_NONE { DIG 1 ; DUP ; DUG 2 } { DUP ; DIP { DROP } } ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DIG 14 ;
                     DUP ;
                     DUG 15 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     SOME ;
                     DIG 29 ;
                     DUP ;
                     DUG 30 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 26 ;
                     DUP ;
                     DUG 27 ;
                     UPDATE ;
                     NIL operation ;
                     DIG 38 ;
                     DUP ;
                     DUG 39 ;
                     CAR ;
                     DIG 39 ;
                     DUP ;
                     DUG 40 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 41 ;
                     DUP ;
                     DUG 42 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 38 } } ;
                 DIP { DROP } } ;
             DIP { DROP } } ;
         DUP ;
         DIP { DROP 12 } } }
