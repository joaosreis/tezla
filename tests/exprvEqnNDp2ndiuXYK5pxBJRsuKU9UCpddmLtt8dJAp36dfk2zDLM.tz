{ storage
    (pair (pair (pair (address %contract_address) (bytes %resultDescription))
                (pair (bytes %resultImage) (bytes %resultName)))
          (pair (pair (bytes %resultSymbol) (bytes %resultToken))
                (pair (map %saleMap nat (pair (mutez %amount) (pair (address %owner) (bool %sale))))
                      (nat %token_id)))) ;
  parameter
    (or (nat %buy)
        (pair %minter_entry
           (pair (nat %amount) (string %description))
           (pair (string %image) (pair (string %name) (string %symbol))))) ;
  code { CAST (pair (or nat (pair (pair nat string) (pair string (pair string string))))
                    (pair (pair (pair address bytes) (pair bytes bytes))
                          (pair (pair bytes bytes) (pair (map nat (pair mutez (pair address bool))) nat)))) ;
         UNPAIR ;
         IF_LEFT
           { PUSH bool True ;
             DUP 3 ;
             GET 5 ;
             DUP 3 ;
             GET ;
             IF_NONE { PUSH int 161 ; FAILWITH } {} ;
             GET 4 ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: self.data.saleMap[params.token_id].sale == True" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 5 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 162 ; FAILWITH } {} ;
             CAR ;
             AMOUNT ;
             COMPARE ;
             GE ;
             IF {}
                { PUSH string
                       "WrongCondition: sp.amount >= self.data.saleMap[params.token_id].amount" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 5 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 163 ; FAILWITH } {} ;
             GET 3 ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF {}
                { PUSH string
                       "WrongCondition: sp.sender != self.data.saleMap[params.token_id].owner" ;
                  FAILWITH } ;
             NIL operation ;
             DUP 3 ;
             CAR ;
             CAR ;
             CAR ;
             CONTRACT %transfer_v2 (pair (pair nat address) (pair address nat)) ;
             IF_NONE { PUSH int 169 ; FAILWITH } {} ;
             PUSH mutez 0 ;
             DUP 4 ;
             SENDER ;
             PAIR ;
             DUP 6 ;
             GET 5 ;
             DUP 6 ;
             GET ;
             IF_NONE { PUSH int 171 ; FAILWITH } {} ;
             GET 3 ;
             PUSH nat 1 ;
             PAIR ;
             PAIR ;
             TRANSFER_TOKENS ;
             CONS ;
             DIG 2 ;
             DUP ;
             GET 5 ;
             DUP ;
             DUP 5 ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 174 ; FAILWITH } {} ;
             PUSH bool False ;
             UPDATE 4 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 5 ;
             DUP ;
             DUG 3 ;
             GET 5 ;
             DUP 3 ;
             GET ;
             IF_NONE { PUSH int 175 ; FAILWITH } {} ;
             GET 3 ;
             CONTRACT unit ;
             IF_NONE { PUSH string "NFT sold" ; FAILWITH } {} ;
             PUSH nat 100 ;
             DUP 5 ;
             GET 5 ;
             DUP 5 ;
             GET ;
             IF_NONE { PUSH int 175 ; FAILWITH } {} ;
             CAR ;
             PUSH nat 80 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH int 175 ; FAILWITH } {} ;
             CAR ;
             UNIT ;
             TRANSFER_TOKENS ;
             CONS ;
             DIG 2 ;
             DUP ;
             GET 5 ;
             DUP ;
             DIG 4 ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 177 ; FAILWITH } {} ;
             SENDER ;
             UPDATE 3 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 5 ;
             SWAP }
           { SWAP ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             CDR ;
             DUP 4 ;
             GET 3 ;
             PACK ;
             PUSH nat 6 ;
             DUP 6 ;
             GET 3 ;
             PACK ;
             SIZE ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH int 139 ; FAILWITH } {} ;
             PUSH nat 6 ;
             SLICE ;
             IF_NONE { PUSH int 139 ; FAILWITH } {} ;
             PAIR ;
             SWAP ;
             CAR ;
             DUP 4 ;
             CAR ;
             CDR ;
             PACK ;
             PUSH nat 6 ;
             DUP 6 ;
             CAR ;
             CDR ;
             PACK ;
             SIZE ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH int 141 ; FAILWITH } {} ;
             PUSH nat 6 ;
             SLICE ;
             IF_NONE { PUSH int 141 ; FAILWITH } {} ;
             SWAP ;
             PAIR ;
             SWAP ;
             CAR ;
             DUP 4 ;
             GET 5 ;
             PACK ;
             PUSH nat 6 ;
             DUP 6 ;
             GET 5 ;
             PACK ;
             SIZE ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH int 143 ; FAILWITH } {} ;
             PUSH nat 6 ;
             SLICE ;
             IF_NONE { PUSH int 143 ; FAILWITH } {} ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             UNPAIR ;
             CDR ;
             DUP 4 ;
             GET 6 ;
             PACK ;
             PUSH nat 6 ;
             DUP 6 ;
             GET 6 ;
             PACK ;
             SIZE ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH int 145 ; FAILWITH } {} ;
             PUSH nat 6 ;
             SLICE ;
             IF_NONE { PUSH int 145 ; FAILWITH } {} ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             DUP ;
             DUG 2 ;
             GET 6 ;
             NIL string ;
             PUSH nat 0 ;
             DUP 3 ;
             COMPARE ;
             EQ ;
             IF { PUSH string "0" ; CONS } {} ;
             PUSH nat 0 ;
             DUP 3 ;
             COMPARE ;
             GT ;
             LOOP { PUSH (map nat string)
                         { Elt 0 "0" ;
                           Elt 1 "1" ;
                           Elt 2 "2" ;
                           Elt 3 "3" ;
                           Elt 4 "4" ;
                           Elt 5 "5" ;
                           Elt 6 "6" ;
                           Elt 7 "7" ;
                           Elt 8 "8" ;
                           Elt 9 "9" } ;
                    PUSH nat 10 ;
                    DUP 4 ;
                    EDIV ;
                    IF_NONE { PUSH int 109 ; FAILWITH } { CDR } ;
                    GET ;
                    IF_NONE { PUSH int 109 ; FAILWITH } {} ;
                    CONS ;
                    PUSH nat 10 ;
                    DIG 2 ;
                    EDIV ;
                    IF_NONE { PUSH int 111 ; FAILWITH } { CAR } ;
                    SWAP ;
                    PUSH nat 0 ;
                    DUP 3 ;
                    COMPARE ;
                    GT } ;
             SWAP ;
             DROP ;
             DIG 2 ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             CAR ;
             DUP 4 ;
             CONCAT ;
             PACK ;
             PUSH nat 6 ;
             DIG 5 ;
             CONCAT ;
             PACK ;
             SIZE ;
             SUB ;
             ISNAT ;
             IF_NONE { PUSH int 147 ; FAILWITH } {} ;
             PUSH nat 6 ;
             SLICE ;
             IF_NONE { PUSH int 147 ; FAILWITH } {} ;
             SWAP ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             NIL operation ;
             DUP 3 ;
             CAR ;
             CAR ;
             CAR ;
             CONTRACT %mint
               (pair (pair address (pair bytes bytes)) (pair (pair bytes bytes) (pair bytes nat))) ;
             IF_NONE { PUSH int 151 ; FAILWITH } {} ;
             PUSH mutez 0 ;
             DIG 4 ;
             DUP ;
             GET 6 ;
             SWAP ;
             DUP ;
             DUG 6 ;
             GET 3 ;
             CDR ;
             PAIR ;
             DIG 5 ;
             DUP ;
             GET 3 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 7 ;
             CAR ;
             GET 4 ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             DUP ;
             CAR ;
             GET 3 ;
             SWAP ;
             DUP ;
             DUG 7 ;
             CAR ;
             CAR ;
             CDR ;
             PAIR ;
             SENDER ;
             PAIR ;
             PAIR ;
             TRANSFER_TOKENS ;
             CONS ;
             DUP 3 ;
             DUP ;
             GET 5 ;
             PUSH bool True ;
             SENDER ;
             PUSH mutez 1 ;
             DIG 6 ;
             CAR ;
             CAR ;
             MUL ;
             PAIR 3 ;
             SOME ;
             DIG 4 ;
             GET 6 ;
             UPDATE ;
             UPDATE 5 ;
             DUP ;
             GET 6 ;
             PUSH nat 1 ;
             ADD ;
             UPDATE 6 ;
             SWAP } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
