{ parameter (or :_entries (unit %fund) (unit %main)) ;
  storage
    (pair :storage
       (timestamp %nextPayoutTime)
       (pair (mutez %donationAmount) (key_hash %creatorKey))) ;
  code { DUP ;
         DIP { CDR @storage_slash_1 } ;
         CAR @parameter_slash_2 ;
         DUP @parameter ;
         IF_LEFT
           { DROP ; { DIP { DUP } ; SWAP } ; NIL operation ; PAIR }
           { RENAME @__slash_5 ;
             { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } ;
             NOW @now ;
             { DIP { DUP @storage } ; SWAP } ;
             CAR %nextPayoutTime ;
             COMPARE ;
             GT ;
             IF { PUSH string "No payout to do, payments are up-to-date." ; FAILWITH }
                { UNIT } ;
             DROP ;
             BALANCE ;
             { DIP { DUP @storage } ; SWAP } ;
             { CDR ; CAR %donationAmount } ;
             COMPARE ;
             GT ;
             IF { PUSH string "Not enough funds in the contract to make the payout." ;
                  FAILWITH }
                { UNIT } ;
             DROP ;
             DIP { DROP } ;
             DUP ;
             CDR ;
             PUSH int 2628000 ;
             { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
             CAR %nextPayoutTime ;
             ADD ;
             PAIR @storage %nextPayoutTime ;
             NIL operation ;
             { DIP { { DIP { DUP } ; SWAP } } ; SWAP } ;
             { CDR ; CDR %creatorKey } ;
             IMPLICIT_ACCOUNT ;
             { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } ;
             DIP { DIP { DIP { DIP { DROP } } } } ;
             { CDR ; CAR %donationAmount } ;
             UNIT ;
             TRANSFER_TOKENS ;
             CONS @operations ;
             PAIR } ;
         DIP { DROP ; DROP } } }
