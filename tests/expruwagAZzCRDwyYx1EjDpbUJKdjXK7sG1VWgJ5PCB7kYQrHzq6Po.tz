{ parameter unit ;
  storage nat ;
  code { {} ;
         { DUP ; CDR ; DIP { CAR } } ;
         { PUSH nat 3 ;
           { PUSH nat 1 ;
             { DIG 1 ; DUP ; DUG 2 } ;
             PAIR ;
             PUSH (lambda (pair nat nat) (or :sum (pair nat nat) nat))
                  { { DUP ; CAR } ;
                    { { DIG 1 ; DUP ; DUG 2 } ; CDR } ;
                    { { PUSH nat 1 ; { DIG 2 ; DUP ; DUG 3 } ; SUB } ; ISNAT } ;
                    DUP ;
                    IF_NONE
                      { { DIG 1 ; DUP ; DUG 2 } ; RIGHT (pair nat nat) }
                      { { { DIG 2 ; DUP ; DUG 3 } ; { DIG 4 ; DUP ; DUG 5 } ; MUL } ;
                        { DIG 1 ; DUP ; DUG 2 } ;
                        PAIR ;
                        LEFT nat ;
                        DIP { DROP } } ;
                    DIP { DROP 4 } } ;
             SWAP ;
             LEFT nat ;
             LOOP_LEFT { DIP { DUP } ; EXEC } ;
             DIP { DROP } } ;
           DIP { DROP } ;
           NIL operation ;
           PAIR } ;
         DIP { DROP 2 } } }
