{ parameter (pair (bytes %nonce) (bytes %solution)) ;
  storage
    (pair (pair (pair (pair (int %blocksMined) (bytes %challenge))
                      (pair (timestamp %lastAdjustment)
                            (pair %params
                               (pair (int %blocksPerAdjustment) (int %maxTarget))
                               (pair (int %minTarget) (int %secPerBlock)))))
                (pair (pair (nat %rewardEra) (nat %rewardEraSupply))
                      (pair (big_map %solutions bytes bytes) (int %target))))
          (pair (pair (address %tokenContract) (nat %totalMineable)) (nat %totalMined))) ;
  code { LAMBDA
           (pair int nat)
           int
           { PUSH int 1 ;
             PUSH nat 0 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             LAMBDA
               (pair (pair int nat) (pair nat int))
               (pair bool (pair nat int))
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      MUL ;
                      PUSH nat 1 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      ADD ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      SWAP ;
                      CDR ;
                      SWAP ;
                      PAIR ;
                      DIP { DROP 2 } ;
                      PUSH bool True ;
                      PAIR }
                    { DIG 1 ; DUP ; DUG 2 ; PUSH bool False ; PAIR } ;
                 DIP { DROP 3 } } ;
             SWAP ;
             APPLY ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
             SWAP ;
             DROP ;
             DUP ;
             CDR ;
             DIP { DROP 2 } } ;
         DUP ;
         NIL operation ;
         SWAP ;
         LAMBDA
           (pair (lambda (pair int nat) int)
                 (pair (pair (pair (pair int bytes) (pair timestamp (pair (pair int int) (pair int int))))
                             (pair (pair nat nat) (pair (big_map bytes bytes) int)))
                       (pair (pair address nat) nat)))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             CAR ;
             PUSH int 2 ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SWAP ;
             EXEC ;
             ABS ;
             PUSH nat 5000000000 ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         APPLY ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CDR ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         PUSH bool False ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR ;
         DUP ;
         CAR ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         PUSH bool False ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         CONCAT ;
         BLAKE2B ;
         COMPARE ;
         EQ ;
         IF { DIG 2 ;
              DUP ;
              DUG 3 ;
              SIZE ;
              PUSH nat 2 ;
              PUSH nat 1 ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              SUB ;
              ABS ;
              MUL ;
              PUSH int 0 ;
              PUSH nat 0 ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              PAIR ;
              PAIR ;
              DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                                                                    DUP ;
                                                                    DIP { PAIR } ;
                                                                    SWAP } ;
                                                              SWAP } ;
                                                        SWAP } ;
                                                  SWAP } ;
                                            SWAP } ;
                                      SWAP } ;
                                SWAP } ;
                          DUP ;
                          DIP { PAIR } ;
                          SWAP } ;
                    SWAP } ;
              SWAP ;
              LAMBDA
                (pair (pair nat (pair bytes (lambda (pair int nat) int))) (pair (pair nat nat) int))
                (pair bool (pair (pair nat nat) int))
                { DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
                  DUP ;
                  CAR ;
                  CAR ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  CAR ;
                  CDR ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  COMPARE ;
                  LT ;
                  IF { DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       PUSH int 16 ;
                       PAIR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       SWAP ;
                       EXEC ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       PUSH nat 1 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       SLICE ;
                       IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                       PUSH int 0 ;
                       PUSH bytes 0x00 ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 0 } { DUP } ;
                       PUSH bytes 0x01 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 1 } { DUP } ;
                       PUSH bytes 0x02 ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 2 } { DUP } ;
                       PUSH bytes 0x03 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 3 } { DUP } ;
                       PUSH bytes 0x04 ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 4 } { DUP } ;
                       PUSH bytes 0x05 ;
                       DIG 7 ;
                       DUP ;
                       DUG 8 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 5 } { DUP } ;
                       PUSH bytes 0x06 ;
                       DIG 8 ;
                       DUP ;
                       DUG 9 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 6 } { DUP } ;
                       PUSH bytes 0x07 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 7 } { DUP } ;
                       PUSH bytes 0x08 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 8 } { DUP } ;
                       PUSH bytes 0x09 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 9 } { DUP } ;
                       PUSH bytes 0x0a ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 10 } { DUP } ;
                       PUSH bytes 0x0b ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 11 } { DUP } ;
                       PUSH bytes 0x0c ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 12 } { DUP } ;
                       PUSH bytes 0x0d ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 13 } { DUP } ;
                       PUSH bytes 0x0e ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 14 } { DUP } ;
                       PUSH bytes 0x0f ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 15 } { DUP } ;
                       PUSH bytes 0x10 ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 16 } { DUP } ;
                       PUSH bytes 0x11 ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 17 } { DUP } ;
                       PUSH bytes 0x12 ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 18 } { DUP } ;
                       PUSH bytes 0x13 ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 19 } { DUP } ;
                       PUSH bytes 0x14 ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 20 } { DUP } ;
                       PUSH bytes 0x15 ;
                       DIG 23 ;
                       DUP ;
                       DUG 24 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 21 } { DUP } ;
                       PUSH bytes 0x16 ;
                       DIG 24 ;
                       DUP ;
                       DUG 25 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 22 } { DUP } ;
                       PUSH bytes 0x17 ;
                       DIG 25 ;
                       DUP ;
                       DUG 26 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 23 } { DUP } ;
                       PUSH bytes 0x18 ;
                       DIG 26 ;
                       DUP ;
                       DUG 27 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 24 } { DUP } ;
                       PUSH bytes 0x19 ;
                       DIG 27 ;
                       DUP ;
                       DUG 28 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 25 } { DUP } ;
                       PUSH bytes 0x1a ;
                       DIG 28 ;
                       DUP ;
                       DUG 29 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 26 } { DUP } ;
                       PUSH bytes 0x1b ;
                       DIG 29 ;
                       DUP ;
                       DUG 30 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 27 } { DUP } ;
                       PUSH bytes 0x1c ;
                       DIG 30 ;
                       DUP ;
                       DUG 31 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 28 } { DUP } ;
                       PUSH bytes 0x1d ;
                       DIG 31 ;
                       DUP ;
                       DUG 32 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 29 } { DUP } ;
                       PUSH bytes 0x1e ;
                       DIG 32 ;
                       DUP ;
                       DUG 33 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 30 } { DUP } ;
                       PUSH bytes 0x1f ;
                       DIG 33 ;
                       DUP ;
                       DUG 34 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 31 } { DUP } ;
                       PUSH bytes 0x20 ;
                       DIG 34 ;
                       DUP ;
                       DUG 35 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 32 } { DUP } ;
                       PUSH bytes 0x21 ;
                       DIG 35 ;
                       DUP ;
                       DUG 36 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 33 } { DUP } ;
                       PUSH bytes 0x22 ;
                       DIG 36 ;
                       DUP ;
                       DUG 37 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 34 } { DUP } ;
                       PUSH bytes 0x23 ;
                       DIG 37 ;
                       DUP ;
                       DUG 38 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 35 } { DUP } ;
                       PUSH bytes 0x24 ;
                       DIG 38 ;
                       DUP ;
                       DUG 39 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 36 } { DUP } ;
                       PUSH bytes 0x25 ;
                       DIG 39 ;
                       DUP ;
                       DUG 40 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 37 } { DUP } ;
                       PUSH bytes 0x26 ;
                       DIG 40 ;
                       DUP ;
                       DUG 41 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 38 } { DUP } ;
                       PUSH bytes 0x27 ;
                       DIG 41 ;
                       DUP ;
                       DUG 42 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 39 } { DUP } ;
                       PUSH bytes 0x28 ;
                       DIG 42 ;
                       DUP ;
                       DUG 43 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 40 } { DUP } ;
                       PUSH bytes 0x29 ;
                       DIG 43 ;
                       DUP ;
                       DUG 44 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 41 } { DUP } ;
                       PUSH bytes 0x2a ;
                       DIG 44 ;
                       DUP ;
                       DUG 45 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 42 } { DUP } ;
                       PUSH bytes 0x2b ;
                       DIG 45 ;
                       DUP ;
                       DUG 46 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 43 } { DUP } ;
                       PUSH bytes 0x2c ;
                       DIG 46 ;
                       DUP ;
                       DUG 47 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 44 } { DUP } ;
                       PUSH bytes 0x2d ;
                       DIG 47 ;
                       DUP ;
                       DUG 48 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 45 } { DUP } ;
                       PUSH bytes 0x2e ;
                       DIG 48 ;
                       DUP ;
                       DUG 49 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 46 } { DUP } ;
                       PUSH bytes 0x2f ;
                       DIG 49 ;
                       DUP ;
                       DUG 50 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 47 } { DUP } ;
                       PUSH bytes 0x30 ;
                       DIG 50 ;
                       DUP ;
                       DUG 51 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 48 } { DUP } ;
                       PUSH bytes 0x31 ;
                       DIG 51 ;
                       DUP ;
                       DUG 52 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 49 } { DUP } ;
                       PUSH bytes 0x32 ;
                       DIG 52 ;
                       DUP ;
                       DUG 53 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 50 } { DUP } ;
                       PUSH bytes 0x33 ;
                       DIG 53 ;
                       DUP ;
                       DUG 54 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 51 } { DUP } ;
                       PUSH bytes 0x34 ;
                       DIG 54 ;
                       DUP ;
                       DUG 55 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 52 } { DUP } ;
                       PUSH bytes 0x35 ;
                       DIG 55 ;
                       DUP ;
                       DUG 56 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 53 } { DUP } ;
                       PUSH bytes 0x36 ;
                       DIG 56 ;
                       DUP ;
                       DUG 57 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 54 } { DUP } ;
                       PUSH bytes 0x37 ;
                       DIG 57 ;
                       DUP ;
                       DUG 58 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 55 } { DUP } ;
                       PUSH bytes 0x38 ;
                       DIG 58 ;
                       DUP ;
                       DUG 59 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 56 } { DUP } ;
                       PUSH bytes 0x39 ;
                       DIG 59 ;
                       DUP ;
                       DUG 60 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 57 } { DUP } ;
                       PUSH bytes 0x3a ;
                       DIG 60 ;
                       DUP ;
                       DUG 61 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 58 } { DUP } ;
                       PUSH bytes 0x3b ;
                       DIG 61 ;
                       DUP ;
                       DUG 62 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 59 } { DUP } ;
                       PUSH bytes 0x3c ;
                       DIG 62 ;
                       DUP ;
                       DUG 63 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 60 } { DUP } ;
                       PUSH bytes 0x3d ;
                       DIG 63 ;
                       DUP ;
                       DUG 64 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 61 } { DUP } ;
                       PUSH bytes 0x3e ;
                       DIG 64 ;
                       DUP ;
                       DUG 65 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 62 } { DUP } ;
                       PUSH bytes 0x3f ;
                       DIG 65 ;
                       DUP ;
                       DUG 66 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 63 } { DUP } ;
                       PUSH bytes 0x40 ;
                       DIG 66 ;
                       DUP ;
                       DUG 67 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 64 } { DUP } ;
                       PUSH bytes 0x41 ;
                       DIG 67 ;
                       DUP ;
                       DUG 68 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 65 } { DUP } ;
                       PUSH bytes 0x42 ;
                       DIG 68 ;
                       DUP ;
                       DUG 69 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 66 } { DUP } ;
                       PUSH bytes 0x43 ;
                       DIG 69 ;
                       DUP ;
                       DUG 70 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 67 } { DUP } ;
                       PUSH bytes 0x44 ;
                       DIG 70 ;
                       DUP ;
                       DUG 71 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 68 } { DUP } ;
                       PUSH bytes 0x45 ;
                       DIG 71 ;
                       DUP ;
                       DUG 72 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 69 } { DUP } ;
                       PUSH bytes 0x46 ;
                       DIG 72 ;
                       DUP ;
                       DUG 73 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 70 } { DUP } ;
                       PUSH bytes 0x47 ;
                       DIG 73 ;
                       DUP ;
                       DUG 74 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 71 } { DUP } ;
                       PUSH bytes 0x48 ;
                       DIG 74 ;
                       DUP ;
                       DUG 75 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 72 } { DUP } ;
                       PUSH bytes 0x49 ;
                       DIG 75 ;
                       DUP ;
                       DUG 76 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 73 } { DUP } ;
                       PUSH bytes 0x4a ;
                       DIG 76 ;
                       DUP ;
                       DUG 77 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 74 } { DUP } ;
                       PUSH bytes 0x4b ;
                       DIG 77 ;
                       DUP ;
                       DUG 78 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 75 } { DUP } ;
                       PUSH bytes 0x4c ;
                       DIG 78 ;
                       DUP ;
                       DUG 79 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 76 } { DUP } ;
                       PUSH bytes 0x4d ;
                       DIG 79 ;
                       DUP ;
                       DUG 80 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 77 } { DUP } ;
                       PUSH bytes 0x4e ;
                       DIG 80 ;
                       DUP ;
                       DUG 81 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 78 } { DUP } ;
                       PUSH bytes 0x4f ;
                       DIG 81 ;
                       DUP ;
                       DUG 82 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 79 } { DUP } ;
                       PUSH bytes 0x50 ;
                       DIG 82 ;
                       DUP ;
                       DUG 83 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 80 } { DUP } ;
                       PUSH bytes 0x51 ;
                       DIG 83 ;
                       DUP ;
                       DUG 84 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 81 } { DUP } ;
                       PUSH bytes 0x52 ;
                       DIG 84 ;
                       DUP ;
                       DUG 85 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 82 } { DUP } ;
                       PUSH bytes 0x53 ;
                       DIG 85 ;
                       DUP ;
                       DUG 86 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 83 } { DUP } ;
                       PUSH bytes 0x54 ;
                       DIG 86 ;
                       DUP ;
                       DUG 87 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 84 } { DUP } ;
                       PUSH bytes 0x55 ;
                       DIG 87 ;
                       DUP ;
                       DUG 88 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 85 } { DUP } ;
                       PUSH bytes 0x56 ;
                       DIG 88 ;
                       DUP ;
                       DUG 89 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 86 } { DUP } ;
                       PUSH bytes 0x57 ;
                       DIG 89 ;
                       DUP ;
                       DUG 90 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 87 } { DUP } ;
                       PUSH bytes 0x58 ;
                       DIG 90 ;
                       DUP ;
                       DUG 91 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 88 } { DUP } ;
                       PUSH bytes 0x59 ;
                       DIG 91 ;
                       DUP ;
                       DUG 92 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 89 } { DUP } ;
                       PUSH bytes 0x5a ;
                       DIG 92 ;
                       DUP ;
                       DUG 93 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 90 } { DUP } ;
                       PUSH bytes 0x5b ;
                       DIG 93 ;
                       DUP ;
                       DUG 94 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 91 } { DUP } ;
                       PUSH bytes 0x5c ;
                       DIG 94 ;
                       DUP ;
                       DUG 95 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 92 } { DUP } ;
                       PUSH bytes 0x5d ;
                       DIG 95 ;
                       DUP ;
                       DUG 96 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 93 } { DUP } ;
                       PUSH bytes 0x5e ;
                       DIG 96 ;
                       DUP ;
                       DUG 97 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 94 } { DUP } ;
                       PUSH bytes 0x5f ;
                       DIG 97 ;
                       DUP ;
                       DUG 98 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 95 } { DUP } ;
                       PUSH bytes 0x60 ;
                       DIG 98 ;
                       DUP ;
                       DUG 99 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 96 } { DUP } ;
                       PUSH bytes 0x61 ;
                       DIG 99 ;
                       DUP ;
                       DUG 100 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 97 } { DUP } ;
                       PUSH bytes 0x62 ;
                       DIG 100 ;
                       DUP ;
                       DUG 101 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 98 } { DUP } ;
                       PUSH bytes 0x63 ;
                       DIG 101 ;
                       DUP ;
                       DUG 102 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 99 } { DUP } ;
                       PUSH bytes 0x64 ;
                       DIG 102 ;
                       DUP ;
                       DUG 103 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 100 } { DUP } ;
                       PUSH bytes 0x65 ;
                       DIG 103 ;
                       DUP ;
                       DUG 104 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 101 } { DUP } ;
                       PUSH bytes 0x66 ;
                       DIG 104 ;
                       DUP ;
                       DUG 105 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 102 } { DUP } ;
                       PUSH bytes 0x67 ;
                       DIG 105 ;
                       DUP ;
                       DUG 106 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 103 } { DUP } ;
                       PUSH bytes 0x68 ;
                       DIG 106 ;
                       DUP ;
                       DUG 107 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 104 } { DUP } ;
                       PUSH bytes 0x69 ;
                       DIG 107 ;
                       DUP ;
                       DUG 108 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 105 } { DUP } ;
                       PUSH bytes 0x6a ;
                       DIG 108 ;
                       DUP ;
                       DUG 109 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 106 } { DUP } ;
                       PUSH bytes 0x6b ;
                       DIG 109 ;
                       DUP ;
                       DUG 110 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 107 } { DUP } ;
                       PUSH bytes 0x6c ;
                       DIG 110 ;
                       DUP ;
                       DUG 111 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 108 } { DUP } ;
                       PUSH bytes 0x6d ;
                       DIG 111 ;
                       DUP ;
                       DUG 112 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 109 } { DUP } ;
                       PUSH bytes 0x6e ;
                       DIG 112 ;
                       DUP ;
                       DUG 113 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 110 } { DUP } ;
                       PUSH bytes 0x6f ;
                       DIG 113 ;
                       DUP ;
                       DUG 114 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 111 } { DUP } ;
                       PUSH bytes 0x70 ;
                       DIG 114 ;
                       DUP ;
                       DUG 115 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 112 } { DUP } ;
                       PUSH bytes 0x71 ;
                       DIG 115 ;
                       DUP ;
                       DUG 116 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 113 } { DUP } ;
                       PUSH bytes 0x72 ;
                       DIG 116 ;
                       DUP ;
                       DUG 117 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 114 } { DUP } ;
                       PUSH bytes 0x73 ;
                       DIG 117 ;
                       DUP ;
                       DUG 118 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 115 } { DUP } ;
                       PUSH bytes 0x74 ;
                       DIG 118 ;
                       DUP ;
                       DUG 119 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 116 } { DUP } ;
                       PUSH bytes 0x75 ;
                       DIG 119 ;
                       DUP ;
                       DUG 120 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 117 } { DUP } ;
                       PUSH bytes 0x76 ;
                       DIG 120 ;
                       DUP ;
                       DUG 121 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 118 } { DUP } ;
                       PUSH bytes 0x77 ;
                       DIG 121 ;
                       DUP ;
                       DUG 122 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 119 } { DUP } ;
                       PUSH bytes 0x78 ;
                       DIG 122 ;
                       DUP ;
                       DUG 123 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 120 } { DUP } ;
                       PUSH bytes 0x79 ;
                       DIG 123 ;
                       DUP ;
                       DUG 124 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 121 } { DUP } ;
                       PUSH bytes 0x7a ;
                       DIG 124 ;
                       DUP ;
                       DUG 125 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 122 } { DUP } ;
                       PUSH bytes 0x7b ;
                       DIG 125 ;
                       DUP ;
                       DUG 126 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 123 } { DUP } ;
                       PUSH bytes 0x7c ;
                       DIG 126 ;
                       DUP ;
                       DUG 127 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 124 } { DUP } ;
                       PUSH bytes 0x7d ;
                       DIG 127 ;
                       DUP ;
                       DUG 128 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 125 } { DUP } ;
                       PUSH bytes 0x7e ;
                       DIG 128 ;
                       DUP ;
                       DUG 129 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 126 } { DUP } ;
                       PUSH bytes 0x7f ;
                       DIG 129 ;
                       DUP ;
                       DUG 130 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 127 } { DUP } ;
                       PUSH bytes 0x80 ;
                       DIG 130 ;
                       DUP ;
                       DUG 131 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 128 } { DUP } ;
                       PUSH bytes 0x81 ;
                       DIG 131 ;
                       DUP ;
                       DUG 132 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 129 } { DUP } ;
                       PUSH bytes 0x82 ;
                       DIG 132 ;
                       DUP ;
                       DUG 133 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 130 } { DUP } ;
                       PUSH bytes 0x83 ;
                       DIG 133 ;
                       DUP ;
                       DUG 134 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 131 } { DUP } ;
                       PUSH bytes 0x84 ;
                       DIG 134 ;
                       DUP ;
                       DUG 135 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 132 } { DUP } ;
                       PUSH bytes 0x85 ;
                       DIG 135 ;
                       DUP ;
                       DUG 136 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 133 } { DUP } ;
                       PUSH bytes 0x86 ;
                       DIG 136 ;
                       DUP ;
                       DUG 137 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 134 } { DUP } ;
                       PUSH bytes 0x87 ;
                       DIG 137 ;
                       DUP ;
                       DUG 138 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 135 } { DUP } ;
                       PUSH bytes 0x88 ;
                       DIG 138 ;
                       DUP ;
                       DUG 139 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 136 } { DUP } ;
                       PUSH bytes 0x89 ;
                       DIG 139 ;
                       DUP ;
                       DUG 140 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 137 } { DUP } ;
                       PUSH bytes 0x8a ;
                       DIG 140 ;
                       DUP ;
                       DUG 141 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 138 } { DUP } ;
                       PUSH bytes 0x8b ;
                       DIG 141 ;
                       DUP ;
                       DUG 142 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 139 } { DUP } ;
                       PUSH bytes 0x8c ;
                       DIG 142 ;
                       DUP ;
                       DUG 143 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 140 } { DUP } ;
                       PUSH bytes 0x8d ;
                       DIG 143 ;
                       DUP ;
                       DUG 144 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 141 } { DUP } ;
                       PUSH bytes 0x8e ;
                       DIG 144 ;
                       DUP ;
                       DUG 145 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 142 } { DUP } ;
                       PUSH bytes 0x8f ;
                       DIG 145 ;
                       DUP ;
                       DUG 146 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 143 } { DUP } ;
                       PUSH bytes 0x90 ;
                       DIG 146 ;
                       DUP ;
                       DUG 147 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 144 } { DUP } ;
                       PUSH bytes 0x91 ;
                       DIG 147 ;
                       DUP ;
                       DUG 148 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 145 } { DUP } ;
                       PUSH bytes 0x92 ;
                       DIG 148 ;
                       DUP ;
                       DUG 149 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 146 } { DUP } ;
                       PUSH bytes 0x93 ;
                       DIG 149 ;
                       DUP ;
                       DUG 150 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 147 } { DUP } ;
                       PUSH bytes 0x94 ;
                       DIG 150 ;
                       DUP ;
                       DUG 151 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 148 } { DUP } ;
                       PUSH bytes 0x95 ;
                       DIG 151 ;
                       DUP ;
                       DUG 152 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 149 } { DUP } ;
                       PUSH bytes 0x96 ;
                       DIG 152 ;
                       DUP ;
                       DUG 153 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 150 } { DUP } ;
                       PUSH bytes 0x97 ;
                       DIG 153 ;
                       DUP ;
                       DUG 154 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 151 } { DUP } ;
                       PUSH bytes 0x98 ;
                       DIG 154 ;
                       DUP ;
                       DUG 155 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 152 } { DUP } ;
                       PUSH bytes 0x99 ;
                       DIG 155 ;
                       DUP ;
                       DUG 156 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 153 } { DUP } ;
                       PUSH bytes 0x9a ;
                       DIG 156 ;
                       DUP ;
                       DUG 157 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 154 } { DUP } ;
                       PUSH bytes 0x9b ;
                       DIG 157 ;
                       DUP ;
                       DUG 158 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 155 } { DUP } ;
                       PUSH bytes 0x9c ;
                       DIG 158 ;
                       DUP ;
                       DUG 159 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 156 } { DUP } ;
                       PUSH bytes 0x9d ;
                       DIG 159 ;
                       DUP ;
                       DUG 160 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 157 } { DUP } ;
                       PUSH bytes 0x9e ;
                       DIG 160 ;
                       DUP ;
                       DUG 161 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 158 } { DUP } ;
                       PUSH bytes 0x9f ;
                       DIG 161 ;
                       DUP ;
                       DUG 162 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 159 } { DUP } ;
                       PUSH bytes 0xa0 ;
                       DIG 162 ;
                       DUP ;
                       DUG 163 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 160 } { DUP } ;
                       PUSH bytes 0xa1 ;
                       DIG 163 ;
                       DUP ;
                       DUG 164 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 161 } { DUP } ;
                       PUSH bytes 0xa2 ;
                       DIG 164 ;
                       DUP ;
                       DUG 165 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 162 } { DUP } ;
                       PUSH bytes 0xa3 ;
                       DIG 165 ;
                       DUP ;
                       DUG 166 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 163 } { DUP } ;
                       PUSH bytes 0xa4 ;
                       DIG 166 ;
                       DUP ;
                       DUG 167 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 164 } { DUP } ;
                       PUSH bytes 0xa5 ;
                       DIG 167 ;
                       DUP ;
                       DUG 168 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 165 } { DUP } ;
                       PUSH bytes 0xa6 ;
                       DIG 168 ;
                       DUP ;
                       DUG 169 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 166 } { DUP } ;
                       PUSH bytes 0xa7 ;
                       DIG 169 ;
                       DUP ;
                       DUG 170 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 167 } { DUP } ;
                       PUSH bytes 0xa8 ;
                       DIG 170 ;
                       DUP ;
                       DUG 171 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 168 } { DUP } ;
                       PUSH bytes 0xa9 ;
                       DIG 171 ;
                       DUP ;
                       DUG 172 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 169 } { DUP } ;
                       PUSH bytes 0xaa ;
                       DIG 172 ;
                       DUP ;
                       DUG 173 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 170 } { DUP } ;
                       PUSH bytes 0xab ;
                       DIG 173 ;
                       DUP ;
                       DUG 174 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 171 } { DUP } ;
                       PUSH bytes 0xac ;
                       DIG 174 ;
                       DUP ;
                       DUG 175 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 172 } { DUP } ;
                       PUSH bytes 0xad ;
                       DIG 175 ;
                       DUP ;
                       DUG 176 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 173 } { DUP } ;
                       PUSH bytes 0xae ;
                       DIG 176 ;
                       DUP ;
                       DUG 177 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 174 } { DUP } ;
                       PUSH bytes 0xaf ;
                       DIG 177 ;
                       DUP ;
                       DUG 178 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 175 } { DUP } ;
                       PUSH bytes 0xb0 ;
                       DIG 178 ;
                       DUP ;
                       DUG 179 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 176 } { DUP } ;
                       PUSH bytes 0xb1 ;
                       DIG 179 ;
                       DUP ;
                       DUG 180 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 177 } { DUP } ;
                       PUSH bytes 0xb2 ;
                       DIG 180 ;
                       DUP ;
                       DUG 181 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 178 } { DUP } ;
                       PUSH bytes 0xb3 ;
                       DIG 181 ;
                       DUP ;
                       DUG 182 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 179 } { DUP } ;
                       PUSH bytes 0xb4 ;
                       DIG 182 ;
                       DUP ;
                       DUG 183 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 180 } { DUP } ;
                       PUSH bytes 0xb5 ;
                       DIG 183 ;
                       DUP ;
                       DUG 184 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 181 } { DUP } ;
                       PUSH bytes 0xb6 ;
                       DIG 184 ;
                       DUP ;
                       DUG 185 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 182 } { DUP } ;
                       PUSH bytes 0xb7 ;
                       DIG 185 ;
                       DUP ;
                       DUG 186 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 183 } { DUP } ;
                       PUSH bytes 0xb8 ;
                       DIG 186 ;
                       DUP ;
                       DUG 187 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 184 } { DUP } ;
                       PUSH bytes 0xb9 ;
                       DIG 187 ;
                       DUP ;
                       DUG 188 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 185 } { DUP } ;
                       PUSH bytes 0xba ;
                       DIG 188 ;
                       DUP ;
                       DUG 189 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 186 } { DUP } ;
                       PUSH bytes 0xbb ;
                       DIG 189 ;
                       DUP ;
                       DUG 190 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 187 } { DUP } ;
                       PUSH bytes 0xbc ;
                       DIG 190 ;
                       DUP ;
                       DUG 191 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 188 } { DUP } ;
                       PUSH bytes 0xbd ;
                       DIG 191 ;
                       DUP ;
                       DUG 192 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 189 } { DUP } ;
                       PUSH bytes 0xbe ;
                       DIG 192 ;
                       DUP ;
                       DUG 193 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 190 } { DUP } ;
                       PUSH bytes 0xbf ;
                       DIG 193 ;
                       DUP ;
                       DUG 194 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 191 } { DUP } ;
                       PUSH bytes 0xc0 ;
                       DIG 194 ;
                       DUP ;
                       DUG 195 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 192 } { DUP } ;
                       PUSH bytes 0xc1 ;
                       DIG 195 ;
                       DUP ;
                       DUG 196 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 193 } { DUP } ;
                       PUSH bytes 0xc2 ;
                       DIG 196 ;
                       DUP ;
                       DUG 197 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 194 } { DUP } ;
                       PUSH bytes 0xc3 ;
                       DIG 197 ;
                       DUP ;
                       DUG 198 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 195 } { DUP } ;
                       PUSH bytes 0xc4 ;
                       DIG 198 ;
                       DUP ;
                       DUG 199 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 196 } { DUP } ;
                       PUSH bytes 0xc5 ;
                       DIG 199 ;
                       DUP ;
                       DUG 200 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 197 } { DUP } ;
                       PUSH bytes 0xc6 ;
                       DIG 200 ;
                       DUP ;
                       DUG 201 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 198 } { DUP } ;
                       PUSH bytes 0xc7 ;
                       DIG 201 ;
                       DUP ;
                       DUG 202 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 199 } { DUP } ;
                       PUSH bytes 0xc8 ;
                       DIG 202 ;
                       DUP ;
                       DUG 203 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 200 } { DUP } ;
                       PUSH bytes 0xc9 ;
                       DIG 203 ;
                       DUP ;
                       DUG 204 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 201 } { DUP } ;
                       PUSH bytes 0xca ;
                       DIG 204 ;
                       DUP ;
                       DUG 205 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 202 } { DUP } ;
                       PUSH bytes 0xcb ;
                       DIG 205 ;
                       DUP ;
                       DUG 206 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 203 } { DUP } ;
                       PUSH bytes 0xcc ;
                       DIG 206 ;
                       DUP ;
                       DUG 207 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 204 } { DUP } ;
                       PUSH bytes 0xcd ;
                       DIG 207 ;
                       DUP ;
                       DUG 208 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 205 } { DUP } ;
                       PUSH bytes 0xce ;
                       DIG 208 ;
                       DUP ;
                       DUG 209 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 206 } { DUP } ;
                       PUSH bytes 0xcf ;
                       DIG 209 ;
                       DUP ;
                       DUG 210 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 207 } { DUP } ;
                       PUSH bytes 0xd0 ;
                       DIG 210 ;
                       DUP ;
                       DUG 211 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 208 } { DUP } ;
                       PUSH bytes 0xd1 ;
                       DIG 211 ;
                       DUP ;
                       DUG 212 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 209 } { DUP } ;
                       PUSH bytes 0xd2 ;
                       DIG 212 ;
                       DUP ;
                       DUG 213 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 210 } { DUP } ;
                       PUSH bytes 0xd3 ;
                       DIG 213 ;
                       DUP ;
                       DUG 214 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 211 } { DUP } ;
                       PUSH bytes 0xd4 ;
                       DIG 214 ;
                       DUP ;
                       DUG 215 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 212 } { DUP } ;
                       PUSH bytes 0xd5 ;
                       DIG 215 ;
                       DUP ;
                       DUG 216 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 213 } { DUP } ;
                       PUSH bytes 0xd6 ;
                       DIG 216 ;
                       DUP ;
                       DUG 217 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 214 } { DUP } ;
                       PUSH bytes 0xd7 ;
                       DIG 217 ;
                       DUP ;
                       DUG 218 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 215 } { DUP } ;
                       PUSH bytes 0xd8 ;
                       DIG 218 ;
                       DUP ;
                       DUG 219 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 216 } { DUP } ;
                       PUSH bytes 0xd9 ;
                       DIG 219 ;
                       DUP ;
                       DUG 220 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 217 } { DUP } ;
                       PUSH bytes 0xda ;
                       DIG 220 ;
                       DUP ;
                       DUG 221 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 218 } { DUP } ;
                       PUSH bytes 0xdb ;
                       DIG 221 ;
                       DUP ;
                       DUG 222 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 219 } { DUP } ;
                       PUSH bytes 0xdc ;
                       DIG 222 ;
                       DUP ;
                       DUG 223 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 220 } { DUP } ;
                       PUSH bytes 0xdd ;
                       DIG 223 ;
                       DUP ;
                       DUG 224 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 221 } { DUP } ;
                       PUSH bytes 0xde ;
                       DIG 224 ;
                       DUP ;
                       DUG 225 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 222 } { DUP } ;
                       PUSH bytes 0xdf ;
                       DIG 225 ;
                       DUP ;
                       DUG 226 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 223 } { DUP } ;
                       PUSH bytes 0xe0 ;
                       DIG 226 ;
                       DUP ;
                       DUG 227 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 224 } { DUP } ;
                       PUSH bytes 0xe1 ;
                       DIG 227 ;
                       DUP ;
                       DUG 228 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 225 } { DUP } ;
                       PUSH bytes 0xe2 ;
                       DIG 228 ;
                       DUP ;
                       DUG 229 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 226 } { DUP } ;
                       PUSH bytes 0xe3 ;
                       DIG 229 ;
                       DUP ;
                       DUG 230 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 227 } { DUP } ;
                       PUSH bytes 0xe4 ;
                       DIG 230 ;
                       DUP ;
                       DUG 231 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 228 } { DUP } ;
                       PUSH bytes 0xe5 ;
                       DIG 231 ;
                       DUP ;
                       DUG 232 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 229 } { DUP } ;
                       PUSH bytes 0xe6 ;
                       DIG 232 ;
                       DUP ;
                       DUG 233 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 230 } { DUP } ;
                       PUSH bytes 0xe7 ;
                       DIG 233 ;
                       DUP ;
                       DUG 234 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 231 } { DUP } ;
                       PUSH bytes 0xe8 ;
                       DIG 234 ;
                       DUP ;
                       DUG 235 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 232 } { DUP } ;
                       PUSH bytes 0xe9 ;
                       DIG 235 ;
                       DUP ;
                       DUG 236 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 233 } { DUP } ;
                       PUSH bytes 0xea ;
                       DIG 236 ;
                       DUP ;
                       DUG 237 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 234 } { DUP } ;
                       PUSH bytes 0xeb ;
                       DIG 237 ;
                       DUP ;
                       DUG 238 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 235 } { DUP } ;
                       PUSH bytes 0xec ;
                       DIG 238 ;
                       DUP ;
                       DUG 239 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 236 } { DUP } ;
                       PUSH bytes 0xed ;
                       DIG 239 ;
                       DUP ;
                       DUG 240 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 237 } { DUP } ;
                       PUSH bytes 0xee ;
                       DIG 240 ;
                       DUP ;
                       DUG 241 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 238 } { DUP } ;
                       PUSH bytes 0xef ;
                       DIG 241 ;
                       DUP ;
                       DUG 242 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 239 } { DUP } ;
                       PUSH bytes 0xf0 ;
                       DIG 242 ;
                       DUP ;
                       DUG 243 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 240 } { DUP } ;
                       PUSH bytes 0xf1 ;
                       DIG 243 ;
                       DUP ;
                       DUG 244 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 241 } { DUP } ;
                       PUSH bytes 0xf2 ;
                       DIG 244 ;
                       DUP ;
                       DUG 245 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 242 } { DUP } ;
                       PUSH bytes 0xf3 ;
                       DIG 245 ;
                       DUP ;
                       DUG 246 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 243 } { DUP } ;
                       PUSH bytes 0xf4 ;
                       DIG 246 ;
                       DUP ;
                       DUG 247 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 244 } { DUP } ;
                       PUSH bytes 0xf5 ;
                       DIG 247 ;
                       DUP ;
                       DUG 248 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 245 } { DUP } ;
                       PUSH bytes 0xf6 ;
                       DIG 248 ;
                       DUP ;
                       DUG 249 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 246 } { DUP } ;
                       PUSH bytes 0xf7 ;
                       DIG 249 ;
                       DUP ;
                       DUG 250 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 247 } { DUP } ;
                       PUSH bytes 0xf8 ;
                       DIG 250 ;
                       DUP ;
                       DUG 251 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 248 } { DUP } ;
                       PUSH bytes 0xf9 ;
                       DIG 251 ;
                       DUP ;
                       DUG 252 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 249 } { DUP } ;
                       PUSH bytes 0xfa ;
                       DIG 252 ;
                       DUP ;
                       DUG 253 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 250 } { DUP } ;
                       PUSH bytes 0xfb ;
                       DIG 253 ;
                       DUP ;
                       DUG 254 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 251 } { DUP } ;
                       PUSH bytes 0xfc ;
                       DIG 254 ;
                       DUP ;
                       DUG 255 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 252 } { DUP } ;
                       PUSH bytes 0xfd ;
                       DIG 255 ;
                       DUP ;
                       DUG 256 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 253 } { DUP } ;
                       PUSH bytes 0xfe ;
                       DIG 256 ;
                       DUP ;
                       DUG 257 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 254 } { DUP } ;
                       PUSH bytes 0xff ;
                       DIG 257 ;
                       DUP ;
                       DUG 258 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 255 } { DUP } ;
                       DIP { DROP 257 } ;
                       MUL ;
                       DUP ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       CDR ;
                       ADD ;
                       PUSH nat 1 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       ADD ;
                       PUSH nat 2 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       SUB ;
                       ABS ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       SWAP ;
                       CAR ;
                       PAIR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                       SWAP ;
                       PAIR ;
                       PAIR ;
                       DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                       PAIR ;
                       PAIR ;
                       DIP { DROP 4 } ;
                       PUSH bool True ;
                       PAIR }
                     { DIG 2 ; DUP ; DUG 3 ; PUSH bool False ; PAIR } ;
                  DIP { DROP 6 } } ;
              SWAP ;
              APPLY ;
              SWAP ;
              PUSH bool True ;
              LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
              SWAP ;
              DROP ;
              DUP ;
              CDR ;
              DIP { DROP 3 } ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CDR ;
              CDR ;
              CDR ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              COMPARE ;
              LE ;
              IF { DIG 2 ; DUP ; DUG 3 ; DROP ; PUSH bool True }
                 { DIG 2 ; DUP ; DUG 3 } ;
              DIP { DROP 2 } }
            { DUP } ;
         DUP ;
         DIP { DROP 5 } ;
         COMPARE ;
         EQ ;
         IF { PUSH string "Invalid" ; FAILWITH } { PUSH unit Unit } ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CDR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH unit Unit } { PUSH string "Solved" ; FAILWITH } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         SWAP ;
         EXEC ;
         DUP ;
         SENDER ;
         PAIR ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         CAR ;
         CAR ;
         CONTRACT %mint (pair (address %to) (nat %value)) ;
         IF_NONE
           { PUSH string "bad address for get_entrypoint (%mint)" ; FAILWITH }
           {} ;
         DUP ;
         PUSH mutez 0 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         TRANSFER_TOKENS ;
         NIL operation ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CONS ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         CDR ;
         CDR ;
         ADD ;
         DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CDR ;
         CDR ;
         CAR ;
         DIG 11 ;
         DUP ;
         DUG 12 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         SWAP ;
         SOME ;
         SWAP ;
         UPDATE ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CDR } ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         DIG 12 ;
         DUP ;
         DUG 13 ;
         SWAP ;
         EXEC ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         CDR ;
         ADD ;
         PUSH nat 39 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         CAR ;
         COMPARE ;
         LT ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         COMPARE ;
         GT ;
         AND ;
         IF { DIG 1 ;
              DUP ;
              DUG 2 ;
              PUSH nat 1 ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              ADD ;
              DIP { DUP ;
                    CDR ;
                    SWAP ;
                    CAR ;
                    DUP ;
                    CAR ;
                    SWAP ;
                    CDR ;
                    DUP ;
                    CDR ;
                    SWAP ;
                    CAR ;
                    CDR } ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              DIP { DROP 2 } }
            { DIG 1 ; DUP ; DUG 2 } ;
         DUP ;
         PUSH nat 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         CAR ;
         ADD ;
         PUSH int 2 ;
         PAIR ;
         DIG 17 ;
         DUP ;
         DUG 18 ;
         SWAP ;
         EXEC ;
         ABS ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CAR ;
         CDR ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CAR ;
         CDR ;
         SUB ;
         ABS ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               CAR } ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         PUSH int 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         ADD ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               CDR } ;
         PAIR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         CAR ;
         CAR ;
         CDR ;
         CDR ;
         CAR ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         EDIV ;
         IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
         CDR ;
         PUSH nat 0 ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         IF { DIG 1 ;
              DUP ;
              DUG 2 ;
              CAR ;
              CAR ;
              CDR ;
              CAR ;
              NOW ;
              SUB ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              CAR ;
              CAR ;
              CDR ;
              CDR ;
              CDR ;
              CDR ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CAR ;
              CDR ;
              CDR ;
              CAR ;
              CAR ;
              MUL ;
              DUP ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              COMPARE ;
              LT ;
              IF { PUSH int 100 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   PUSH int 100 ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   MUL ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   SUB ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   PUSH int 1000 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   COMPARE ;
                   GT ;
                   IF { DIG 1 ; DUP ; DUG 2 ; DROP ; PUSH int 1000 } { DIG 1 ; DUP ; DUG 2 } ;
                   PUSH int 2000 ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CDR ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   MUL ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CDR ;
                   SUB ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         CAR } ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   PAIR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIP { DROP 3 } }
                 { PUSH int 100 ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   PUSH int 100 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   MUL ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   SUB ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   PUSH int 1000 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   COMPARE ;
                   GT ;
                   IF { DIG 1 ; DUP ; DUG 2 ; DROP ; PUSH int 1000 } { DIG 1 ; DUP ; DUG 2 } ;
                   PUSH int 2000 ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CDR ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   MUL ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CDR ;
                   ADD ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         CAR } ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   PAIR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIP { DROP 3 } } ;
              DUP ;
              CAR ;
              CAR ;
              CDR ;
              CDR ;
              CDR ;
              CAR ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              CAR ;
              CDR ;
              CDR ;
              CDR ;
              COMPARE ;
              LT ;
              IF { DUP ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CDR ;
                   CAR ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         CAR } ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   PAIR ;
                   DIP { DROP } }
                 { DUP } ;
              DUP ;
              CAR ;
              CAR ;
              CDR ;
              CDR ;
              CAR ;
              CDR ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              CAR ;
              CDR ;
              CDR ;
              CDR ;
              COMPARE ;
              GT ;
              IF { DUP ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   CDR ;
                   CAR ;
                   CDR ;
                   DIP { DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         CAR } ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   PAIR ;
                   DIP { DROP } }
                 { DUP } ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              CDR ;
              NOW ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              PAIR ;
              DUP ;
              DIP { DROP 5 } ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              DIP { DROP 2 } }
            { DIG 1 ; DUP ; DUG 2 } ;
         DUP ;
         DIG 17 ;
         DUP ;
         DUG 18 ;
         BLAKE2B ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               CAR } ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         PAIR ;
         DIP { DROP 21 } } }
