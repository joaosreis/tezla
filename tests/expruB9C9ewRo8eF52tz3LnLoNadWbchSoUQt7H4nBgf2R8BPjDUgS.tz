{ parameter
    (or (pair %addHash (string %hash) (string %target)) (address %addWhitelist)) ;
  storage
    (pair (pair (map %history
                   string
                   (pair (pair (string %hash) (string %precursorHash))
                         (pair (string %target) (timestamp %timestamp))))
                (string %lastHash))
          (map %whitelist address bool)) ;
  code { LAMBDA
           (pair address
                 (pair (pair (map %history
                                string
                                (pair (pair (string %hash) (string %precursorHash))
                                      (pair (string %target) (timestamp %timestamp))))
                             (string %lastHash))
                       (map %whitelist address bool)))
           (pair (list operation)
                 (pair (pair (map %history
                                string
                                (pair (pair (string %hash) (string %precursorHash))
                                      (pair (string %target) (timestamp %timestamp))))
                             (string %lastHash))
                       (map %whitelist address bool)))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP ; CDR ; PUSH bool True ; SOME } ;
             UPDATE ;
             DIP { DUP ; CAR } ;
             SWAP ;
             PAIR ;
             DIP { DROP } ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 3 } } ;
         LAMBDA
           (pair (pair (string %hash) (string %target))
                 (pair (pair (map %history
                                string
                                (pair (pair (string %hash) (string %precursorHash))
                                      (pair (string %target) (timestamp %timestamp))))
                             (string %lastHash))
                       (map %whitelist address bool)))
           (pair (list operation)
                 (pair (pair (map %history
                                string
                                (pair (pair (string %hash) (string %precursorHash))
                                      (pair (string %target) (timestamp %timestamp))))
                             (string %lastHash))
                       (map %whitelist address bool)))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CAR ; CDR } ;
                   PAIR ;
                   DIP { NOW ; PUSH string "fixture" ; PAIR } ;
                   PAIR ;
                   SOME ;
                   DIP { DUP ; CAR ; CAR } } ;
             UPDATE ;
             DIP { DUP ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
             PAIR ;
             PAIR ;
             DIP { DROP ; DUP } ;
             SWAP ;
             CAR ;
             DIP { DUP ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP { DROP } ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 3 } } ;
         DIP 2 { DUP } ;
         DIG 2 ;
         CAR ;
         DIP 3 { DUP } ;
         DIG 3 ;
         CDR ;
         DUP ;
         CDR ;
         SOURCE ;
         GET ;
         IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
         DUP ;
         IF { PUSH string "sibal" ; FAILWITH } { PUSH unit Unit } ;
         DROP ;
         DIP 2 { DUP } ;
         DIG 2 ;
         IF_LEFT
           { DUP ;
             DUP ;
             DIP { DIP 3 { DUP } ; DIG 3 } ;
             PAIR ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DIP { DROP 2 } }
           { DUP ;
             DUP ;
             DIP { DIP 3 { DUP } ; DIG 3 } ;
             PAIR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             EXEC ;
             DIP { DROP 2 } } ;
         DIP { DROP 6 } } }
