{ storage
    (pair (pair (bool %check) (pair (map %deck int (map int int)) (bool %draw)))
          (pair (pair (map %kings int (pair (int %i) (pair (int %j) (bool %moved)))) (int %nextPlayer))
                (pair (option %previousPawnMove
                         (pair (pair %f (int %i) (int %j)) (pair %t (int %i) (int %j))))
                      (int %winner)))) ;
  parameter (pair (pair %f (int %i) (int %j)) (pair %t (int %i) (int %j))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         PUSH int 0 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CDR ;
         CDR ;
         COMPARE ;
         EQ ;
         IF { { SWAP ; DUP ; DUG 2 ; CAR ; CDR ; CDR ; NOT } }
            { PUSH bool False } ;
         IF { {} }
            { { PUSH string "WrongCondition: (self.data.winner == 0) & (~ self.data.draw)" ;
                FAILWITH } } ;
         DUP ;
         CAR ;
         CAR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { { DUP ; CAR ; CAR ; PUSH int 8 ; COMPARE ; GT } }
            { PUSH bool False } ;
         IF { {} }
            { { PUSH string "WrongCondition: (params.f.i >= 0) & (params.f.i < 8)" ;
                FAILWITH } } ;
         DUP ;
         CAR ;
         CDR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { { DUP ; CAR ; CDR ; PUSH int 8 ; COMPARE ; GT } }
            { PUSH bool False } ;
         IF { {} }
            { { PUSH string "WrongCondition: (params.f.j >= 0) & (params.f.j < 8)" ;
                FAILWITH } } ;
         DUP ;
         CDR ;
         CAR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { { DUP ; CDR ; CAR ; PUSH int 8 ; COMPARE ; GT } }
            { PUSH bool False } ;
         IF { {} }
            { { PUSH string "WrongCondition: (params.t.i >= 0) & (params.t.i < 8)" ;
                FAILWITH } } ;
         DUP ;
         CDR ;
         CDR ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GE ;
         IF { { DUP ; CDR ; CDR ; PUSH int 8 ; COMPARE ; GT } }
            { PUSH bool False } ;
         IF { {} }
            { { PUSH string "WrongCondition: (params.t.j >= 0) & (params.t.j < 8)" ;
                FAILWITH } } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         CAR ;
         CDR ;
         PUSH int 0 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         COMPARE ;
         COMPARE ;
         EQ ;
         IF { {} }
            { { PUSH string
                     "WrongCondition: (sp.sign(self.data.deck[params.f.i][params.f.j])) == self.data.nextPlayer" ;
                FAILWITH } } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         CAR ;
         CDR ;
         PUSH int 0 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:47" ; FAILWITH } } {} ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:48" ; FAILWITH } } {} ;
         COMPARE ;
         COMPARE ;
         NEQ ;
         IF { {} }
            { { PUSH string
                     "WrongCondition: (sp.sign(self.data.deck[params.t.i][params.t.j])) != self.data.nextPlayer" ;
                FAILWITH } } ;
         PUSH nat 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CDR ;
                PUSH int 0 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                COMPARE ;
                NEQ ;
                IF { { PUSH int 0 ;
                       DUP ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CAR ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:47" ; FAILWITH } } {} ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:48" ; FAILWITH } } {} ;
                       COMPARE ;
                       COMPARE ;
                       EQ } }
                   { PUSH bool False } ;
                IF { { DUP ;
                       CAR ;
                       CDR ;
                       PUSH nat 1 ;
                       SWAP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       SUB ;
                       ABS ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string "WrongCondition: (abs(params.t.j - params.f.j)) == 1" ;
                              FAILWITH } } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CDR ;
                       CAR ;
                       IF_NONE { PUSH bool False } { { DROP ; PUSH bool True } } ;
                       IF { { SWAP ;
                              DUP ;
                              DUG 2 ;
                              CDR ;
                              CDR ;
                              CAR ;
                              IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                              CDR ;
                              CAR ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              CDR ;
                              CDR ;
                              CAR ;
                              IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                              CAR ;
                              CAR ;
                              COMPARE ;
                              EQ ;
                              IF { {} }
                                 { { PUSH string
                                          "WrongCondition: self.data.previousPawnMove.open_some().f.i == self.data.previousPawnMove.open_some().t.i" ;
                                     FAILWITH } } ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CDR ;
                              CAR ;
                              CDR ;
                              PUSH int 2 ;
                              MUL ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              CDR ;
                              CDR ;
                              CAR ;
                              IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                              CDR ;
                              CDR ;
                              SUB ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              CDR ;
                              CDR ;
                              CAR ;
                              IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                              CAR ;
                              CDR ;
                              COMPARE ;
                              EQ ;
                              IF { {} }
                                 { { PUSH string
                                          "WrongCondition: self.data.previousPawnMove.open_some().f.j == (self.data.previousPawnMove.open_some().t.j - (2 * self.data.nextPlayer))" ;
                                     FAILWITH } } } }
                          { {} } } }
                   { {} } ;
                SWAP ;
                DUP ;
                DUG 2 ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                CDR ;
                DIG 3 ;
                DUP ;
                DUG 4 ;
                CDR ;
                DIG 4 ;
                DUP ;
                DUG 5 ;
                CAR ;
                PAIR %f %t ;
                SOME ;
                PAIR ;
                SWAP ;
                PAIR ;
                SWAP ;
                PAIR ;
                DUG 2 ;
                SWAP ;
                DROP } }
            { { SWAP ;
                DUP ;
                DUG 2 ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                CDR ;
                NONE (pair (pair %f (int %i) (int %j)) (pair %t (int %i) (int %j))) ;
                PAIR ;
                SWAP ;
                PAIR ;
                SWAP ;
                PAIR ;
                DUG 2 ;
                SWAP ;
                DROP } } ;
         PUSH nat 5 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CDR ;
                PUSH int 0 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                COMPARE ;
                EQ ;
                IF { PUSH bool True }
                   { { DUP ;
                       CAR ;
                       CAR ;
                       PUSH int 0 ;
                       SWAP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       COMPARE ;
                       EQ } } ;
                IF { PUSH bool True }
                   { { DUP ;
                       CAR ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       ABS ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       CDR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       SUB ;
                       ABS ;
                       COMPARE ;
                       EQ } } ;
                IF { {} }
                   { { PUSH string
                            "WrongCondition: (((params.t.j - params.f.j) == 0) | ((params.t.i - params.f.i) == 0)) | ((abs(params.t.j - params.f.j)) == (abs(params.t.i - params.f.i)))" ;
                       FAILWITH } } ;
                DUP ;
                CAR ;
                CDR ;
                PUSH int 1 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                ABS ;
                DUP ;
                DIG 3 ;
                DUP ;
                DUG 4 ;
                CAR ;
                CAR ;
                DIG 4 ;
                DUP ;
                DUG 5 ;
                CDR ;
                CAR ;
                SUB ;
                ABS ;
                DUP ;
                DUG 2 ;
                COMPARE ;
                LE ;
                IF { DROP } { { SWAP ; DROP } } ;
                INT ;
                SUB ;
                PUSH int 1 ;
                DUP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                COMPARE ;
                GT ;
                LOOP { PUSH int 0 ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:70" ; FAILWITH } } {} ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CDR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:70" ; FAILWITH } } {} ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string
                                   "WrongCondition: self.data.deck[params.f.i + (k * (sp.sign(params.t.i - params.f.i)))][params.f.j + (k * (sp.sign(params.t.j - params.f.j)))] == 0" ;
                              FAILWITH } } ;
                       PUSH int 1 ;
                       ADD ;
                       DUP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       COMPARE ;
                       GT } ;
                DROP ;
                DROP } }
            { {} } ;
         PUSH nat 6 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CDR ;
                PUSH nat 1 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                ABS ;
                COMPARE ;
                LE ;
                IF { { DUP ;
                       CAR ;
                       CAR ;
                       PUSH nat 1 ;
                       SWAP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       ABS ;
                       COMPARE ;
                       LE } }
                   { PUSH bool False } ;
                IF { {} }
                   { { PUSH string
                            "WrongCondition: ((abs(params.t.j - params.f.j)) <= 1) & ((abs(params.t.i - params.f.i)) <= 1)" ;
                       FAILWITH } } ;
                SWAP ;
                DUP ;
                DUG 2 ;
                CDR ;
                CAR ;
                CDR ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                DIG 7 ;
                DUP ;
                DUG 8 ;
                CDR ;
                CAR ;
                CDR ;
                DUP ;
                DUG 2 ;
                GET ;
                IF_NONE { { PUSH string "set_in_top-any" ; FAILWITH } } {} ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                CAR ;
                PUSH bool True ;
                SWAP ;
                PAIR ;
                SWAP ;
                PAIR ;
                SOME ;
                SWAP ;
                UPDATE ;
                PAIR ;
                PAIR ;
                SWAP ;
                PAIR ;
                DUG 3 ;
                DIG 2 ;
                DROP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                DIG 7 ;
                DUP ;
                DUG 8 ;
                CDR ;
                CAR ;
                CDR ;
                DUP ;
                DUG 2 ;
                GET ;
                IF_NONE { { PUSH string "set_in_top-any" ; FAILWITH } } {} ;
                CDR ;
                DIG 7 ;
                DUP ;
                DUG 8 ;
                CDR ;
                CAR ;
                PAIR ;
                SOME ;
                SWAP ;
                UPDATE ;
                PAIR ;
                PAIR ;
                SWAP ;
                PAIR ;
                DUG 3 ;
                DIG 2 ;
                DROP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                CDR ;
                SWAP ;
                CAR ;
                DUP ;
                DIG 7 ;
                DUP ;
                DUG 8 ;
                CDR ;
                CAR ;
                CDR ;
                DUP ;
                DUG 2 ;
                GET ;
                IF_NONE { { PUSH string "set_in_top-any" ; FAILWITH } } {} ;
                DUP ;
                CAR ;
                SWAP ;
                CDR ;
                CDR ;
                DIG 8 ;
                DUP ;
                DUG 9 ;
                CDR ;
                CDR ;
                PAIR ;
                SWAP ;
                PAIR ;
                SOME ;
                SWAP ;
                UPDATE ;
                PAIR ;
                PAIR ;
                SWAP ;
                PAIR ;
                DUG 3 ;
                DROP ;
                SWAP ;
                DROP } }
            { {} } ;
         PUSH nat 2 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CDR ;
                PUSH int 0 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                COMPARE ;
                EQ ;
                IF { PUSH bool True }
                   { { DUP ;
                       CAR ;
                       CAR ;
                       PUSH int 0 ;
                       SWAP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       COMPARE ;
                       EQ } } ;
                IF { {} }
                   { { PUSH string
                            "WrongCondition: ((params.t.j - params.f.j) == 0) | ((params.t.i - params.f.i) == 0)" ;
                       FAILWITH } } ;
                DUP ;
                CAR ;
                CDR ;
                PUSH int 1 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                ABS ;
                DUP ;
                DIG 3 ;
                DUP ;
                DUG 4 ;
                CAR ;
                CAR ;
                DIG 4 ;
                DUP ;
                DUG 5 ;
                CDR ;
                CAR ;
                SUB ;
                ABS ;
                DUP ;
                DUG 2 ;
                COMPARE ;
                LE ;
                IF { DROP } { { SWAP ; DROP } } ;
                INT ;
                SUB ;
                PUSH int 1 ;
                DUP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                COMPARE ;
                GT ;
                LOOP { PUSH int 0 ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:82" ; FAILWITH } } {} ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CDR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:82" ; FAILWITH } } {} ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string
                                   "WrongCondition: self.data.deck[params.f.i + (k * (sp.sign(params.t.i - params.f.i)))][params.f.j + (k * (sp.sign(params.t.j - params.f.j)))] == 0" ;
                              FAILWITH } } ;
                       PUSH int 1 ;
                       ADD ;
                       DUP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       COMPARE ;
                       GT } ;
                DROP ;
                DROP } }
            { {} } ;
         PUSH nat 4 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CAR ;
                SWAP ;
                DUP ;
                DUG 2 ;
                CDR ;
                CAR ;
                SUB ;
                ABS ;
                SWAP ;
                DUP ;
                DUG 2 ;
                CAR ;
                CDR ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                ABS ;
                COMPARE ;
                EQ ;
                IF { {} }
                   { { PUSH string
                            "WrongCondition: (abs(params.t.j - params.f.j)) == (abs(params.t.i - params.f.i))" ;
                       FAILWITH } } ;
                DUP ;
                CAR ;
                CDR ;
                PUSH int 1 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CDR ;
                SUB ;
                ABS ;
                DUP ;
                DIG 3 ;
                DUP ;
                DUG 4 ;
                CAR ;
                CAR ;
                DIG 4 ;
                DUP ;
                DUG 5 ;
                CDR ;
                CAR ;
                SUB ;
                ABS ;
                DUP ;
                DUG 2 ;
                COMPARE ;
                LE ;
                IF { DROP } { { SWAP ; DROP } } ;
                INT ;
                SUB ;
                PUSH int 1 ;
                DUP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                COMPARE ;
                GT ;
                LOOP { PUSH int 0 ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CAR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CAR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:88" ; FAILWITH } } {} ;
                       PUSH int 0 ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CDR ;
                       SUB ;
                       COMPARE ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       MUL ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       CAR ;
                       CDR ;
                       ADD ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:88" ; FAILWITH } } {} ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string
                                   "WrongCondition: self.data.deck[params.f.i + (k * (sp.sign(params.t.i - params.f.i)))][params.f.j + (k * (sp.sign(params.t.j - params.f.j)))] == 0" ;
                              FAILWITH } } ;
                       PUSH int 1 ;
                       ADD ;
                       DUP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       COMPARE ;
                       GT } ;
                DROP ;
                DROP } }
            { {} } ;
         PUSH nat 3 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         ABS ;
         COMPARE ;
         EQ ;
         IF { { DUP ;
                CAR ;
                CAR ;
                PUSH nat 2 ;
                SWAP ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CDR ;
                CAR ;
                SUB ;
                DIG 2 ;
                DUP ;
                DUG 3 ;
                CAR ;
                CDR ;
                DIG 3 ;
                DUP ;
                DUG 4 ;
                CDR ;
                CDR ;
                SUB ;
                MUL ;
                ABS ;
                COMPARE ;
                EQ ;
                IF { {} }
                   { { PUSH string
                            "WrongCondition: (abs((params.t.j - params.f.j) * (params.t.i - params.f.i))) == 2" ;
                       FAILWITH } } } }
            { {} } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CDR ;
         CAR ;
         DUP ;
         DUG 2 ;
         GET ;
         IF_NONE { { PUSH string "set_in_top-any" ; FAILWITH } } {} ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CAR ;
         CDR ;
         CAR ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CAR ;
         CAR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:45" ; FAILWITH } } {} ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { { PUSH string "Get-item:46" ; FAILWITH } } {} ;
         SOME ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CDR ;
         CDR ;
         UPDATE ;
         SOME ;
         SWAP ;
         UPDATE ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUG 2 ;
         SWAP ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CAR ;
         CAR ;
         DUP ;
         DUG 2 ;
         GET ;
         IF_NONE { { PUSH string "set_in_top-any" ; FAILWITH } } {} ;
         PUSH (option int) (Some 0) ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CAR ;
         CDR ;
         UPDATE ;
         SOME ;
         SWAP ;
         UPDATE ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUG 2 ;
         SWAP ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         CAR ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         CAR ;
         CDR ;
         NEG ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUG 2 ;
         DROP ;
         DROP ;
         NIL operation ;
         PAIR } }
