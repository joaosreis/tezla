{ storage
    (pair (pair (bool %claimed) (map %deck int int))
          (pair (int %nextPlayer) (pair (int %size) (int %winner)))) ;
  parameter (or (int %claim) (pair %remove (int %cell) (int %k))) ;
  code { UNPAIR ;
         IF_LEFT
           { PUSH int 0 ;
             DUP ;
             DUP 4 ;
             CAR ;
             CDR ;
             ITER { CDR ; ADD } ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: sp.sum(self.data.deck.values()) == 0" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             IF { PUSH string "WrongCondition: ~ self.data.claimed" ; FAILWITH } {} ;
             SWAP ;
             UNPAIR ;
             CDR ;
             PUSH bool True ;
             PAIR ;
             PAIR ;
             DUP ;
             DUG 2 ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             CAR ;
             DIG 4 ;
             GET 3 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DUP ;
             DUG 2 ;
             GET 6 ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: params.winner == self.data.winner" ; FAILWITH } }
           { DUP ;
             CAR ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF {} { PUSH string "WrongCondition: params.cell >= 0" ; FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 5 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             COMPARE ;
             LT ;
             IF {}
                { PUSH string "WrongCondition: params.cell < self.data.size" ; FAILWITH } ;
             DUP ;
             CDR ;
             PUSH int 1 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF {} { PUSH string "WrongCondition: params.k >= 1" ; FAILWITH } ;
             DUP ;
             CDR ;
             PUSH int 2 ;
             SWAP ;
             COMPARE ;
             LE ;
             IF {} { PUSH string "WrongCondition: params.k <= 2" ; FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 199 ; FAILWITH } {} ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             COMPARE ;
             LE ;
             IF {}
                { PUSH string "WrongCondition: params.k <= self.data.deck[params.cell]" ;
                  FAILWITH } ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DUP 5 ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 199 ; FAILWITH } {} ;
             DIG 5 ;
             CDR ;
             SWAP ;
             SUB ;
             SOME ;
             SWAP ;
             UPDATE ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             UNPAIR ;
             SWAP ;
             CDR ;
             DIG 2 ;
             GET 3 ;
             PUSH int 3 ;
             SUB ;
             PAIR ;
             SWAP ;
             PAIR } ;
         NIL operation ;
         PAIR } }
