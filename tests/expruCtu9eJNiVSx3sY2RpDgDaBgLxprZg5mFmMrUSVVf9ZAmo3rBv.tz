{ storage
    (pair (pair (pair (set %LPMembers address)
                      (pair (address %administrator)
                            (big_map %balances
                               address
                               (pair (nat %balance) (pair (map %dividends nat nat) (string %role))))))
                (pair (pair (set %investors address) (int %lastNavDate))
                      (pair (int %lastYear) (big_map %nav nat nat))))
          (pair (pair (set %roles string) (pair (int %totalIncome) (int %totalInvDiv)))
                (pair (pair (int %totalInvested) (int %totalLPDiv))
                      (pair (int %totalSupply) (address %xxiAddress))))) ;
  parameter
    (or (pair %addUser (address %address) (string %role)) (address %setAdministrator)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { { SWAP ;
               DUP ;
               DUG 2 ;
               CAR ;
               CAR ;
               CDR ;
               CAR ;
               SENDER ;
               COMPARE ;
               EQ ;
               IF { {} }
                  { { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                      FAILWITH } } ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CAR ;
               CAR ;
               CDR ;
               CDR ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CAR ;
               MEM ;
               IF { { PUSH string "WrongCondition: ~ (self.data.balances.contains(params.address))" ;
                      FAILWITH } }
                  { {} } ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               CAR ;
               CAR ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               MEM ;
               IF { {} }
                  { { PUSH string "WrongCondition: self.data.roles.contains(params.role)" ;
                      FAILWITH } } ;
               SWAP ;
               DUP ;
               DUG 2 ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DIG 5 ;
               DUP ;
               DUG 6 ;
               CDR ;
               PUSH (map nat nat) {} ;
               PAIR %dividends %role ;
               PUSH nat 0 ;
               PAIR %balance ;
               SOME ;
               DIG 6 ;
               DUP ;
               DUG 7 ;
               CAR ;
               UPDATE ;
               SWAP ;
               PAIR ;
               SWAP ;
               PAIR ;
               PAIR ;
               PAIR ;
               DUG 2 ;
               SWAP ;
               DROP ;
               DUP ;
               CDR ;
               PUSH string "INVESTOR" ;
               COMPARE ;
               EQ ;
               IF { { SWAP ;
                      DUP ;
                      DUG 2 ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      PUSH bool True ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      CAR ;
                      UPDATE ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DUG 2 ;
                      SWAP ;
                      DROP } }
                  { { SWAP ;
                      DUP ;
                      DUG 2 ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      CAR ;
                      PUSH bool True ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CAR ;
                      UPDATE ;
                      PAIR ;
                      PAIR ;
                      PAIR ;
                      DUG 2 ;
                      SWAP ;
                      DROP } } ;
               DROP } }
           { { SWAP ;
               DUP ;
               DUG 2 ;
               CAR ;
               CAR ;
               CDR ;
               CAR ;
               SENDER ;
               COMPARE ;
               EQ ;
               IF { {} }
                  { { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                      FAILWITH } } ;
               SWAP ;
               DUP ;
               DUG 2 ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CDR ;
               DIG 4 ;
               DUP ;
               DUG 5 ;
               PAIR ;
               SWAP ;
               PAIR ;
               PAIR ;
               PAIR ;
               DUG 2 ;
               DROP 2 } } ;
         NIL operation ;
         PAIR } }
