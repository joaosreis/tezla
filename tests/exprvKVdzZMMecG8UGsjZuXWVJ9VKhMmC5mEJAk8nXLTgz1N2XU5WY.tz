{ parameter
    (or (or (pair %cancel (map key_hash signature) (pair chain_id (pair nat nat)))
            (nat %execute))
        (or (pair %rotate (map key_hash signature) (pair chain_id (pair nat (pair nat (list key)))))
            (pair %submit
               (map key_hash signature)
               (pair chain_id (pair nat (lambda unit (list operation))))))) ;
  storage
    (pair (pair (nat %operationId) (list %signers key))
          (pair (nat %threshold)
                (pair (big_map %timelock nat (pair timestamp (lambda unit (list operation))))
                      (nat %timelockSeconds)))) ;
  code { { { DUP ; CAR ; DIP { CDR } } } ;
         IF_LEFT
           { IF_LEFT
               { DUP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 CHAIN_ID ;
                 PACK ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 PACK ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_CHAIN_ID" ; FAILWITH } ;
                 PUSH nat 1 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CAR ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_OP_ID" ; FAILWITH } ;
                 PUSH nat 0 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CDR ;
                 ITER { { DIP 6 { DUP } ; DIG 7 } ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        HASH_KEY ;
                        MEM ;
                        IF { { DIP 7 { DUP } ; DIG 8 } ;
                             PACK ;
                             { DIP 7 { DUP } ; DIG 8 } ;
                             { DIP 2 { DUP } ; DIG 3 } ;
                             HASH_KEY ;
                             GET ;
                             { IF_NONE { PUSH int 196 ; FAILWITH } {} } ;
                             DIG 2 ;
                             CHECK_SIGNATURE ;
                             IF {} { PUSH string "BAD_SIGNATURE" ; FAILWITH } ;
                             PUSH nat 1 ;
                             ADD }
                           { DROP } } ;
                 SWAP ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 GET 3 ;
                 SWAP ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "TOO_FEW_SIGS" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 PUSH nat 1 ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 NONE (pair timestamp (lambda unit (list operation))) ;
                 DIG 5 ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 NIL operation }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 { IF_NONE { PUSH int 214 ; FAILWITH } {} } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 NOW ;
                 SWAP ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 GET 6 ;
                 INT ;
                 ADD ;
                 COMPARE ;
                 LT ;
                 IF {} { PUSH string "TOO_EARLY" ; FAILWITH } ;
                 DIG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 NONE (pair timestamp (lambda unit (list operation))) ;
                 DIG 6 ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 NIL operation ;
                 SWAP ;
                 UNIT ;
                 EXEC ;
                 ITER { CONS } } }
           { IF_LEFT
               { DUP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 CHAIN_ID ;
                 PACK ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 PACK ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_CHAIN_ID" ; FAILWITH } ;
                 PUSH nat 1 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CAR ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_OP_ID" ; FAILWITH } ;
                 PUSH nat 0 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CDR ;
                 ITER { { DIP 6 { DUP } ; DIG 7 } ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        HASH_KEY ;
                        MEM ;
                        IF { { DIP 7 { DUP } ; DIG 8 } ;
                             PACK ;
                             { DIP 7 { DUP } ; DIG 8 } ;
                             { DIP 2 { DUP } ; DIG 3 } ;
                             HASH_KEY ;
                             GET ;
                             { IF_NONE { PUSH int 157 ; FAILWITH } {} } ;
                             DIG 2 ;
                             CHECK_SIGNATURE ;
                             IF {} { PUSH string "BAD_SIGNATURE" ; FAILWITH } ;
                             PUSH nat 1 ;
                             ADD }
                           { DROP } } ;
                 SWAP ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 GET 3 ;
                 SWAP ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "TOO_FEW_SIGS" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 PUSH nat 1 ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 DIG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 CDR ;
                 DIG 2 ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 DIG 2 ;
                 SWAP ;
                 PAIR ;
                 PAIR }
               { DUP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 CHAIN_ID ;
                 PACK ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 PACK ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_CHAIN_ID" ; FAILWITH } ;
                 PUSH nat 1 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CAR ;
                 ADD ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "BAD_OP_ID" ; FAILWITH } ;
                 PUSH nat 0 ;
                 { DIP 8 { DUP } ; DIG 9 } ;
                 CAR ;
                 CDR ;
                 ITER { { DIP 6 { DUP } ; DIG 7 } ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        HASH_KEY ;
                        MEM ;
                        IF { { DIP 7 { DUP } ; DIG 8 } ;
                             PACK ;
                             { DIP 7 { DUP } ; DIG 8 } ;
                             { DIP 2 { DUP } ; DIG 3 } ;
                             HASH_KEY ;
                             GET ;
                             { IF_NONE { PUSH int 120 ; FAILWITH } {} } ;
                             DIG 2 ;
                             CHECK_SIGNATURE ;
                             IF {} { PUSH string "BAD_SIGNATURE" ; FAILWITH } ;
                             PUSH nat 1 ;
                             ADD }
                           { DROP } } ;
                 SWAP ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 GET 3 ;
                 SWAP ;
                 COMPARE ;
                 GE ;
                 IF {} { PUSH string "TOO_FEW_SIGS" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 PUSH nat 1 ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 DUG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 DIG 4 ;
                 NOW ;
                 PAIR ;
                 SOME ;
                 DIG 5 ;
                 CAR ;
                 CAR ;
                 UPDATE ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR } ;
             NIL operation } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
