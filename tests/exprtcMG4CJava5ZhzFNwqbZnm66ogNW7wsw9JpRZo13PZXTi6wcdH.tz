{ parameter
    (or (or (pair %buy_tickets
               (nat %ticket_amount)
               (pair (address %ticket_owner) (string %ticket_type)))
            (pair %get_balance
               address
               (pair string
                     (contract
                        (pair (nat %ticket_amount) (pair (address %ticket_owner) (string %ticket_type)))))))
        (string %redeem_ticket)) ;
  storage
    (pair (pair %data (int %ticket_validity) (big_map %valid_ticket_types string mutez))
          (big_map %tickets (pair address string) (pair timestamp (ticket string)))) ;
  code { UNPAIR ;
         SWAP ;
         UNPAIR ;
         DIG 2 ;
         IF_LEFT
           { IF_LEFT
               { UNPAIR 3 ;
                 SWAP ;
                 DROP ;
                 PUSH nat 1 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { DROP 4 ; PUSH string "INVALID_TICKET_AMOUNT" ; FAILWITH }
                    { DUP 3 ;
                      CDR ;
                      DUP 3 ;
                      GET ;
                      IF_NONE { PUSH string "INVALID_TICKET_TYPE" ; FAILWITH } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      MUL ;
                      AMOUNT ;
                      COMPARE ;
                      NEQ ;
                      PUSH mutez 0 ;
                      AMOUNT ;
                      COMPARE ;
                      EQ ;
                      OR ;
                      IF { DROP 4 ; PUSH string "INVALID_AMOUNT" ; FAILWITH }
                         { DIG 3 ;
                           NONE (pair timestamp (ticket string)) ;
                           DUP 4 ;
                           SENDER ;
                           PAIR ;
                           GET_AND_UPDATE ;
                           IF_NONE
                             { SWAP ; DUP 3 ; TICKET }
                             { DIG 2 ;
                               DUP 4 ;
                               TICKET ;
                               SWAP ;
                               CDR ;
                               PAIR ;
                               JOIN_TICKETS ;
                               IF_NONE { PUSH string "UNJOINABLE_TICKETS" ; FAILWITH } {} } ;
                           NOW ;
                           PAIR ;
                           SOME ;
                           DIG 2 ;
                           SENDER ;
                           PAIR ;
                           GET_AND_UPDATE ;
                           DROP ;
                           SWAP ;
                           PAIR } } ;
                 NIL operation ;
                 PAIR }
               { UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 DIG 4 ;
                 NONE (pair timestamp (ticket string)) ;
                 DUP 3 ;
                 DUP 6 ;
                 PAIR ;
                 GET_AND_UPDATE ;
                 IF_NONE
                   { NONE (pair timestamp (ticket string)) ; PUSH nat 0 ; PAIR }
                   { UNPAIR ;
                     SWAP ;
                     READ_TICKET ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DIG 2 ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     PAIR } ;
                 UNPAIR ;
                 DUG 2 ;
                 DUP 4 ;
                 DUP 7 ;
                 PAIR ;
                 GET_AND_UPDATE ;
                 DROP ;
                 DIG 5 ;
                 PAIR ;
                 NIL operation ;
                 DIG 4 ;
                 PUSH mutez 0 ;
                 DIG 5 ;
                 DIG 6 ;
                 PAIR ;
                 DIG 5 ;
                 PAIR ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 PAIR } }
           { DUG 2 ;
             SWAP ;
             NONE (pair timestamp (ticket string)) ;
             DUP 4 ;
             SENDER ;
             PAIR ;
             GET_AND_UPDATE ;
             IF_NONE
               { DROP ; SWAP ; DROP ; PUSH string "NO_TICKETS" ; FAILWITH }
               { UNPAIR ;
                 NOW ;
                 DUP 5 ;
                 CAR ;
                 DUP 3 ;
                 ADD ;
                 COMPARE ;
                 LT ;
                 IF { DROP 3 ; SWAP ; DROP ; PUSH string "INVALID_TICKETS" ; FAILWITH }
                    { SWAP ;
                      READ_TICKET ;
                      CDR ;
                      CDR ;
                      PUSH nat 0 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      COMPARE ;
                      EQ ;
                      IF { DROP 4 ; SWAP ; DROP ; PUSH string "ZERO_AMOUNT_TICKET" ; FAILWITH }
                         { PUSH nat 1 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           COMPARE ;
                           EQ ;
                           IF { DROP 3 ; DIG 2 ; DROP }
                              { PUSH nat 1 ;
                                PUSH nat 1 ;
                                DIG 2 ;
                                SUB ;
                                ABS ;
                                PAIR ;
                                SWAP ;
                                SPLIT_TICKET ;
                                IF_NONE
                                  { DROP 2 ; SWAP ; DROP ; PUSH string "UNSPLITTABLE_TICKET" ; FAILWITH }
                                  { DIG 2 ;
                                    SWAP ;
                                    CAR ;
                                    DIG 2 ;
                                    PAIR ;
                                    SOME ;
                                    DIG 3 ;
                                    SENDER ;
                                    PAIR ;
                                    GET_AND_UPDATE ;
                                    DROP } } } } } ;
             SWAP ;
             PAIR ;
             NIL operation ;
             PAIR } } }
