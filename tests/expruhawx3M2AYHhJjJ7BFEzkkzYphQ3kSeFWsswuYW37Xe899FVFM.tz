{ parameter string ;
  storage
    (pair (pair (list %Help string) (string %formula))
          (pair (list %operations string) (pair (int %result) (string %summary)))) ;
  code { LAMBDA
           string
           int
           { PUSH int 0 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SIZE ;
             PUSH nat 0 ;
             DUP ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             GT ;
             LOOP { DIG 2 ;
                    PUSH (map string int)
                         { Elt "0" 0 ;
                           Elt "1" 1 ;
                           Elt "2" 2 ;
                           Elt "3" 3 ;
                           Elt "4" 4 ;
                           Elt "5" 5 ;
                           Elt "6" 6 ;
                           Elt "7" 7 ;
                           Elt "8" 8 ;
                           Elt "9" 9 } ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    PUSH nat 1 ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    SLICE ;
                    { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                    GET ;
                    { IF_NONE { PUSH string "Get-item:18" ; FAILWITH } {} } ;
                    SWAP ;
                    DUP ;
                    DUG 2 ;
                    PUSH int 10 ;
                    MUL ;
                    ADD ;
                    SWAP ;
                    DROP ;
                    DUG 2 ;
                    PUSH nat 1 ;
                    ADD ;
                    DUP ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    COMPARE ;
                    GT } ;
             DROP 2 ;
             SWAP ;
             DROP } ;
         SWAP ;
         LAMBDA
           nat
           string
           { DUP ;
             PUSH (list string) {} ;
             PUSH nat 0 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             EQ ;
             IF { DUP ; PUSH string "0" ; CONS ; SWAP ; DROP } {} ;
             PUSH nat 0 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             GT ;
             LOOP { DUP ;
                    PUSH (map nat string)
                         { Elt 0 "0" ;
                           Elt 1 "1" ;
                           Elt 2 "2" ;
                           Elt 3 "3" ;
                           Elt 4 "4" ;
                           Elt 5 "5" ;
                           Elt 6 "6" ;
                           Elt 7 "7" ;
                           Elt 8 "8" ;
                           Elt 9 "9" } ;
                    PUSH nat 10 ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    EDIV ;
                    { IF_NONE { PUSH string "division by zero" ; FAILWITH } { CDR } } ;
                    GET ;
                    { IF_NONE { PUSH string "Get-item:29" ; FAILWITH } {} } ;
                    CONS ;
                    SWAP ;
                    DROP ;
                    SWAP ;
                    DUP ;
                    PUSH nat 10 ;
                    SWAP ;
                    EDIV ;
                    { IF_NONE { PUSH string "division by zero" ; FAILWITH } { CAR } } ;
                    SWAP ;
                    DROP ;
                    SWAP ;
                    PUSH nat 0 ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    COMPARE ;
                    GT } ;
             DUP ;
             CONCAT ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         SWAP ;
         LAMBDA
           (pair (string %s) (string %sep))
           (list string)
           { PUSH nat 0 ;
             PUSH (list string) {} ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             SIZE ;
             PUSH nat 0 ;
             DUP ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             GT ;
             LOOP { DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    CDR ;
                    DIG 5 ;
                    DUP ;
                    DUG 6 ;
                    CAR ;
                    PUSH nat 1 ;
                    DIG 3 ;
                    DUP ;
                    DUG 4 ;
                    SLICE ;
                    { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                    COMPARE ;
                    EQ ;
                    IF { DIG 2 ;
                         DUP ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         CAR ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         SUB ;
                         ISNAT ;
                         { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SLICE ;
                         { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                         CONS ;
                         SWAP ;
                         DROP ;
                         DUG 2 ;
                         DIG 3 ;
                         PUSH nat 1 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         ADD ;
                         SWAP ;
                         DROP ;
                         DUG 3 }
                       {} ;
                    PUSH nat 1 ;
                    ADD ;
                    DUP ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    COMPARE ;
                    GT } ;
             DROP 2 ;
             PUSH nat 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             SIZE ;
             COMPARE ;
             GT ;
             IF { DUP ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  CAR ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  CAR ;
                  SIZE ;
                  SUB ;
                  ISNAT ;
                  { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  SLICE ;
                  { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                  CONS ;
                  SWAP ;
                  DROP }
                {} ;
             DUP ;
             NIL string ;
             SWAP ;
             ITER { CONS } ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP ;
             SWAP ;
             DROP } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         PUSH (map string (lambda (pair int int) int)) {} ;
         LAMBDA
           (pair int int)
           int
           { DUP ; CDR ; SWAP ; DUP ; DUG 2 ; CAR ; ADD ; SWAP ; DROP } ;
         SOME ;
         PUSH string "+" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { DUP ; CDR ; SWAP ; DUP ; DUG 2 ; CAR ; MUL ; SWAP ; DROP } ;
         SOME ;
         PUSH string "*" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { DUP ; CAR ; SWAP ; DUP ; DUG 2 ; CDR ; SUB ; SWAP ; DROP } ;
         SOME ;
         PUSH string "-" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { PUSH int 1 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             PUSH int 0 ;
             DUP ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             GT ;
             LOOP { DIG 2 ;
                    DIG 3 ;
                    DUP ;
                    DUG 4 ;
                    CDR ;
                    SWAP ;
                    DUP ;
                    DUG 2 ;
                    MUL ;
                    SWAP ;
                    DROP ;
                    DUG 2 ;
                    PUSH int 1 ;
                    ADD ;
                    DUP ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    COMPARE ;
                    GT } ;
             DROP 2 ;
             SWAP ;
             DROP } ;
         SOME ;
         PUSH string "^" ;
         UPDATE ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         PUSH string " " ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         PAIR %s %sep ;
         EXEC ;
         PUSH (list int) {} ;
         PUSH (list string) {} ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         ITER { DUP ;
                PUSH string "" ;
                COMPARE ;
                NEQ ;
                IF { DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     IF { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          IF_CONS
                            { SWAP ;
                              DUP ;
                              DUG 2 ;
                              IF_CONS
                                { DIG 6 ;
                                  DIG 2 ;
                                  DUP ;
                                  DUG 3 ;
                                  SWAP ;
                                  DROP ;
                                  DUG 6 ;
                                  DIG 6 ;
                                  DUP ;
                                  DIG 9 ;
                                  DUP ;
                                  DUG 10 ;
                                  DIG 7 ;
                                  DUP ;
                                  DUG 8 ;
                                  GET ;
                                  { IF_NONE { PUSH string "Get-item:64" ; FAILWITH } {} } ;
                                  DIG 3 ;
                                  DUP ;
                                  DUG 4 ;
                                  DIG 6 ;
                                  DUP ;
                                  DUG 7 ;
                                  PAIR ;
                                  EXEC ;
                                  CONS ;
                                  SWAP ;
                                  DROP ;
                                  DUG 6 ;
                                  DROP 2 }
                                { PUSH string "Bad formula: too many operators" ; FAILWITH } ;
                              DROP 2 }
                            { PUSH string "Bad formula: too many operators" ; FAILWITH } ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          IF_CONS
                            { SWAP ;
                              DUP ;
                              DUG 2 ;
                              IF_CONS
                                { DIG 5 ;
                                  DIG 2 ;
                                  DUP ;
                                  DUG 3 ;
                                  SWAP ;
                                  DROP ;
                                  DUG 5 ;
                                  DIG 5 ;
                                  DUP ;
                                  PUSH (list string) { ")" } ;
                                  DIG 5 ;
                                  DUP ;
                                  DUG 6 ;
                                  CONS ;
                                  DIG 7 ;
                                  DUP ;
                                  DUG 8 ;
                                  CONS ;
                                  DIG 3 ;
                                  DUP ;
                                  DUG 4 ;
                                  CONS ;
                                  PUSH string "(" ;
                                  CONS ;
                                  CONCAT ;
                                  CONS ;
                                  SWAP ;
                                  DROP ;
                                  DUG 5 ;
                                  DROP 2 }
                                {} ;
                              DROP 2 }
                            {} }
                        { DIG 2 ;
                          DUP ;
                          DIG 10 ;
                          DUP ;
                          DUG 11 ;
                          DIG 3 ;
                          DUP ;
                          DUG 4 ;
                          EXEC ;
                          CONS ;
                          SWAP ;
                          DROP ;
                          DUG 2 ;
                          SWAP ;
                          DUP ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          CONS ;
                          SWAP ;
                          DROP ;
                          SWAP } }
                   {} ;
                DROP } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DUP ;
         CDR ;
         SWAP ;
         { CAR ; CAR } ;
         DIG 6 ;
         DUP ;
         DUG 7 ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUG 6 ;
         DIG 5 ;
         DROP ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DUP ;
         CAR ;
         SWAP ;
         { CDR ; CDR } ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUG 6 ;
         DIG 5 ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SIZE ;
         DUP ;
         PUSH nat 1 ;
         COMPARE ;
         EQ ;
         IF {}
            { DIG 2 ;
              DUP ;
              DUG 3 ;
              DIG 9 ;
              DUP ;
              DUG 10 ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              EXEC ;
              PUSH string "Bad stack at the end of the computation. Length = " ;
              CONCAT ;
              PAIR ;
              FAILWITH } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         IF_CONS
           { DIG 3 ;
             DUP ;
             DUG 4 ;
             IF_CONS
               { DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 { CDR ; CDR } ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DUG 11 ;
                 DIG 10 ;
                 DROP ;
                 PUSH int 0 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 COMPARE ;
                 GE ;
                 IF { DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CAR } ;
                      DIG 15 ;
                      DUP ;
                      DUG 16 ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      ISNAT ;
                      { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                      EXEC ;
                      PUSH string " = " ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CONCAT ;
                      CONCAT ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUG 11 ;
                      DIG 10 ;
                      DROP }
                    { DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      { CDR ; CAR } ;
                      DIG 15 ;
                      DUP ;
                      DUG 16 ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      NEG ;
                      ISNAT ;
                      { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ;
                      EXEC ;
                      PUSH string " = -" ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CONCAT ;
                      CONCAT ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUG 11 ;
                      DIG 10 ;
                      DROP } ;
                 DROP 2 }
               {} ;
             DROP 2 }
           {} ;
         DROP 6 ;
         NIL operation ;
         PAIR ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP } }
