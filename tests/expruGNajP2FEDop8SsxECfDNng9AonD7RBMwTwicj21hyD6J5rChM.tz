{ storage
    (pair (pair (map %exchange_states int string)
                (pair (map %exchange_types string nat)
                      (map %exchanges
                         string
                         (pair (pair (address %buyer) (pair (string %domain_name) (string %exchange_type)))
                               (pair (pair (timestamp %lastUpdate) (address %seller))
                                     (pair (string %state)
                                           (pair %total_escrow
                                              (pair (mutez %asked_price) (mutez %commission))
                                              (pair (mutez %escrow) (pair (mutez %shipping) (mutez %slashing))))))))))
          (pair (address %owner)
                (pair (pair %permit_data
                         (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry)))
                         (pair (map %permit_expiries (pair address bytes) (option nat))
                               (pair (map %permits (pair address bytes) timestamp)
                                     (map %user_expiries address (option nat)))))
                      (nat %slashing_rate)))) ;
  parameter
    (or (or (or (pair %addNewExchange
                   (pair (address %buyer) (pair (string %domain_name) (string %exchange_type)))
                   (pair (pair (string %id) (mutez %price)) (pair (address %seller) (mutez %shipping))))
                (address %changeOwner))
            (or (pair %getCounter unit (contract nat))
                (or (pair %getDefaultExpiry unit (contract nat))
                    (pair %getMaxExpiry unit (contract nat)))))
        (or (or (list %permit (pair key (pair signature bytes)))
                (pair %setExpiry address (pair nat (option bytes))))
            (or (pair %updateExchangeType (string %escrow_type) (nat %commission))
                (or (string %validateExchange) (string %validateSellerTransmission))))) ;
  code { LAMBDA
           (pair (pair (pair address (pair string string)) (pair (pair string mutez) (pair address mutez)))
                 (pair (pair (map int string)
                             (pair (map string nat)
                                   (map string
                                        (pair (pair address (pair string string))
                                              (pair (pair timestamp address)
                                                    (pair string (pair (pair mutez mutez) (pair mutez (pair mutez mutez)))))))))
                       (pair address
                             (pair (pair (pair nat (pair nat nat))
                                         (pair (map (pair address bytes) (option nat))
                                               (pair (map (pair address bytes) timestamp) (map address (option nat)))))
                                   nat))))
           (pair (list operation)
                 (pair bool
                       (pair (pair (map int string)
                                   (pair (map string nat)
                                         (map string
                                              (pair (pair address (pair string string))
                                                    (pair (pair timestamp address)
                                                          (pair string (pair (pair mutez mutez) (pair mutez (pair mutez mutez)))))))))
                             (pair address
                                   (pair (pair (pair nat (pair nat nat))
                                               (pair (map (pair address bytes) (option nat))
                                                     (pair (map (pair address bytes) timestamp) (map address (option nat)))))
                                         nat)))))
           { NIL operation ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP ;
             GET 5 ;
             GET 5 ;
             DUP 4 ;
             CAR ;
             PACK ;
             BLAKE2B ;
             DUP 5 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             MEM ;
             IF { DUP ;
                  GET 5 ;
                  GET 3 ;
                  DUP 4 ;
                  CAR ;
                  PACK ;
                  BLAKE2B ;
                  DUP 5 ;
                  CAR ;
                  CAR ;
                  CAR ;
                  PAIR ;
                  MEM ;
                  IF { DUP ;
                       GET 5 ;
                       GET 3 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       GET ;
                       IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                       IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                     { PUSH bool False } ;
                  IF { DUP ;
                       GET 5 ;
                       GET 3 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       GET ;
                       IF_NONE { PUSH int 69 ; FAILWITH } {} ;
                       IF_NONE { PUSH int 69 ; FAILWITH } {} }
                     { DUP ;
                       GET 5 ;
                       GET 6 ;
                       DUP 4 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       MEM ;
                       IF { DUP ;
                            GET 5 ;
                            GET 6 ;
                            DUP 4 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            GET ;
                            IF_NONE { PUSH int 72 ; FAILWITH } {} ;
                            IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                          { PUSH bool False } ;
                       IF { DUP ;
                            GET 5 ;
                            GET 6 ;
                            DUP 4 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            GET ;
                            IF_NONE { PUSH int 73 ; FAILWITH } {} ;
                            IF_NONE { PUSH int 73 ; FAILWITH } {} }
                          { DUP ; GET 5 ; CAR ; GET 3 } } ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  GET 5 ;
                  GET 5 ;
                  DUP 5 ;
                  CAR ;
                  PACK ;
                  BLAKE2B ;
                  DUP 6 ;
                  CAR ;
                  CAR ;
                  CAR ;
                  PAIR ;
                  GET ;
                  IF_NONE { PUSH int 324 ; FAILWITH } {} ;
                  NOW ;
                  SUB ;
                  ISNAT ;
                  IF_NONE { PUSH int 327 ; FAILWITH } {} ;
                  COMPARE ;
                  GE ;
                  IF { DUP ;
                       GET 5 ;
                       GET 5 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            GET 5 ;
                            DUP ;
                            GET 5 ;
                            NONE timestamp ;
                            DUP 6 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DUP 7 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            UPDATE ;
                            UPDATE 5 ;
                            UPDATE 5 }
                          {} ;
                       DUP ;
                       GET 5 ;
                       GET 3 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            GET 5 ;
                            DUP ;
                            GET 3 ;
                            PUSH (option (option nat)) (Some None) ;
                            DUP 6 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 6 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            UPDATE ;
                            UPDATE 3 ;
                            UPDATE 5 }
                          { DIG 2 ; DROP } ;
                       PUSH bool False }
                     { DUP ;
                       GET 5 ;
                       GET 5 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            GET 5 ;
                            DUP ;
                            GET 5 ;
                            NONE timestamp ;
                            DUP 6 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DUP 7 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            UPDATE ;
                            UPDATE 5 ;
                            UPDATE 5 }
                          {} ;
                       DUP ;
                       GET 5 ;
                       GET 3 ;
                       DUP 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DUP 5 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            GET 5 ;
                            DUP ;
                            GET 3 ;
                            PUSH (option (option nat)) (Some None) ;
                            DUP 6 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 6 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            UPDATE ;
                            UPDATE 3 ;
                            UPDATE 5 }
                          { DIG 2 ; DROP } ;
                       PUSH bool True } }
                { DIG 2 ; DROP ; PUSH bool False } ;
             DIG 2 ;
             PAIR 3 } ;
         SWAP ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 4 ;
                     MEM ;
                     IF {}
                        { DUP ;
                          CAR ;
                          GET 4 ;
                          PUSH string " does not exist" ;
                          SWAP ;
                          PUSH string "The type" ;
                          CONCAT ;
                          CONCAT ;
                          FAILWITH } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     CAR ;
                     MEM ;
                     IF { PUSH string "The exchange for this item already exists" ; FAILWITH } {} ;
                     DUP ;
                     GET 6 ;
                     PUSH nat 100 ;
                     DUP 3 ;
                     GET 3 ;
                     CDR ;
                     DUP 5 ;
                     GET 6 ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH int 189 ; FAILWITH } {} ;
                     CAR ;
                     PUSH nat 100 ;
                     DUP 4 ;
                     GET 3 ;
                     CDR ;
                     DUP 6 ;
                     CAR ;
                     GET 3 ;
                     DUP 6 ;
                     CAR ;
                     GET 4 ;
                     GET ;
                     IF_NONE { PUSH int 287 ; FAILWITH } {} ;
                     MUL ;
                     EDIV ;
                     IF_NONE { PUSH int 189 ; FAILWITH } {} ;
                     CAR ;
                     DUP 4 ;
                     GET 3 ;
                     CDR ;
                     ADD ;
                     ADD ;
                     ADD ;
                     AMOUNT ;
                     COMPARE ;
                     GE ;
                     IF {} { PUSH string "The amount sent is not enough" ; FAILWITH } ;
                     DUP 3 ;
                     DUG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     EXEC ;
                     DUP ;
                     GET 4 ;
                     DUG 2 ;
                     DUP ;
                     CAR ;
                     NIL operation ;
                     SWAP ;
                     ITER { CONS } ;
                     SWAP ;
                     GET 3 ;
                     IF { DIG 3 ;
                          DROP ;
                          DUP 3 ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          PUSH nat 100 ;
                          DUP 7 ;
                          GET 3 ;
                          CDR ;
                          DUP 9 ;
                          GET 6 ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH int 189 ; FAILWITH } {} ;
                          CAR ;
                          DUP 7 ;
                          GET 6 ;
                          PAIR ;
                          AMOUNT ;
                          PAIR ;
                          PUSH nat 100 ;
                          DUP 8 ;
                          GET 3 ;
                          CDR ;
                          DUP 10 ;
                          CAR ;
                          GET 3 ;
                          DUP 10 ;
                          CAR ;
                          GET 4 ;
                          GET ;
                          IF_NONE { PUSH int 287 ; FAILWITH } {} ;
                          MUL ;
                          EDIV ;
                          IF_NONE { PUSH int 189 ; FAILWITH } {} ;
                          CAR ;
                          DUP 8 ;
                          GET 3 ;
                          CDR ;
                          PAIR ;
                          PAIR ;
                          DIG 7 ;
                          CAR ;
                          CAR ;
                          PUSH int 0 ;
                          GET ;
                          IF_NONE { PUSH int 295 ; FAILWITH } {} ;
                          PAIR ;
                          DUP 7 ;
                          GET 5 ;
                          NOW ;
                          PAIR ;
                          PAIR ;
                          DIG 6 ;
                          DUP ;
                          CAR ;
                          GET 4 ;
                          SWAP ;
                          DUP ;
                          DUG 8 ;
                          CAR ;
                          GET 3 ;
                          PAIR ;
                          SENDER ;
                          PAIR ;
                          PAIR ;
                          SOME ;
                          DIG 6 ;
                          GET 3 ;
                          CAR ;
                          UPDATE ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP }
                        { SWAP ; DROP ; DIG 2 ; DROP } }
                   { DIG 2 ;
                     DROP ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string "Only the owner of the contract can designate a new owner" ;
                          FAILWITH } ;
                     UPDATE 3 ;
                     NIL operation } }
               { IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 5 ;
                     CAR ;
                     CAR ;
                     NIL operation ;
                     DIG 2 ;
                     CDR ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 5 ;
                         CAR ;
                         GET 3 ;
                         NIL operation ;
                         DIG 2 ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         TRANSFER_TOKENS ;
                         CONS }
                       { DIG 2 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 5 ;
                         CAR ;
                         GET 4 ;
                         NIL operation ;
                         DIG 2 ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         TRANSFER_TOKENS ;
                         CONS } } } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 IF_LEFT
                   { DUP ;
                     ITER { DUP 3 ;
                            GET 5 ;
                            GET 3 ;
                            SWAP ;
                            DUP ;
                            GET 4 ;
                            SWAP ;
                            DUP ;
                            DUG 3 ;
                            CAR ;
                            HASH_KEY ;
                            IMPLICIT_ACCOUNT ;
                            ADDRESS ;
                            PAIR ;
                            MEM ;
                            IF { DUP 3 ;
                                 GET 5 ;
                                 GET 3 ;
                                 SWAP ;
                                 DUP ;
                                 GET 4 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 3 ;
                                 CAR ;
                                 HASH_KEY ;
                                 IMPLICIT_ACCOUNT ;
                                 ADDRESS ;
                                 PAIR ;
                                 GET ;
                                 IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                                 IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                               { PUSH bool False } ;
                            IF { DUP 3 ;
                                 GET 5 ;
                                 GET 3 ;
                                 SWAP ;
                                 DUP ;
                                 GET 4 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 3 ;
                                 CAR ;
                                 HASH_KEY ;
                                 IMPLICIT_ACCOUNT ;
                                 ADDRESS ;
                                 PAIR ;
                                 GET ;
                                 IF_NONE { PUSH int 69 ; FAILWITH } {} ;
                                 IF_NONE { PUSH int 69 ; FAILWITH } {} }
                               { DUP 3 ;
                                 GET 5 ;
                                 GET 6 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 CAR ;
                                 HASH_KEY ;
                                 IMPLICIT_ACCOUNT ;
                                 ADDRESS ;
                                 MEM ;
                                 IF { DUP 3 ;
                                      GET 5 ;
                                      GET 6 ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CAR ;
                                      HASH_KEY ;
                                      IMPLICIT_ACCOUNT ;
                                      ADDRESS ;
                                      GET ;
                                      IF_NONE { PUSH int 72 ; FAILWITH } {} ;
                                      IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                                    { PUSH bool False } ;
                                 IF { DUP 3 ;
                                      GET 5 ;
                                      GET 6 ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CAR ;
                                      HASH_KEY ;
                                      IMPLICIT_ACCOUNT ;
                                      ADDRESS ;
                                      GET ;
                                      IF_NONE { PUSH int 73 ; FAILWITH } {} ;
                                      IF_NONE { PUSH int 73 ; FAILWITH } {} }
                                    { DUP 3 ; GET 5 ; CAR ; GET 3 } } ;
                            DUP 4 ;
                            GET 5 ;
                            GET 5 ;
                            DIG 2 ;
                            DUP ;
                            GET 4 ;
                            SWAP ;
                            DUP ;
                            DUG 4 ;
                            CAR ;
                            HASH_KEY ;
                            IMPLICIT_ACCOUNT ;
                            ADDRESS ;
                            PAIR ;
                            MEM ;
                            IF { DUP ;
                                 DUP 5 ;
                                 GET 5 ;
                                 GET 5 ;
                                 DIG 3 ;
                                 DUP ;
                                 GET 4 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 5 ;
                                 CAR ;
                                 HASH_KEY ;
                                 IMPLICIT_ACCOUNT ;
                                 ADDRESS ;
                                 PAIR ;
                                 GET ;
                                 IF_NONE { PUSH int 102 ; FAILWITH } {} ;
                                 NOW ;
                                 SUB ;
                                 ISNAT ;
                                 IF_NONE { PUSH int 104 ; FAILWITH } {} ;
                                 COMPARE ;
                                 LT }
                               { PUSH bool False } ;
                            IF { SWAP ; DUP ; DUG 2 ; GET 4 ; PUSH string "DUP_PERMIT" ; PAIR ; FAILWITH }
                               {} ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            GET 4 ;
                            DUP 5 ;
                            GET 5 ;
                            CAR ;
                            CAR ;
                            PAIR ;
                            SELF_ADDRESS ;
                            CHAIN_ID ;
                            PAIR ;
                            PAIR ;
                            PACK ;
                            DIG 2 ;
                            DUP ;
                            GET 3 ;
                            SWAP ;
                            DUP ;
                            DUG 4 ;
                            CAR ;
                            CHECK_SIGNATURE ;
                            IF { DROP }
                               { SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 GET 4 ;
                                 DUP 5 ;
                                 GET 5 ;
                                 CAR ;
                                 CAR ;
                                 PAIR ;
                                 SELF_ADDRESS ;
                                 CHAIN_ID ;
                                 PAIR ;
                                 PAIR ;
                                 PACK ;
                                 PUSH string "MISSIGNED" ;
                                 PAIR ;
                                 FAILWITH } ;
                            DIG 2 ;
                            DUP ;
                            GET 5 ;
                            DUP ;
                            GET 5 ;
                            NOW ;
                            SOME ;
                            DIG 4 ;
                            DUP ;
                            GET 4 ;
                            SWAP ;
                            CAR ;
                            HASH_KEY ;
                            IMPLICIT_ACCOUNT ;
                            ADDRESS ;
                            PAIR ;
                            UPDATE ;
                            UPDATE 5 ;
                            UPDATE 5 ;
                            DUP ;
                            GET 5 ;
                            UNPAIR ;
                            UNPAIR ;
                            PUSH nat 1 ;
                            ADD ;
                            PAIR ;
                            PAIR ;
                            UPDATE 5 ;
                            SWAP } ;
                     DROP }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 5 ;
                     CAR ;
                     GET 4 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     COMPARE ;
                     LE ;
                     IF {} { PUSH string "MAX_SECONDS_EXCEEDED" ; FAILWITH } ;
                     SENDER ;
                     PACK ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PACK ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "USER_UNAUTHORIZED" ; FAILWITH } ;
                     DUP ;
                     GET 4 ;
                     IF_NONE
                       { SWAP ;
                         DUP ;
                         GET 5 ;
                         DUP ;
                         GET 6 ;
                         DUP 4 ;
                         GET 3 ;
                         SOME ;
                         SOME ;
                         DIG 4 ;
                         CAR ;
                         UPDATE ;
                         UPDATE 6 ;
                         UPDATE 5 }
                       { DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 5 ;
                         GET 5 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 4 ;
                         IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                         DUP 3 ;
                         CAR ;
                         PAIR ;
                         MEM ;
                         IF {} { PUSH string "PERMIT_NONEXISTENT" ; FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 5 ;
                         GET 3 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         GET 4 ;
                         IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                         DUP 3 ;
                         CAR ;
                         PAIR ;
                         MEM ;
                         IF { SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 5 ;
                              GET 3 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 4 ;
                              IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                              DUP 3 ;
                              CAR ;
                              PAIR ;
                              GET ;
                              IF_NONE { PUSH int 68 ; FAILWITH } {} ;
                              IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                            { PUSH bool False } ;
                         IF { SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 5 ;
                              GET 3 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 4 ;
                              IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                              DUP 3 ;
                              CAR ;
                              PAIR ;
                              GET ;
                              IF_NONE { PUSH int 69 ; FAILWITH } {} ;
                              IF_NONE { PUSH int 69 ; FAILWITH } {} }
                            { SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 5 ;
                              GET 6 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET 4 ;
                              IF_NONE { PUSH int 120 ; FAILWITH } { DROP } ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CAR ;
                              MEM ;
                              IF { SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   GET 5 ;
                                   GET 6 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   GET 4 ;
                                   IF_NONE { PUSH int 120 ; FAILWITH } { DROP } ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   GET ;
                                   IF_NONE { PUSH int 72 ; FAILWITH } {} ;
                                   IF_NONE { PUSH bool False } { DROP ; PUSH bool True } }
                                 { PUSH bool False } ;
                              IF { SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   GET 5 ;
                                   GET 6 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   GET 4 ;
                                   IF_NONE { PUSH int 120 ; FAILWITH } { DROP } ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   GET ;
                                   IF_NONE { PUSH int 73 ; FAILWITH } {} ;
                                   IF_NONE { PUSH int 73 ; FAILWITH } {} }
                                 { SWAP ; DUP ; DUG 2 ; GET 5 ; CAR ; GET 3 } } ;
                         DUP 3 ;
                         GET 5 ;
                         GET 5 ;
                         DUP 3 ;
                         GET 4 ;
                         IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                         DUP 4 ;
                         CAR ;
                         PAIR ;
                         GET ;
                         IF_NONE { PUSH int 124 ; FAILWITH } {} ;
                         NOW ;
                         SUB ;
                         ISNAT ;
                         IF_NONE { PUSH int 126 ; FAILWITH } {} ;
                         COMPARE ;
                         LT ;
                         IF {} { PUSH string "PERMIT_REVOKED" ; FAILWITH } ;
                         SWAP ;
                         DUP ;
                         GET 5 ;
                         DUP ;
                         GET 3 ;
                         DUP 4 ;
                         GET 3 ;
                         SOME ;
                         SOME ;
                         DUP 5 ;
                         GET 4 ;
                         IF_NONE { PUSH int 120 ; FAILWITH } {} ;
                         DIG 5 ;
                         CAR ;
                         PAIR ;
                         UPDATE ;
                         UPDATE 3 ;
                         UPDATE 5 } } ;
                 NIL operation }
               { IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     COMPARE ;
                     EQ ;
                     IF {}
                        { PUSH string "Only the owner of the contract can update the escrow types" ;
                          FAILWITH } ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     DUP 5 ;
                     CDR ;
                     SOME ;
                     DIG 5 ;
                     CAR ;
                     UPDATE ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     NIL operation }
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         SENDER ;
                         DUP 3 ;
                         GET 3 ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH bool True }
                            { SENDER ;
                              DUP 3 ;
                              CAR ;
                              GET 4 ;
                              DUP 3 ;
                              GET ;
                              IF_NONE { PUSH int 251 ; FAILWITH } {} ;
                              CAR ;
                              CAR ;
                              COMPARE ;
                              EQ } ;
                         IF {}
                            { PUSH string
                                   "Only the owner of the contract or the buyer can validate the reception of the goods" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         GET 4 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         MEM ;
                         IF {} { PUSH string "The exchange does not exist" ; FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CAR ;
                         PUSH int 1 ;
                         GET ;
                         IF_NONE { PUSH int 253 ; FAILWITH } {} ;
                         PACK ;
                         DUP 3 ;
                         CAR ;
                         GET 4 ;
                         DUP 3 ;
                         GET ;
                         IF_NONE { PUSH int 253 ; FAILWITH } {} ;
                         GET 5 ;
                         PACK ;
                         COMPARE ;
                         EQ ;
                         IF {}
                            { PUSH string "The exchange is not waiting for a validation" ; FAILWITH } ;
                         NIL operation ;
                         SENDER ;
                         CONTRACT unit ;
                         IF_NONE { PUSH int 255 ; FAILWITH } {} ;
                         DUP 4 ;
                         CAR ;
                         GET 4 ;
                         DUP 4 ;
                         GET ;
                         IF_NONE { PUSH int 255 ; FAILWITH } {} ;
                         GET 12 ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         CONS ;
                         DUP 3 ;
                         GET 3 ;
                         CONTRACT unit ;
                         IF_NONE { PUSH int 256 ; FAILWITH } {} ;
                         DUP 4 ;
                         CAR ;
                         GET 4 ;
                         DUP 4 ;
                         GET ;
                         IF_NONE { PUSH int 256 ; FAILWITH } {} ;
                         GET 7 ;
                         CDR ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         CONS ;
                         DUP 3 ;
                         CAR ;
                         GET 4 ;
                         DUP 3 ;
                         GET ;
                         IF_NONE { PUSH int 258 ; FAILWITH } {} ;
                         GET 3 ;
                         CDR ;
                         CONTRACT unit ;
                         IF_NONE { PUSH int 258 ; FAILWITH } {} ;
                         DUP 4 ;
                         CAR ;
                         GET 4 ;
                         DUP 4 ;
                         GET ;
                         IF_NONE { PUSH int 258 ; FAILWITH } {} ;
                         GET 11 ;
                         DUP 5 ;
                         CAR ;
                         GET 4 ;
                         DUP 5 ;
                         GET ;
                         IF_NONE { PUSH int 258 ; FAILWITH } {} ;
                         GET 7 ;
                         CAR ;
                         ADD ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         CONS ;
                         DUP 3 ;
                         UNPAIR ;
                         UNPAIR ;
                         SWAP ;
                         UNPAIR ;
                         SWAP ;
                         DUP ;
                         DUP 7 ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         IF_NONE { PUSH int 259 ; FAILWITH } {} ;
                         DIG 8 ;
                         CAR ;
                         CAR ;
                         PUSH int 2 ;
                         GET ;
                         IF_NONE { PUSH int 259 ; FAILWITH } {} ;
                         UPDATE 5 ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DUP ;
                         DIG 6 ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         IF_NONE { PUSH int 260 ; FAILWITH } {} ;
                         UNPAIR ;
                         SWAP ;
                         UNPAIR ;
                         CDR ;
                         NOW ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP }
                       { DIG 2 ;
                         DROP ;
                         SENDER ;
                         DUP 3 ;
                         GET 3 ;
                         COMPARE ;
                         EQ ;
                         IF {}
                            { PUSH string
                                   "Only the owner of the contract can validate the transmission of the goods" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         GET 4 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         MEM ;
                         IF {} { PUSH string "The exchange does not exist" ; FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CAR ;
                         PUSH int 0 ;
                         GET ;
                         IF_NONE { PUSH int 241 ; FAILWITH } {} ;
                         PACK ;
                         DUP 3 ;
                         CAR ;
                         GET 4 ;
                         DUP 3 ;
                         GET ;
                         IF_NONE { PUSH int 241 ; FAILWITH } {} ;
                         GET 5 ;
                         PACK ;
                         COMPARE ;
                         EQ ;
                         IF {}
                            { PUSH string
                                   "WrongCondition: sp.pack(sp.set_type_expr(self.data.exchanges[params.id].state, sp.TString)) == sp.pack(sp.set_type_expr(self.data.exchange_states[0], sp.TString))" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         UNPAIR ;
                         UNPAIR ;
                         SWAP ;
                         UNPAIR ;
                         SWAP ;
                         DUP ;
                         DUP 6 ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         IF_NONE { PUSH int 242 ; FAILWITH } {} ;
                         DIG 7 ;
                         CAR ;
                         CAR ;
                         PUSH int 1 ;
                         GET ;
                         IF_NONE { PUSH int 242 ; FAILWITH } {} ;
                         UPDATE 5 ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DUP ;
                         DIG 5 ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         IF_NONE { PUSH int 243 ; FAILWITH } {} ;
                         UNPAIR ;
                         SWAP ;
                         UNPAIR ;
                         CDR ;
                         NOW ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         NIL operation } } } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
