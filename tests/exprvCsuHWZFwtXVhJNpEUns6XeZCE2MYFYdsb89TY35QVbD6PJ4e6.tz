{ parameter
    (or (or (pair %insertWhitelistedAddress
               (pair (string %_alias) (timestamp %_timestamp))
               (address %address)
               (signature %adminSignature)
               (key %pubKeyToBeWhitelisted))
            (pair %issueCert
               (pair (bytes %_hash) (address %_publicSignerHash) (signature %_sigS))
               (key %_signerPublicKey)
               (string %_toAlias)
               (string %_tokenSymbol)))
        (or (pair %setAdmin (address %adminAddress) (key %admin_pk))
            (pair %updateTokenId (nat %tokenId) (string %tokenSymbol)))) ;
  storage
    (pair (pair (pair (address %NFTAddress) (address %adminAddress))
                (key %adminPublicKey)
                (string %groupId)
                (map %signerAddress string address))
          (pair (map %signerAddressAlias bytes string) (map %tokensIssued string nat))
          (map %tokerOwner string (map bytes address))
          (set %whiteListedAddresses bytes)
          (set %whitelist_msg_hashed bytes)) ;
  code { { { DUP ; CAR ; DIP { CDR } } } ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 7 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 PACK ;
                 MEM ;
                 IF { PUSH string "Already whitelisted" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 8 ;
                 SWAP ;
                 DUP ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 3 ;
                 GET 6 ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 4 ;
                 GET 3 ;
                 PAIR ;
                 PAIR ;
                 PACK ;
                 BLAKE2B ;
                 MEM ;
                 IF { PUSH string "signature already exist" ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 3 ;
                 GET 3 ;
                 PAIR ;
                 PAIR ;
                 PACK ;
                 BLAKE2B ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 CAR ;
                 GET 3 ;
                 CHECK_SIGNATURE ;
                 IF {} { PUSH string "verify hash: Invalid signature" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { DIP 5 { DUP } ; DIG 6 } ;
                 GET 3 ;
                 SOME ;
                 { DIP 6 { DUP } ; DIG 7 } ;
                 CAR ;
                 CAR ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 CAR ;
                 CAR ;
                 SOME ;
                 { DIP 5 { DUP } ; DIG 6 } ;
                 GET 6 ;
                 PACK ;
                 UPDATE ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 GET 7 ;
                 PUSH bool True ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 GET 6 ;
                 PACK ;
                 UPDATE ;
                 UPDATE 7 ;
                 DUP ;
                 GET 8 ;
                 PUSH bool True ;
                 DIG 3 ;
                 DUP ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 5 ;
                 GET 6 ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 GET 3 ;
                 PAIR ;
                 PAIR ;
                 PACK ;
                 BLAKE2B ;
                 UPDATE ;
                 UPDATE 8 ;
                 NIL operation }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 7 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 PACK ;
                 MEM ;
                 IF {} { PUSH string "signer not whitelisted" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 CAR ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 3 ;
                 GET 3 ;
                 CHECK_SIGNATURE ;
                 IF {} { PUSH string "verify hash: Invalid Signature" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 GET 6 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 MEM ;
                 IF {} { PUSH string "No to address found" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 MEM ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET 5 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET 6 ;
                      GET ;
                      IF_NONE { PUSH int 104 ; FAILWITH } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      MEM }
                    { PUSH bool False } ;
                 IF { SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      GET 6 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET 5 ;
                      GET ;
                      IF_NONE { PUSH int 98 ; FAILWITH } {} ;
                      { DIP 2 { DUP } ; DIG 3 } ;
                      GET 5 ;
                      { DIP 2 { DUP } ; DIG 3 } ;
                      GET 6 ;
                      GET ;
                      IF_NONE { PUSH int 105 ; FAILWITH } {} ;
                      { DIP 2 { DUP } ; DIG 3 } ;
                      CAR ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 105 ; FAILWITH } {} ;
                      COMPARE ;
                      EQ ;
                      IF {} { PUSH string "Ambiguity in to address" ; FAILWITH } }
                    { SWAP ;
                      DUP ;
                      DUG 2 ;
                      DUP ;
                      GET 5 ;
                      EMPTY_MAP bytes address ;
                      DIG 4 ;
                      CAR ;
                      GET 6 ;
                      { DIP 4 { DUP } ; DIG 5 } ;
                      GET 5 ;
                      GET ;
                      IF_NONE { PUSH int 98 ; FAILWITH } {} ;
                      SOME ;
                      { DIP 4 { DUP } ; DIG 5 } ;
                      CAR ;
                      CAR ;
                      UPDATE ;
                      SOME ;
                      { DIP 3 { DUP } ; DIG 4 } ;
                      GET 6 ;
                      UPDATE ;
                      UPDATE 5 ;
                      SWAP } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 6 ;
                 MEM ;
                 IF { NIL operation ;
                      { DIP 2 { DUP } ; DIG 3 } ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CONTRACT %update (pair address (pair nat nat)) ;
                      IF_NONE { PUSH int 118 ; FAILWITH } {} ;
                      PUSH mutez 0 ;
                      { DIP 4 { DUP } ; DIG 5 } ;
                      GET 3 ;
                      CDR ;
                      { DIP 4 { DUP } ; DIG 5 } ;
                      GET 6 ;
                      GET ;
                      IF_NONE { PUSH int 112 ; FAILWITH } {} ;
                      PUSH nat 1 ;
                      { DIP 6 { DUP } ; DIG 7 } ;
                      GET 5 ;
                      { DIP 6 { DUP } ; DIG 7 } ;
                      GET 6 ;
                      GET ;
                      IF_NONE { PUSH int 123 ; FAILWITH } {} ;
                      DIG 6 ;
                      CAR ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 123 ; FAILWITH } {} ;
                      PAIR 3 ;
                      TRANSFER_TOKENS ;
                      CONS }
                    { NIL operation ;
                      { DIP 2 { DUP } ; DIG 3 } ;
                      CAR ;
                      CAR ;
                      CAR ;
                      CONTRACT %mint (pair (pair address nat) (pair (map string bytes) nat)) ;
                      IF_NONE { PUSH int 131 ; FAILWITH } {} ;
                      PUSH mutez 0 ;
                      PUSH (pair (map string bytes) nat) (Pair {} 0) ;
                      PUSH nat 1 ;
                      { DIP 6 { DUP } ; DIG 7 } ;
                      GET 5 ;
                      { DIP 6 { DUP } ; DIG 7 } ;
                      GET 6 ;
                      GET ;
                      IF_NONE { PUSH int 137 ; FAILWITH } {} ;
                      DIG 6 ;
                      CAR ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH int 137 ; FAILWITH } {} ;
                      PAIR ;
                      PAIR ;
                      TRANSFER_TOKENS ;
                      CONS } } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.adminAddress" ;
                      FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 CAR ;
                 { DIP 3 { DUP } ; DIG 4 } ;
                 CAR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 CDR ;
                 DIG 3 ;
                 CDR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "Only NFTContract can update tokenId" ; FAILWITH } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 SWAP ;
                 { DIP 4 { DUP } ; DIG 5 } ;
                 CAR ;
                 SOME ;
                 DIG 5 ;
                 CDR ;
                 UPDATE ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR } ;
             NIL operation } ;
         PAIR } }
