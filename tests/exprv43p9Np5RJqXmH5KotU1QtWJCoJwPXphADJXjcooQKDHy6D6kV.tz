{ parameter
    (or (contract %push
           (big_map
              string
              (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat))))))))
        (or (signature %revoke)
            (map %update
               string
               (pair signature
                     (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))))))) ;
  storage
    (pair (big_map %oracleData
             string
             (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))))
          (option %publicKey key)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { NIL operation ;
             SWAP ;
             PUSH mutez 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             TRANSFER_TOKENS ;
             CONS }
           { IF_LEFT
               { NONE key ;
                 PACK ;
                 SWAP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 { IF_NONE { PUSH int 118 ; FAILWITH } {} } ;
                 CHECK_SIGNATURE ;
                 IF {}
                    { PUSH string
                           "WrongCondition: sp.check_signature(self.data.publicKey.open_some(), params, sp.pack(sp.set_type_expr(sp.none, sp.TOption(sp.TKey))))" ;
                      FAILWITH } ;
                 CAR ;
                 NONE key ;
                 SWAP ;
                 PAIR }
               { DUP ;
                 ITER { DUP ;
                        { CDR ; CAR } ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        { CDR ; CDR } ;
                        DIG 4 ;
                        DUP ;
                        DUG 5 ;
                        CAR ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        CAR ;
                        MEM ;
                        IF {}
                           { PUSH string "WrongCondition: self.data.oracleData.contains(assetData.key)" ;
                             FAILWITH } ;
                        DUP ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        CAR ;
                        PAIR ;
                        PACK ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        DIG 6 ;
                        DUP ;
                        DUG 7 ;
                        CDR ;
                        { IF_NONE { PUSH int 118 ; FAILWITH } {} } ;
                        CHECK_SIGNATURE ;
                        IF {}
                           { PUSH string
                                  "WrongCondition: sp.check_signature(self.data.publicKey.open_some(), compute_76.value, sp.pack((assetData.key, compute_77.value)))" ;
                             FAILWITH } ;
                        DIG 4 ;
                        DUP ;
                        DUG 5 ;
                        CAR ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        CAR ;
                        GET ;
                        { IF_NONE { PUSH int 94 ; FAILWITH } {} } ;
                        CAR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        SWAP ;
                        COMPARE ;
                        LT ;
                        IF { SWAP ; DROP }
                           { PUSH string "WrongCondition: compute_96.value > compute_95.value" ;
                             FAILWITH } ;
                        DIG 3 ;
                        DUP ;
                        CDR ;
                        SWAP ;
                        CAR ;
                        DIG 3 ;
                        CAR ;
                        DIG 3 ;
                        SOME ;
                        SWAP ;
                        UPDATE ;
                        PAIR ;
                        SWAP } ;
                 DROP } ;
             NIL operation } ;
         PAIR } }
