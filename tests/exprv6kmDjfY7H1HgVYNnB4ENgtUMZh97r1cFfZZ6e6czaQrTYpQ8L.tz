{ parameter
    (or (or (or (pair %approve (address %spender) (nat %value))
                (or (pair %burn (address %address) (nat %value))
                    (list %delete_permits (pair address bytes))))
            (or (or (address %getAdministrator)
                    (pair %getAllowance
                       (pair %arg (address %owner) (address %spender))
                       (address %target)))
                (or (pair %getBalance (address %arg) (address %target)) (address %getCounter))))
        (or (or (or (address %getDefaultExpiry) (address %getTotalSupply))
                (or (pair %mint (address %address) (nat %value))
                    (list %permit (pair key (pair signature bytes)))))
            (or (or (address %setAdministrator)
                    (pair %setExpiry (address %address) (pair (option %permit bytes) (nat %seconds))))
                (or (bool %setPause)
                    (pair %transfer (address %from_) (pair (address %to_) (nat %value))))))) ;
  storage
    (pair (pair (pair (address %administrator)
                      (big_map %balances address (pair (map %approvals address nat) (nat %balance))))
                (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry))))
          (pair (pair (big_map %metadata string bytes)
                      (pair (bool %paused) (big_map %permit_expiries (pair address bytes) (option nat))))
                (pair (big_map %permits (pair address bytes) timestamp)
                      (pair (nat %totalSupply) (big_map %user_expiries address (option nat)))))) ;
  code { LAMBDA
           (pair (pair %in_param address bytes)
                 (pair %in_storage
                    (pair (pair (address %administrator)
                                (big_map %balances address (pair (map %approvals address nat) (nat %balance))))
                          (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry))))
                    (pair (pair (big_map %metadata string bytes)
                                (pair (bool %paused) (big_map %permit_expiries (pair address bytes) (option nat))))
                          (pair (big_map %permits (pair address bytes) timestamp)
                                (pair (nat %totalSupply) (big_map %user_expiries address (option nat)))))))
           (pair (list %operations operation)
                 (pair (nat %result)
                       (pair %storage
                          (pair (pair (address %administrator)
                                      (big_map %balances address (pair (map %approvals address nat) (nat %balance))))
                                (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry))))
                          (pair (pair (big_map %metadata string bytes)
                                      (pair (bool %paused) (big_map %permit_expiries (pair address bytes) (option nat))))
                                (pair (big_map %permits (pair address bytes) timestamp)
                                      (pair (nat %totalSupply) (big_map %user_expiries address (option nat))))))))
           { NIL operation ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP ;
             { CDR ; CAR ; CDR ; CDR } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             MEM ;
             IF { DUP ;
                  { CDR ; CAR ; CDR ; CDR } ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  CAR ;
                  GET ;
                  { IF_NONE { PUSH int 112 ; FAILWITH } {} } ;
                  { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                { PUSH bool False } ;
             IF { DUP ;
                  { CDR ; CAR ; CDR ; CDR } ;
                  DIG 3 ;
                  CAR ;
                  GET ;
                  { IF_NONE { PUSH int 113 ; FAILWITH } {} } ;
                  { IF_NONE { PUSH int 113 ; FAILWITH } {} } }
                { DUP ;
                  { CDR ; CDR ; CDR ; CDR } ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  { CAR ; CAR } ;
                  MEM ;
                  IF { DUP ;
                       { CDR ; CDR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       { CAR ; CAR } ;
                       GET ;
                       { IF_NONE { PUSH int 116 ; FAILWITH } {} } ;
                       { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                     { PUSH bool False } ;
                  IF { DUP ;
                       { CDR ; CDR ; CDR ; CDR } ;
                       DIG 3 ;
                       { CAR ; CAR } ;
                       GET ;
                       { IF_NONE { PUSH int 117 ; FAILWITH } {} } ;
                       { IF_NONE { PUSH int 117 ; FAILWITH } {} } }
                     { DIG 2 ; DROP ; DUP ; { CAR ; CDR ; CDR ; CAR } } } ;
             PAIR %result %storage ;
             SWAP ;
             PAIR %operations } ;
         SWAP ;
         LAMBDA
           (pair (pair %in_param (address %from_) (pair (address %to_) (nat %value)))
                 (pair %in_storage
                    (pair (pair (address %administrator)
                                (big_map %balances address (pair (map %approvals address nat) (nat %balance))))
                          (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry))))
                    (pair (pair (big_map %metadata string bytes)
                                (pair (bool %paused) (big_map %permit_expiries (pair address bytes) (option nat))))
                          (pair (big_map %permits (pair address bytes) timestamp)
                                (pair (nat %totalSupply) (big_map %user_expiries address (option nat)))))))
           (pair (list %operations operation)
                 (pair (bool %result)
                       (pair %storage
                          (pair (pair (address %administrator)
                                      (big_map %balances address (pair (map %approvals address nat) (nat %balance))))
                                (pair (nat %counter) (pair (nat %default_expiry) (nat %max_expiry))))
                          (pair (pair (big_map %metadata string bytes)
                                      (pair (bool %paused) (big_map %permit_expiries (pair address bytes) (option nat))))
                                (pair (big_map %permits (pair address bytes) timestamp)
                                      (pair (nat %totalSupply) (big_map %user_expiries address (option nat))))))))
           { NIL operation ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP ;
             { CDR ; CDR ; CAR } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             PACK ;
             BLAKE2B ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             { CAR ; CAR } ;
             PAIR ;
             MEM ;
             IF { DUP ;
                  { CDR ; CAR ; CDR ; CDR } ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  CAR ;
                  PACK ;
                  BLAKE2B ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  { CAR ; CAR } ;
                  PAIR ;
                  MEM ;
                  IF { DUP ;
                       { CDR ; CAR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       GET ;
                       { IF_NONE { PUSH int 67 ; FAILWITH } {} } ;
                       { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                     { PUSH bool False } ;
                  IF { DUP ;
                       { CDR ; CAR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       GET ;
                       { IF_NONE { PUSH int 68 ; FAILWITH } {} } ;
                       { IF_NONE { PUSH int 68 ; FAILWITH } {} } }
                     { DUP ;
                       { CDR ; CDR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       { CAR ; CAR } ;
                       MEM ;
                       IF { DUP ;
                            { CDR ; CDR ; CDR ; CDR } ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            { CAR ; CAR } ;
                            GET ;
                            { IF_NONE { PUSH int 70 ; FAILWITH } {} } ;
                            { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                          { PUSH bool False } ;
                       IF { DUP ;
                            { CDR ; CDR ; CDR ; CDR } ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            { CAR ; CAR } ;
                            GET ;
                            { IF_NONE { PUSH int 71 ; FAILWITH } {} } ;
                            { IF_NONE { PUSH int 71 ; FAILWITH } {} } }
                          { DUP ; { CAR ; CDR ; CDR ; CAR } } } ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  { CDR ; CDR ; CAR } ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CAR ;
                  PACK ;
                  BLAKE2B ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  { CAR ; CAR } ;
                  PAIR ;
                  GET ;
                  { IF_NONE { PUSH int 66 ; FAILWITH } {} } ;
                  NOW ;
                  SUB ;
                  ISNAT ;
                  { IF_NONE { PUSH int 75 ; FAILWITH } {} } ;
                  COMPARE ;
                  GE ;
                  IF { DUP ;
                       { CDR ; CDR ; CAR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            NONE timestamp ;
                            DIG 6 ;
                            DUP ;
                            DUG 7 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 7 ;
                            DUP ;
                            DUG 8 ;
                            { CAR ; CAR } ;
                            PAIR ;
                            UPDATE ;
                            PAIR ;
                            SWAP ;
                            PAIR ;
                            SWAP ;
                            PAIR }
                          {} ;
                       DUP ;
                       { CDR ; CAR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            NONE (option nat) ;
                            DIG 7 ;
                            DUP ;
                            DUG 8 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 8 ;
                            { CAR ; CAR } ;
                            PAIR ;
                            UPDATE ;
                            SWAP ;
                            PAIR ;
                            SWAP ;
                            PAIR ;
                            PAIR ;
                            SWAP ;
                            PAIR }
                          { DIG 2 ; DROP } ;
                       PUSH bool False }
                     { DUP ;
                       { CDR ; CDR ; CAR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            NONE timestamp ;
                            DIG 6 ;
                            DUP ;
                            DUG 7 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 7 ;
                            DUP ;
                            DUG 8 ;
                            { CAR ; CAR } ;
                            PAIR ;
                            UPDATE ;
                            PAIR ;
                            SWAP ;
                            PAIR ;
                            SWAP ;
                            PAIR }
                          {} ;
                       DUP ;
                       { CDR ; CAR ; CDR ; CDR } ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       PACK ;
                       BLAKE2B ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       { CAR ; CAR } ;
                       PAIR ;
                       MEM ;
                       IF { DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CDR ;
                            SWAP ;
                            CAR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            NONE (option nat) ;
                            DIG 7 ;
                            DUP ;
                            DUG 8 ;
                            CAR ;
                            PACK ;
                            BLAKE2B ;
                            DIG 8 ;
                            { CAR ; CAR } ;
                            PAIR ;
                            UPDATE ;
                            SWAP ;
                            PAIR ;
                            SWAP ;
                            PAIR ;
                            PAIR ;
                            SWAP ;
                            PAIR }
                          { DIG 2 ; DROP } ;
                       PUSH bool True } }
                { DIG 2 ; DROP ; PUSH bool False } ;
             PAIR %result %storage ;
             SWAP ;
             PAIR %operations } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     { CDR ; CAR ; CDR ; CAR } ;
                     IF { PUSH string "WrongCondition: ~ self.data.paused" ; FAILWITH } {} ;
                     PUSH nat 0 ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     { CAR ; CAR ; CDR } ;
                     SENDER ;
                     GET ;
                     { IF_NONE { PUSH int 158 ; FAILWITH } {} } ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     GET ;
                     { IF_NONE { PUSH nat 0 } {} } ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH bool True } { DUP ; CDR ; PUSH nat 0 ; COMPARE ; EQ } ;
                     IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                        { PUSH string "UnsafeAllowanceChange" ; FAILWITH } ;
                     SWAP ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DUP ;
                     SENDER ;
                     DUP ;
                     DUG 2 ;
                     GET ;
                     { IF_NONE { PUSH int 162 ; FAILWITH } {} } ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     DIG 7 ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     NIL operation }
                   { IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CAR ; CAR } ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF {}
                            { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                              FAILWITH } ;
                         DUP ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         GET ;
                         { IF_NONE { PUSH int 188 ; FAILWITH } {} } ;
                         CDR ;
                         COMPARE ;
                         GE ;
                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                            { PUSH string
                                   "WrongCondition: self.data.balances[params.address].balance >= params.value" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         CAR ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         { IF_NONE { PUSH int 189 ; FAILWITH } {} } ;
                         CAR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         CDR ;
                         DIG 8 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 8 ;
                         DUP ;
                         DUG 9 ;
                         CAR ;
                         GET ;
                         { IF_NONE { PUSH int 190 ; FAILWITH } {} } ;
                         CDR ;
                         SUB ;
                         ISNAT ;
                         { IF_NONE { PUSH int 189 ; FAILWITH } {} } ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DUP ;
                         DUG 2 ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         { CDR ; CDR } ;
                         DIG 4 ;
                         CDR ;
                         DIG 5 ;
                         { CDR ; CDR ; CDR ; CAR } ;
                         SUB ;
                         ISNAT ;
                         { IF_NONE { PUSH int 191 ; FAILWITH } {} } ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         NIL operation }
                       { PUSH int 0 ;
                         NIL operation ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         ITER { DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                { CDR ; CDR ; CAR } ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                MEM ;
                                IF {} { DUP ; PUSH string "NO_PERMIT_TO_DELETE" ; PAIR ; FAILWITH } ;
                                DIG 6 ;
                                DUP ;
                                DUG 7 ;
                                DIG 5 ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                PAIR %in_param %in_storage ;
                                EXEC ;
                                DUP ;
                                { CDR ; CDR } ;
                                DUG 5 ;
                                DUP ;
                                CAR ;
                                ITER { DIG 3 ; SWAP ; CONS ; DUG 2 } ;
                                DUP ;
                                { CDR ; CAR } ;
                                DIG 6 ;
                                DUP ;
                                DUG 7 ;
                                { CDR ; CDR ; CAR } ;
                                DIG 3 ;
                                DUP ;
                                DUG 4 ;
                                GET ;
                                { IF_NONE { PUSH int 45 ; FAILWITH } {} } ;
                                NOW ;
                                SUB ;
                                ISNAT ;
                                { IF_NONE { PUSH int 46 ; FAILWITH } {} } ;
                                COMPARE ;
                                GE ;
                                IF { DROP }
                                   { SWAP ; DUP ; DUG 2 ; PUSH string "PERMIT_NOT_EXPIRED" ; PAIR ; FAILWITH } ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                { CDR ; CDR ; CAR } ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                MEM ;
                                IF { DIG 4 ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CDR ;
                                     SWAP ;
                                     CAR ;
                                     NONE timestamp ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     UPDATE ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     DUG 4 }
                                   {} ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                { CDR ; CAR ; CDR ; CDR } ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                MEM ;
                                IF { DIG 4 ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CDR ;
                                     SWAP ;
                                     CAR ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     DUP ;
                                     CAR ;
                                     SWAP ;
                                     CDR ;
                                     NONE (option nat) ;
                                     DIG 6 ;
                                     UPDATE ;
                                     SWAP ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     PAIR ;
                                     SWAP ;
                                     PAIR ;
                                     DUG 3 }
                                   { DROP } } ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP } } }
               { IF_LEFT
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         CONTRACT address ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 215 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         { CAR ; CAR ; CAR } ;
                         TRANSFER_TOKENS ;
                         CONS }
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DUP ;
                         CDR ;
                         CONTRACT nat ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 205 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CAR ; CAR } ;
                         GET ;
                         { IF_NONE { PUSH int 204 ; FAILWITH } {} } ;
                         CAR ;
                         DIG 4 ;
                         { CAR ; CDR } ;
                         GET ;
                         { IF_NONE { PUSH int 204 ; FAILWITH } {} } ;
                         TRANSFER_TOKENS ;
                         CONS } }
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DUP ;
                         CDR ;
                         CONTRACT nat ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 200 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 4 ;
                         CAR ;
                         GET ;
                         { IF_NONE { PUSH int 199 ; FAILWITH } {} } ;
                         CDR ;
                         TRANSFER_TOKENS ;
                         CONS }
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         CONTRACT nat ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 219 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         { CAR ; CDR ; CAR } ;
                         TRANSFER_TOKENS ;
                         CONS } } } }
           { IF_LEFT
               { IF_LEFT
                   { IF_LEFT
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         CONTRACT nat ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 225 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         { CAR ; CDR ; CDR ; CAR } ;
                         TRANSFER_TOKENS ;
                         CONS }
                       { DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         CONTRACT nat ;
                         NIL operation ;
                         SWAP ;
                         { IF_NONE { PUSH int 210 ; FAILWITH } {} } ;
                         PUSH mutez 0 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         { CDR ; CDR ; CDR ; CAR } ;
                         TRANSFER_TOKENS ;
                         CONS } }
                   { IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CAR ; CAR } ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF {}
                            { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CAR ; CDR } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         MEM ;
                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                            { DIG 2 ;
                              DROP ;
                              DIG 2 ;
                              DROP ;
                              SWAP ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              DIG 4 ;
                              DUP ;
                              DUG 5 ;
                              CAR ;
                              PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)) ;
                              SWAP ;
                              UPDATE ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              PAIR ;
                              SWAP } ;
                         SWAP ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         CAR ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         { IF_NONE { PUSH int 181 ; FAILWITH } {} } ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         CDR ;
                         ADD ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DIG 5 ;
                         CDR ;
                         ADD ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         NIL operation }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CDR ; CAR ; CDR ; CAR } ;
                         IF { PUSH string "WrongCondition: ~ self.data.paused" ; FAILWITH } {} ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         ITER { DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                DIG 4 ;
                                DIG 2 ;
                                DUP ;
                                { CDR ; CDR } ;
                                SWAP ;
                                DUP ;
                                DUG 4 ;
                                CAR ;
                                HASH_KEY ;
                                IMPLICIT_ACCOUNT ;
                                ADDRESS ;
                                PAIR ;
                                PAIR %in_param %in_storage ;
                                EXEC ;
                                DUP ;
                                { CDR ; CDR } ;
                                DUG 4 ;
                                DUP ;
                                CAR ;
                                ITER { DIG 3 ; SWAP ; CONS ; DUG 2 } ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                { CDR ; CDR ; CAR } ;
                                DIG 2 ;
                                DUP ;
                                { CDR ; CDR } ;
                                SWAP ;
                                DUP ;
                                DUG 4 ;
                                CAR ;
                                HASH_KEY ;
                                IMPLICIT_ACCOUNT ;
                                ADDRESS ;
                                PAIR ;
                                MEM ;
                                IF { DUP ;
                                     { CDR ; CAR } ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     { CDR ; CDR ; CAR } ;
                                     DIG 3 ;
                                     DUP ;
                                     { CDR ; CDR } ;
                                     SWAP ;
                                     DUP ;
                                     DUG 5 ;
                                     CAR ;
                                     HASH_KEY ;
                                     IMPLICIT_ACCOUNT ;
                                     ADDRESS ;
                                     PAIR ;
                                     GET ;
                                     { IF_NONE { PUSH int 100 ; FAILWITH } {} } ;
                                     NOW ;
                                     SUB ;
                                     ISNAT ;
                                     { IF_NONE { PUSH int 101 ; FAILWITH } {} } ;
                                     COMPARE ;
                                     LT }
                                   { PUSH bool False } ;
                                IF { SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     { CDR ; CDR } ;
                                     PUSH string "DUP_PERMIT" ;
                                     PAIR ;
                                     FAILWITH }
                                   {} ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                { CDR ; CDR } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                { CAR ; CDR ; CAR } ;
                                PAIR ;
                                SELF ;
                                ADDRESS ;
                                CHAIN_ID ;
                                PAIR ;
                                PAIR ;
                                PACK ;
                                DIG 2 ;
                                DUP ;
                                { CDR ; CAR } ;
                                SWAP ;
                                DUP ;
                                DUG 4 ;
                                CAR ;
                                CHECK_SIGNATURE ;
                                IF { DROP }
                                   { SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     { CDR ; CDR } ;
                                     DIG 5 ;
                                     DUP ;
                                     DUG 6 ;
                                     { CAR ; CDR ; CAR } ;
                                     PAIR ;
                                     SELF ;
                                     ADDRESS ;
                                     CHAIN_ID ;
                                     PAIR ;
                                     PAIR ;
                                     PACK ;
                                     PUSH string "MISSIGNED" ;
                                     PAIR ;
                                     FAILWITH } ;
                                DIG 3 ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CDR ;
                                SWAP ;
                                CAR ;
                                DIG 4 ;
                                DUP ;
                                { CDR ; CDR } ;
                                SWAP ;
                                CAR ;
                                HASH_KEY ;
                                IMPLICIT_ACCOUNT ;
                                ADDRESS ;
                                PAIR ;
                                NOW ;
                                SOME ;
                                SWAP ;
                                UPDATE ;
                                PAIR ;
                                SWAP ;
                                PAIR ;
                                SWAP ;
                                PAIR ;
                                DUP ;
                                CDR ;
                                SWAP ;
                                CAR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CDR ;
                                SWAP ;
                                CAR ;
                                PUSH nat 1 ;
                                ADD ;
                                PAIR ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DUG 2 } ;
                         SWAP ;
                         DROP ;
                         DIG 2 ;
                         DROP ;
                         DIG 2 ;
                         DROP } } }
               { IF_LEFT
                   { IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CAR ; CAR } ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                            { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         { CAR ; CDR } ;
                         DIG 3 ;
                         PAIR ;
                         PAIR ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CDR ; CAR ; CDR ; CAR } ;
                         IF { PUSH string "WrongCondition: ~ self.data.paused" ; FAILWITH } {} ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CDR ; CDR ; CDR } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CDR ; CDR } ;
                         COMPARE ;
                         LE ;
                         IF {} { PUSH string "MAX_SECONDS_EXCEEDED" ; FAILWITH } ;
                         SENDER ;
                         PACK ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         PACK ;
                         COMPARE ;
                         EQ ;
                         IF {} { PUSH bool False ; FAILWITH } ;
                         DUP ;
                         { CDR ; CAR } ;
                         { IF_NONE
                             { DROP ; SWAP ; DROP ; SWAP ; DROP }
                             { DROP ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               { CDR ; CDR ; CAR } ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               { CDR ; CAR } ;
                               { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                               DIG 2 ;
                               DUP ;
                               DUG 3 ;
                               CAR ;
                               PAIR ;
                               MEM ;
                               IF {} { PUSH string "PERMIT_NONEXISTENT" ; FAILWITH } ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               { CDR ; CAR ; CDR ; CDR } ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               { CDR ; CAR } ;
                               { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                               DIG 2 ;
                               DUP ;
                               DUG 3 ;
                               CAR ;
                               PAIR ;
                               MEM ;
                               IF { SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    { CDR ; CAR ; CDR ; CDR } ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    { CDR ; CAR } ;
                                    { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    CAR ;
                                    PAIR ;
                                    GET ;
                                    { IF_NONE { PUSH int 135 ; FAILWITH } {} } ;
                                    { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                                  { PUSH bool False } ;
                               IF { SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    { CDR ; CAR ; CDR ; CDR } ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    { CDR ; CAR } ;
                                    { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    CAR ;
                                    PAIR ;
                                    GET ;
                                    { IF_NONE { PUSH int 136 ; FAILWITH } {} } ;
                                    { IF_NONE { PUSH int 136 ; FAILWITH } {} } ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    { CDR ; CDR ; CAR } ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    { CDR ; CAR } ;
                                    { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                                    DIG 3 ;
                                    DUP ;
                                    DUG 4 ;
                                    CAR ;
                                    PAIR ;
                                    GET ;
                                    { IF_NONE { PUSH int 133 ; FAILWITH } {} } ;
                                    NOW ;
                                    SUB ;
                                    ISNAT ;
                                    { IF_NONE { PUSH int 138 ; FAILWITH } {} } ;
                                    COMPARE ;
                                    LT ;
                                    IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                                       { PUSH string "PERMIT_REVOKED" ; FAILWITH } }
                                  { SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    { CDR ; CDR ; CDR ; CDR } ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    MEM ;
                                    IF { SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         { CDR ; CDR ; CDR ; CDR } ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         GET ;
                                         { IF_NONE { PUSH int 141 ; FAILWITH } {} } ;
                                         { IF_NONE { PUSH bool False } { DROP ; PUSH bool True } } }
                                       { PUSH bool False } ;
                                    IF { SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         { CDR ; CDR ; CDR ; CDR } ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         GET ;
                                         { IF_NONE { PUSH int 142 ; FAILWITH } {} } ;
                                         { IF_NONE { PUSH int 142 ; FAILWITH } {} } ;
                                         DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         { CDR ; CDR ; CAR } ;
                                         DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         { CDR ; CAR } ;
                                         { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                                         DIG 3 ;
                                         DUP ;
                                         DUG 4 ;
                                         CAR ;
                                         PAIR ;
                                         GET ;
                                         { IF_NONE { PUSH int 133 ; FAILWITH } {} } ;
                                         NOW ;
                                         SUB ;
                                         ISNAT ;
                                         { IF_NONE { PUSH int 144 ; FAILWITH } {} } ;
                                         COMPARE ;
                                         LT ;
                                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                                            { PUSH string "PERMIT_REVOKED" ; FAILWITH } }
                                       { SWAP ;
                                         DUP ;
                                         { CAR ; CDR ; CDR ; CAR } ;
                                         SWAP ;
                                         DUP ;
                                         DUG 3 ;
                                         { CDR ; CDR ; CAR } ;
                                         DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         { CDR ; CAR } ;
                                         { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                                         DIG 3 ;
                                         DUP ;
                                         DUG 4 ;
                                         CAR ;
                                         PAIR ;
                                         GET ;
                                         { IF_NONE { PUSH int 133 ; FAILWITH } {} } ;
                                         NOW ;
                                         SUB ;
                                         ISNAT ;
                                         { IF_NONE { PUSH int 147 ; FAILWITH } {} } ;
                                         COMPARE ;
                                         LT ;
                                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                                            { PUSH string "PERMIT_REVOKED" ; FAILWITH } } } ;
                               SWAP ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               { CDR ; CAR } ;
                               { IF_NONE { PUSH int 130 ; FAILWITH } {} } ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               CAR ;
                               PAIR ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               { CDR ; CDR } ;
                               SOME ;
                               SOME ;
                               SWAP ;
                               UPDATE ;
                               SWAP ;
                               PAIR ;
                               SWAP ;
                               PAIR ;
                               PAIR ;
                               SWAP ;
                               PAIR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DIG 5 ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               { CDR ; CDR } ;
                               SOME ;
                               SOME ;
                               SWAP ;
                               UPDATE ;
                               SWAP ;
                               PAIR ;
                               SWAP ;
                               PAIR ;
                               SWAP ;
                               PAIR ;
                               SWAP ;
                               PAIR } } } ;
                     NIL operation }
                   { IF_LEFT
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CAR ; CAR ; CAR } ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DIG 2 ; DROP ; DIG 2 ; DROP }
                            { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                              FAILWITH } ;
                         SWAP ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         { CDR ; CDR } ;
                         DIG 4 ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         NIL operation }
                       { SENDER ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 3 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         PAIR %in_param %in_storage ;
                         EXEC ;
                         DUP ;
                         { CDR ; CDR } ;
                         DUG 3 ;
                         DUP ;
                         CAR ;
                         NIL operation ;
                         SWAP ;
                         ITER { CONS } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         { CDR ; CAR } ;
                         IF { DIG 2 ; DROP ; DIG 2 ; DUP ; DUG 3 ; CAR ; DUG 2 } {} ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CAR ; CAR ; CAR } ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH bool True }
                            { DIG 4 ;
                              DUP ;
                              DUG 5 ;
                              { CDR ; CAR ; CDR ; CAR } ;
                              IF { PUSH bool False }
                                 { DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   DIG 4 ;
                                   DUP ;
                                   DUG 5 ;
                                   CAR ;
                                   COMPARE ;
                                   EQ ;
                                   IF { PUSH bool True }
                                      { DIG 3 ;
                                        DUP ;
                                        DUG 4 ;
                                        { CDR ; CDR } ;
                                        DIG 5 ;
                                        DUP ;
                                        DUG 6 ;
                                        { CAR ; CAR ; CDR } ;
                                        DIG 5 ;
                                        DUP ;
                                        DUG 6 ;
                                        CAR ;
                                        GET ;
                                        { IF_NONE { PUSH int 26 ; FAILWITH } {} } ;
                                        CAR ;
                                        DIG 4 ;
                                        DUP ;
                                        DUG 5 ;
                                        GET ;
                                        { IF_NONE { PUSH int 26 ; FAILWITH } {} } ;
                                        COMPARE ;
                                        GE } } } ;
                         IF {}
                            { PUSH string
                                   "WrongCondition: (sender.value == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sender.value) | (self.data.balances[params.from_].approvals[sender.value] >= params.value)))" ;
                              FAILWITH } ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         { CDR ; CAR } ;
                         MEM ;
                         IF {}
                            { DIG 4 ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              DIG 7 ;
                              DUP ;
                              DUG 8 ;
                              { CDR ; CAR } ;
                              PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)) ;
                              SWAP ;
                              UPDATE ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              PAIR ;
                              DUG 4 } ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         { CDR ; CDR } ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         CAR ;
                         GET ;
                         { IF_NONE { PUSH int 28 ; FAILWITH } {} } ;
                         CDR ;
                         COMPARE ;
                         GE ;
                         IF {}
                            { PUSH string
                                   "WrongCondition: self.data.balances[params.from_].balance >= params.value" ;
                              FAILWITH } ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIG 8 ;
                         DUP ;
                         DUG 9 ;
                         CAR ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         { IF_NONE { PUSH int 29 ; FAILWITH } {} } ;
                         CAR ;
                         DIG 9 ;
                         DUP ;
                         DUG 10 ;
                         { CDR ; CDR } ;
                         DIG 11 ;
                         { CAR ; CAR ; CDR } ;
                         DIG 11 ;
                         DUP ;
                         DUG 12 ;
                         CAR ;
                         GET ;
                         { IF_NONE { PUSH int 30 ; FAILWITH } {} } ;
                         CDR ;
                         SUB ;
                         ISNAT ;
                         { IF_NONE { PUSH int 29 ; FAILWITH } {} } ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIG 8 ;
                         DUP ;
                         DUG 9 ;
                         { CDR ; CAR } ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         { IF_NONE { PUSH int 31 ; FAILWITH } {} } ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DIG 10 ;
                         DUP ;
                         DUG 11 ;
                         { CDR ; CDR } ;
                         ADD ;
                         SWAP ;
                         PAIR ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DUG 4 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CAR ;
                         COMPARE ;
                         NEQ ;
                         IF { DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              DIG 5 ;
                              DUP ;
                              DUG 6 ;
                              { CAR ; CAR ; CAR } ;
                              COMPARE ;
                              NEQ }
                            { PUSH bool False } ;
                         IF { SWAP ;
                              DROP ;
                              DIG 4 ;
                              DROP ;
                              DIG 4 ;
                              DROP ;
                              DIG 3 ;
                              DUP ;
                              DUG 4 ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              DUP ;
                              DIG 7 ;
                              DUP ;
                              DUG 8 ;
                              CAR ;
                              DUP ;
                              DUG 2 ;
                              GET ;
                              { IF_NONE { PUSH int 33 ; FAILWITH } {} } ;
                              DUP ;
                              CDR ;
                              SWAP ;
                              CAR ;
                              DIG 8 ;
                              DIG 9 ;
                              DUP ;
                              DUG 10 ;
                              { CDR ; CDR } ;
                              DIG 11 ;
                              { CAR ; CAR ; CDR } ;
                              DIG 11 ;
                              CAR ;
                              GET ;
                              { IF_NONE { PUSH int 34 ; FAILWITH } {} } ;
                              CAR ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              GET ;
                              { IF_NONE { PUSH int 34 ; FAILWITH } {} } ;
                              SUB ;
                              ISNAT ;
                              { IF_NONE { PUSH int 33 ; FAILWITH } {} } ;
                              SOME ;
                              SWAP ;
                              UPDATE ;
                              PAIR ;
                              SOME ;
                              SWAP ;
                              UPDATE ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              PAIR ;
                              SWAP }
                            { SWAP ; DROP ; SWAP ; DROP ; SWAP ; DROP ; DIG 2 ; DROP ; DIG 2 ; DROP } } } } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
