{ parameter
    (or (or (or (or (unit %addLiquidity) (nat %borrow))
                (or (unit %deposit)
                    (pair %getBalanceOf
                       (address %0)
                       (contract %1 (pair (timestamp %blockTimestamp) (mutez %tezAmount))))))
            (or (or (pair %getExchangeRatio
                       (unit %0)
                       (contract %1 (pair (timestamp %blockTimestamp) (nat %ratio))))
                    (unit %repayBorrow))
                (or (nat %updateCollateralRatio) (nat %updateExchangeRatio))))
        (or (or (address %updateTokenAddress) (nat %updateTokenDecimals)) (nat %withdraw))) ;
  storage
    (pair (pair (pair (nat %borrowInterest)
                      (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                (pair (nat %collateralRatio)
                      (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
          (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                      (mutez %liquidity))
                (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals))))) ;
  code { LAMBDA nat mutez { DUP ; PUSH mutez 1000000 ; SWAP ; MUL ; DIP { DROP } } ;
         LAMBDA nat mutez { DUP ; PUSH mutez 1 ; SWAP ; MUL ; DIP { DROP } } ;
         LAMBDA
           mutez
           nat
           { DUP ;
             PUSH mutez 1 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP } } ;
         LAMBDA
           mutez
           nat
           { DUP ;
             PUSH mutez 1000000 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP } } ;
         LAMBDA nat int { DUP ; PUSH int 0 ; ADD ; DIP { DROP } } ;
         LAMBDA
           int
           nat
           { DUP ;
             PUSH nat 0 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF { DUP ; DIP 2 { DUP } ; DIG 2 ; ABS ; SWAP ; CDR ; SWAP ; PAIR }
                { PUSH string "Not posible to convert from negative values" ; FAILWITH } ;
             DUP ;
             CAR ;
             DIP { DROP 3 } } ;
         DUP ;
         NIL operation ;
         SWAP ;
         LAMBDA
           bool
           address
           { DUP ;
             SENDER ;
             SWAP ;
             IF { PUSH address "tz1MZ4GPjAA2gZxKTozJt8Cu5Gvu6WU2ikZ4" } { DUP } ;
             DIP { DROP 2 } } ;
         SWAP ;
         LAMBDA
           (pair (pair (pair (nat %borrowInterest)
                             (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                       (pair (nat %collateralRatio)
                             (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                 (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                             (mutez %liquidity))
                       (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals)))))
           unit
           { DUP ;
             CDR ;
             CAR ;
             CAR ;
             CAR ;
             NOW ;
             SUB ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             SWAP ;
             PUSH int 10000 ;
             SWAP ;
             COMPARE ;
             LT ;
             IF { DUP }
                { DIP 2 { DUP } ;
                  DIG 2 ;
                  CDR ;
                  CAR ;
                  CAR ;
                  CDR ;
                  PUSH nat 1 ;
                  ADD ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  CDR ;
                  CAR ;
                  CAR ;
                  DIP 3 { DUP } ;
                  DIG 3 ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                  PAIR ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DROP 2 } } ;
             DROP 4 ;
             UNIT } ;
         SWAP ;
         LAMBDA
           (pair (pair (pair (nat %borrowInterest)
                             (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                       (pair (nat %collateralRatio)
                             (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                 (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                             (mutez %liquidity))
                       (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals)))))
           unit
           { DUP ; CAR ; CAR ; CAR ; PUSH nat 1 ; ADD ; DROP 2 ; UNIT } ;
         SWAP ;
         LAMBDA
           (pair (lambda int nat)
                 (pair (pair (pair (nat %borrowInterest)
                                   (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                             (pair (nat %collateralRatio)
                                   (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                       (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                                   (mutez %liquidity))
                             (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals))))))
           unit
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             PUSH nat 1 ;
             SWAP ;
             SUB ;
             DIP { DIP { DUP } ; SWAP } ;
             EXEC ;
             DROP 3 ;
             UNIT } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                             DUP ;
                                             DIP { PAIR } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (or %0
                    (or (or (or (address %addOwner) (pair %approve (address %0) (nat %1)))
                            (or (nat %burn) (pair %burnTo (address %0) (nat %1))))
                        (or (or (pair %decimals (unit %0) (contract %1 nat))
                                (pair %getAllowance (pair (address %0) (address %1)) (contract %2 nat)))
                            (or (pair %getBalance (address %0) (contract %1 nat))
                                (pair %getTotalSupply (unit %0) (contract %1 nat)))))
                    (or (or (or (nat %mint) (pair %mintTo (address %0) (nat %1)))
                            (or (pair %name (unit %0) (contract %1 string))
                                (pair %symbol (unit %0) (contract %1 string))))
                        (pair %transfer (pair (address %0) (address %1)) (nat %2))))
                 (pair %1
                    (pair (pair (nat %borrowInterest)
                                (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                          (pair (nat %collateralRatio)
                                (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                    (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                                (mutez %liquidity))
                          (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals))))))
           operation
           { DUP ;
             CDR ;
             CDR ;
             CDR ;
             CDR ;
             CAR ;
             CONTRACT
               (or (or (or (or (address %addOwner) (pair %approve (address %0) (nat %1)))
                           (or (nat %burn) (pair %burnTo (address %0) (nat %1))))
                       (or (or (pair %decimals (unit %0) (contract %1 nat))
                               (pair %getAllowance (pair (address %0) (address %1)) (contract %2 nat)))
                           (or (pair %getBalance (address %0) (contract %1 nat))
                               (pair %getTotalSupply (unit %0) (contract %1 nat)))))
                   (or (or (or (nat %mint) (pair %mintTo (address %0) (nat %1)))
                           (or (pair %name (unit %0) (contract %1 string))
                               (pair %symbol (unit %0) (contract %1 string))))
                       (pair %transfer (pair (address %0) (address %1)) (nat %2)))) ;
             IF_NONE
               { PUSH string "Contract not found." ; FAILWITH }
               { DUP ; DIP { DROP } } ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DUP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda nat int) (pair (lambda mutez nat) (lambda nat mutez)))
                 (pair (pair (address %0) (mutez %1))
                       (pair %2
                          (pair (pair (nat %borrowInterest)
                                      (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                                (pair (nat %collateralRatio)
                                      (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                          (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                                      (mutez %liquidity))
                                (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals)))))))
           (pair (timestamp %blockTimestamp) (mutez %tezAmount))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP ; CDR ; CAR ; CDR ; CDR } ;
             GET ;
             IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
             DIP { DROP } ;
             DUP ;
             CAR ;
             NOW ;
             SUB ;
             DIP { DUP } ;
             SWAP ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                   PAIR ;
                   DIP { DIP 3 { DUP } ; DIG 3 } ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   CAR ;
                   PUSH int 100 ;
                   SWAP ;
                   MUL ;
                   PUSH int 522119 ;
                   SWAP ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   DIP { DUP } ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   DIP { DIP 10 { DUP } ; DIG 10 } ;
                   EXEC ;
                   DUP ;
                   DIP { DIP 10 { DUP } ; DIG 10 } ;
                   EXEC ;
                   DIP 2 { DUP } ;
                   DIG 2 ;
                   DIP { DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CDR ;
                         DIP { DIP 11 { DUP } ; DIG 11 } ;
                         EXEC } ;
                   MUL ;
                   DIP { DUP } ;
                   MUL ;
                   PUSH int 10000 ;
                   SWAP ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   DIP { DUP } ;
                   SWAP ;
                   DIP { DUP } ;
                   ADD ;
                   DUP ;
                   ABS ;
                   DIP { DIP 15 { DUP } ; DIG 15 } ;
                   EXEC ;
                   DUP ;
                   DIP { DROP 7 } } ;
             ADD ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             ADD ;
             SWAP ;
             CAR ;
             PAIR ;
             DUP ;
             CDR ;
             NOW ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 7 { DUP } ;
             DIG 7 ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   SOME ;
                   DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CDR } } ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             CDR ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             ADD ;
             DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DROP 13 } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda mutez nat) (lambda nat mutez))
                 (pair (pair (address %0) (mutez %1))
                       (pair %2
                          (pair (pair (nat %borrowInterest)
                                      (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount))))
                                (pair (nat %collateralRatio)
                                      (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))))
                          (pair (pair (pair %exchangeRatio (timestamp %blockTimestamp) (nat %ratio))
                                      (mutez %liquidity))
                                (pair (address %owner) (pair %token (address %contractAddress) (nat %tokenDecimals)))))))
           (pair (timestamp %blockTimestamp) (mutez %tezAmount))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DUP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP ; CDR ; CAR ; CAR ; CDR } ;
             GET ;
             IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
             DIP { DROP } ;
             DUP ;
             CAR ;
             NOW ;
             SUB ;
             DIP { DUP } ;
             SWAP ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DIP 2 { DUP } ;
                   DIG 2 ;
                   CDR ;
                   DIP { DIP 3 { DUP } ; DIG 3 } ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   DIP { DIP 8 { DUP } ; DIG 8 } ;
                   EXEC ;
                   DIP { DUP } ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIP { DUP } ;
                   MUL ;
                   PUSH nat 100 ;
                   SWAP ;
                   EDIV ;
                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                   CAR ;
                   DIP { DUP } ;
                   SWAP ;
                   DIP { DUP } ;
                   ADD ;
                   DUP ;
                   DIP { DIP 12 { DUP } ; DIG 12 } ;
                   EXEC ;
                   DUP ;
                   DIP { DROP 5 } } ;
             ADD ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             ADD ;
             SWAP ;
             CAR ;
             PAIR ;
             DUP ;
             CDR ;
             NOW ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 7 { DUP } ;
             DIG 7 ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   SOME ;
                   DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR ; CDR } } ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             CDR ;
             DIP { DIP 7 { DUP } ; DIG 7 } ;
             SUB ;
             DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DROP 12 } } ;
         SWAP ;
         APPLY ;
         DIP 14 { DUP } ;
         DIG 14 ;
         CDR ;
         DIP 15 { DUP } ;
         DIG 15 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DIP 4 { DUP } ;
                         DIG 4 ;
                         DUP ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CDR ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { PUSH string "You must be the owner of the contract to add liquidity" ;
                              FAILWITH }
                            { DIP { DUP } ;
                              SWAP ;
                              PUSH mutez 0 ;
                              AMOUNT ;
                              COMPARE ;
                              EQ ;
                              IF { PUSH string "No tez transferred!" ; FAILWITH }
                                 { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   DIP 3 { DUP } ;
                                   DIG 3 ;
                                   CDR ;
                                   CAR ;
                                   CDR ;
                                   AMOUNT ;
                                   ADD ;
                                   DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                   SWAP ;
                                   PAIR ;
                                   PAIR ;
                                   SWAP ;
                                   PAIR ;
                                   DIP { DUP } ;
                                   SWAP ;
                                   DIP { DUP } ;
                                   SWAP ;
                                   DIP { DROP 2 } } ;
                              DIP 2 { DUP } ;
                              DIG 2 ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DROP 3 } } ;
                         DIP 15 { DUP } ;
                         DIG 15 ;
                         DIP { DUP } ;
                         PAIR ;
                         DIP { DROP 4 } }
                       { DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         DIP { DUP } ;
                         SWAP ;
                         PUSH nat 0 ;
                         SWAP ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "No amount to borrow!" ; FAILWITH } { PUSH unit Unit } ;
                         DIP 15 { DUP } ;
                         DIG 15 ;
                         PUSH bool False ;
                         EXEC ;
                         DUP ;
                         PUSH mutez 0 ;
                         SWAP ;
                         PAIR ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         PAIR ;
                         DIP { DIP 11 { DUP } ; DIG 11 } ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         DIP { DIP 21 { DUP } ; DIG 21 } ;
                         EXEC ;
                         DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR ; CAR } ;
                         MUL ;
                         PUSH nat 100 ;
                         SWAP ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         DIP 6 { DUP } ;
                         DIG 6 ;
                         DIP { DIP 26 { DUP } ; DIG 26 } ;
                         EXEC ;
                         DIP 7 { DUP } ;
                         DIG 7 ;
                         DIP { DIP { DUP } ; SWAP } ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "Amount to borrow is greater than collateral ratio!" ;
                              FAILWITH }
                            { PUSH unit Unit } ;
                         DIP { DUP } ;
                         SWAP ;
                         DIP { DIP 7 { DUP } ; DIG 7 ; CDR ; CAR ; CDR } ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "Amount to borrow is greater than liquidity!" ; FAILWITH }
                            { PUSH unit Unit } ;
                         DIP 8 { DUP } ;
                         DIG 8 ;
                         DIP { DIP 20 { DUP } ; DIG 20 } ;
                         EXEC ;
                         DIP 7 { DUP } ;
                         DIG 7 ;
                         DIP { DIP 3 { DUP } ; DIG 3 } ;
                         PAIR ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         PAIR ;
                         DIP { DIP 17 { DUP } ; DIG 17 } ;
                         EXEC ;
                         DIP 10 { DUP } ;
                         DIG 10 ;
                         DIP 11 { DUP } ;
                         DIG 11 ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         SUB ;
                         DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         DIP 9 { DUP } ;
                         DIG 9 ;
                         CONTRACT unit ;
                         IF_NONE
                           { PUSH string "Not a contract" ; FAILWITH }
                           { DUP ; DIP { DROP } } ;
                         DIP 6 { DUP } ;
                         DIG 6 ;
                         DIP { DUP } ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         PAIR ;
                         DIP { DROP 17 } } ;
                     DIP { DROP } }
                   { DUP ;
                     IF_LEFT
                       { DIP 4 { DUP } ;
                         DIG 4 ;
                         PUSH mutez 0 ;
                         AMOUNT ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "No tez transferred!" ; FAILWITH } { PUSH unit Unit } ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CDR ;
                         PUSH nat 0 ;
                         SWAP ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "Exchange ratio must not be zero!" ; FAILWITH }
                            { PUSH unit Unit } ;
                         DIP 14 { DUP } ;
                         DIG 14 ;
                         PUSH bool False ;
                         EXEC ;
                         DUP ;
                         AMOUNT ;
                         SWAP ;
                         PAIR ;
                         DIP { DIP 3 { DUP } ; DIG 3 } ;
                         PAIR ;
                         DIP { DIP 10 { DUP } ; DIG 10 } ;
                         EXEC ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         DIP { DIP 15 { DUP } ; DIG 15 } ;
                         EXEC ;
                         DIP 5 { DUP } ;
                         DIG 5 ;
                         DIP { DIP 14 { DUP } ; DIG 14 } ;
                         EXEC ;
                         DIP 22 { DUP } ;
                         DIG 22 ;
                         AMOUNT ;
                         EXEC ;
                         DUP ;
                         DIP { DIP 7 { DUP } ; DIG 7 ; CDR ; CAR ; CAR ; CDR } ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                         CAR ;
                         DIP { DIP 22 { DUP } ; DIG 22 } ;
                         EXEC ;
                         DIP { DIP 7 { DUP } ;
                               DIG 7 ;
                               CDR ;
                               CDR ;
                               CDR ;
                               CDR ;
                               DIP { DIP 22 { DUP } ; DIG 22 } ;
                               EXEC ;
                               PUSH int 10 ;
                               PAIR ;
                               DUP ;
                               CAR ;
                               DIP { DUP ; CDR } ;
                               PAIR ;
                               PUSH int 1 ;
                               SWAP ;
                               PAIR ;
                               LAMBDA
                                 (pair (pair (int %baseNumber) (int %exponent)) (int %result))
                                 (pair (bool %0) (pair %1 (pair (int %baseNumber) (int %exponent)) (int %result)))
                                 { DUP ;
                                   CAR ;
                                   CDR ;
                                   DUP ;
                                   PUSH int 0 ;
                                   SWAP ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { DIP { DUP } ;
                                        SWAP ;
                                        CDR ;
                                        DIP { DIP { DUP } ; SWAP ; CAR ; CAR } ;
                                        MUL ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        SWAP ;
                                        CAR ;
                                        PAIR ;
                                        DIP { DROP } ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        PUSH int 1 ;
                                        SWAP ;
                                        SUB ;
                                        DIP { DUP } ;
                                        SWAP ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                        SWAP ;
                                        PAIR ;
                                        PAIR ;
                                        DIP { DROP 4 } ;
                                        PUSH bool True ;
                                        PAIR }
                                      { DIP { DUP } ; SWAP ; PUSH bool False ; PAIR } ;
                                   DIP { DROP 2 } } ;
                               SWAP ;
                               PUSH bool True ;
                               LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
                               SWAP ;
                               DROP ;
                               DUP ;
                               CDR ;
                               DIP { DROP 2 } } ;
                         MUL ;
                         DUP ;
                         DIP { DIP 22 { DUP } ; DIG 22 } ;
                         EXEC ;
                         DIP 6 { DUP } ;
                         DIG 6 ;
                         DIP { DUP } ;
                         PAIR ;
                         RIGHT nat ;
                         LEFT (or (pair (unit %0) (contract %1 string)) (pair (unit %0) (contract %1 string))) ;
                         LEFT (pair (pair (address %0) (address %1)) (nat %2)) ;
                         RIGHT
                           (or (or (or address (pair (address %0) (nat %1))) (or nat (pair (address %0) (nat %1))))
                               (or (or (pair (unit %0) (contract %1 nat))
                                       (pair (pair (address %0) (address %1)) (contract %2 nat)))
                                   (or (pair (address %0) (contract %1 nat)) (pair (unit %0) (contract %1 nat))))) ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         PAIR ;
                         DIP { DIP 17 { DUP } ; DIG 17 } ;
                         EXEC ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP 10 { DUP } ; DIG 10 } ;
                         PAIR ;
                         DIP { DROP 12 } }
                       { DUP ;
                         DUP ;
                         CAR ;
                         DIP { DUP ; CDR } ;
                         PAIR ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         CDR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         DIP { DUP } ;
                         SWAP ;
                         NIL operation ;
                         SWAP ;
                         PAIR ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CAR ;
                         CAR ;
                         DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CDR } ;
                         GET ;
                         IF_NONE
                           { PUSH string "Account address not found" ; FAILWITH }
                           { DUP ;
                             DIP { DIP 3 { DUP } ; DIG 3 ; PUSH mutez 0 } ;
                             TRANSFER_TOKENS ;
                             DIP 2 { DUP } ;
                             DIG 2 ;
                             DIP { DUP } ;
                             SWAP ;
                             NIL operation ;
                             SWAP ;
                             CONS ;
                             SWAP ;
                             CAR ;
                             PAIR ;
                             DIP { DROP 2 } } ;
                         DUP ;
                         CDR ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         PAIR ;
                         DIP { DROP 7 } } ;
                     DIP { DROP } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         CDR ;
                         DIP { DIP 4 { DUP } ; DIG 4 } ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         CAR ;
                         CAR ;
                         DIP { DIP { DUP } ; SWAP ; CAR ; PUSH mutez 0 } ;
                         TRANSFER_TOKENS ;
                         DUP ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP { DIP { DUP } ; SWAP } ;
                         PAIR ;
                         DIP { DROP 4 } }
                       { DIP 4 { DUP } ;
                         DIG 4 ;
                         PUSH mutez 0 ;
                         AMOUNT ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH string "No tez transferred!" ; FAILWITH } { PUSH unit Unit } ;
                         DIP 13 { DUP } ;
                         DIG 13 ;
                         PUSH bool False ;
                         EXEC ;
                         DUP ;
                         PUSH mutez 0 ;
                         SWAP ;
                         PAIR ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         PAIR ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         EXEC ;
                         DIP { DUP } ;
                         SWAP ;
                         PUSH mutez 0 ;
                         SWAP ;
                         PAIR ;
                         DIP { DIP 3 { DUP } ; DIG 3 } ;
                         PAIR ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         EXEC ;
                         DUP ;
                         CDR ;
                         DIP { DIP 20 { DUP } ; DIG 20 } ;
                         EXEC ;
                         DUP ;
                         DIP { DIP 24 { DUP } ; DIG 24 } ;
                         EXEC ;
                         DUP ;
                         AMOUNT ;
                         COMPARE ;
                         GE ;
                         IF { PUSH string "Amount to pay is greater than existing borrow amount!" ;
                              FAILWITH }
                            { PUSH unit Unit } ;
                         DIP 7 { DUP } ;
                         DIG 7 ;
                         DIP { DIP 16 { DUP } ; DIG 16 } ;
                         EXEC ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         DIP 5 { DUP } ;
                         DIG 5 ;
                         CDR ;
                         AMOUNT ;
                         SWAP ;
                         SUB ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         DIP 9 { DUP } ;
                         DIG 9 ;
                         DIP 8 { DUP } ;
                         DIG 8 ;
                         DIP { DIP { DUP } ;
                               SWAP ;
                               CDR ;
                               NOW ;
                               PAIR ;
                               SOME ;
                               DIP { DIP 10 { DUP } ; DIG 10 ; CAR ; CAR ; CDR } } ;
                         UPDATE ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DUP ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CAR ;
                         CDR ;
                         AMOUNT ;
                         ADD ;
                         DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         DIP 24 { DUP } ;
                         DIG 24 ;
                         DIP { DUP } ;
                         PAIR ;
                         DIP { DROP 13 } } ;
                     DIP { DROP } }
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIP { DIP { DUP } ; SWAP } ;
                         PAIR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CDR ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { PUSH string
                                   "You must be the owner of the contract to update the collateral ratio" ;
                              FAILWITH }
                            { DUP ;
                              DIP 2 { DUP } ;
                              DIG 2 ;
                              DIP 4 { DUP } ;
                              DIG 4 ;
                              DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              SWAP ;
                              CDR ;
                              SWAP ;
                              PAIR } ;
                         DIP 17 { DUP } ;
                         DIG 17 ;
                         DIP { DUP ; CAR } ;
                         PAIR ;
                         DIP { DROP 6 } }
                       { DUP ;
                         DIP { DIP 4 { DUP } ; DIG 4 } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         DIP { DIP { DUP } ; SWAP } ;
                         PAIR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CDR ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { PUSH string "You must be the owner of the contract to update the exchange ratio" ;
                              FAILWITH }
                            { DUP ;
                              DIP 2 { DUP } ;
                              DIG 2 ;
                              DIP 3 { DUP } ;
                              DIG 3 ;
                              CDR ;
                              CAR ;
                              CAR ;
                              DIP 5 { DUP } ;
                              DIG 5 ;
                              SWAP ;
                              CAR ;
                              PAIR ;
                              DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                              PAIR ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              CDR ;
                              SWAP ;
                              PAIR } ;
                         DIP 17 { DUP } ;
                         DIG 17 ;
                         DIP { DUP ; CAR } ;
                         PAIR ;
                         DIP { DROP 6 } } ;
                     DIP { DROP } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "You must be the owner of the contract to update the token address" ;
                          FAILWITH }
                        { DUP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CDR ;
                          CDR ;
                          CDR ;
                          DIP 5 { DUP } ;
                          DIG 5 ;
                          SWAP ;
                          CDR ;
                          SWAP ;
                          PAIR ;
                          DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          CAR ;
                          PAIR } ;
                     DIP 16 { DUP } ;
                     DIG 16 ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     DIP { DROP 6 } }
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DUP ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "You must be the owner of the contract to update the token decimals" ;
                          FAILWITH }
                        { DUP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CDR ;
                          CDR ;
                          CDR ;
                          DIP 5 { DUP } ;
                          DIG 5 ;
                          SWAP ;
                          CAR ;
                          PAIR ;
                          DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          CDR ;
                          SWAP ;
                          PAIR } ;
                     DIP 16 { DUP } ;
                     DIG 16 ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     DIP { DROP 6 } } ;
                 DIP { DROP } }
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 PUSH nat 0 ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH string "No amount to withdraw!" ; FAILWITH } { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 PUSH nat 0 ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH string "Exchange ratio must not be zero!" ; FAILWITH }
                    { PUSH unit Unit } ;
                 DIP 14 { DUP } ;
                 DIG 14 ;
                 PUSH bool False ;
                 EXEC ;
                 DUP ;
                 PUSH mutez 0 ;
                 SWAP ;
                 PAIR ;
                 DIP { DIP 3 { DUP } ; DIG 3 } ;
                 PAIR ;
                 DIP { DIP 10 { DUP } ; DIG 10 } ;
                 EXEC ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 DIP { DIP 23 { DUP } ; DIG 23 } ;
                 EXEC ;
                 DUP ;
                 DIP { DIP { DUP } ; SWAP ; CDR } ;
                 COMPARE ;
                 GE ;
                 DIP { DUP ;
                       DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; CAR ; CDR } ;
                       COMPARE ;
                       GE } ;
                 OR ;
                 IF { PUSH string "No tez available to withdraw!" ; FAILWITH }
                    { PUSH unit Unit } ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DIP 17 { DUP } ; DIG 17 } ;
                 EXEC ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 DIP { DIP 17 { DUP } ; DIG 17 } ;
                 EXEC ;
                 DIP 9 { DUP } ;
                 DIG 9 ;
                 DIP { DIP 8 { DUP } ; DIG 8 ; CDR ; CAR ; CAR ; CDR } ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DUP } ;
                 PAIR ;
                 RIGHT nat ;
                 RIGHT (or address (pair (address %0) (nat %1))) ;
                 LEFT (or (or (pair (unit %0) (contract %1 nat))
                              (pair (pair (address %0) (address %1)) (contract %2 nat)))
                          (or (pair (address %0) (contract %1 nat)) (pair (unit %0) (contract %1 nat)))) ;
                 LEFT (or (or (or nat (pair (address %0) (nat %1)))
                              (or (pair (unit %0) (contract %1 string)) (pair (unit %0) (contract %1 string))))
                          (pair (pair (address %0) (address %1)) (nat %2))) ;
                 DIP { DIP 9 { DUP } ; DIG 9 } ;
                 PAIR ;
                 DIP { DIP 17 { DUP } ; DIG 17 } ;
                 EXEC ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 CDR ;
                 DIP { DIP 6 { DUP } ; DIG 6 } ;
                 SUB ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIP 11 { DUP } ;
                 DIG 11 ;
                 DIP 9 { DUP } ;
                 DIG 9 ;
                 DIP { DIP { DUP } ;
                       SWAP ;
                       CDR ;
                       NOW ;
                       PAIR ;
                       SOME ;
                       DIP { DIP 12 { DUP } ; DIG 12 ; CAR ; CDR ; CDR } } ;
                 UPDATE ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 CAR ;
                 CDR ;
                 DIP { DIP 8 { DUP } ; DIG 8 } ;
                 SUB ;
                 DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIP 10 { DUP } ;
                 DIG 10 ;
                 CONTRACT unit ;
                 IF_NONE
                   { PUSH string "Not a contract" ; FAILWITH }
                   { DUP ; DIP { DROP } } ;
                 DIP 9 { DUP } ;
                 DIG 9 ;
                 DIP { DUP } ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 DUP ;
                 NIL operation ;
                 SWAP ;
                 CONS ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DIP { DROP 19 } } ;
             DIP { DROP } } ;
         DIP { DROP 16 } } }
