{ parameter
    (or (or (pair %approve (address %spender) (int %value))
            (pair %dotransfer (address %dest) (int %value)))
        (pair %transferFrom (pair (address %from_) (address %to_)) (int %value))) ;
  storage
    (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
          (map %tokenHolder_assets address int)) ;
  code { LAMBDA
           (pair (pair %0
                    (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                    (map %tokenHolder_assets address int))
                 (address %1))
           (pair (pair (int %amount) (address %ocpp_server)) (address %user))
           { DUP ;
             CDR ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CAR } ;
             GET ;
             IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
             DUP ;
             CAR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DROP 3 } } ;
         LAMBDA
           (pair (pair (pair %0
                          (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                          (map %tokenHolder_assets address int))
                       (address %1))
                 (pair %2 (pair (int %amount) (address %ocpp_server)) (address %user)))
           (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                 (map %tokenHolder_assets address int))
           { DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP 3 { DUP } ;
             DIG 3 ;
             CAR ;
             CDR ;
             DIP { DIP { DUP } ;
                   SWAP ;
                   CAR ;
                   CAR ;
                   DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
                   PAIR ;
                   SOME ;
                   DIP { DIP 2 { DUP } ; DIG 2 ; CAR } } ;
             UPDATE ;
             SWAP ;
             CDR ;
             SWAP ;
             PAIR ;
             DIP { DROP 3 } } ;
         LAMBDA
           (pair (list %0 address) (address %1))
           bool
           { DUP ;
             CAR ;
             PUSH bool False ;
             SWAP ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CAR ;
                    DIP { DUP ; CDR ; DIP { DIP { DUP } ; SWAP ; CDR } ; COMPARE ; EQ } ;
                    OR ;
                    DIP { DROP } } ;
             DIP { DROP } } ;
         LAMBDA
           (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                 (map %tokenHolder_assets address int))
           (list address)
           { DUP ;
             NIL address ;
             SWAP ;
             CAR ;
             DIP { DUP } ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    CAR ;
                    DIP { DUP ; CAR } ;
                    CONS ;
                    DIP { DROP } } ;
             DUP ;
             NIL address ;
             SWAP ;
             ITER { SWAP ; PAIR ; DUP ; CDR ; DIP { DUP ; CAR } ; CONS ; DIP { DROP } } ;
             DUP ;
             DIP { DROP 4 } } ;
         LAMBDA
           (pair (pair %0
                    (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                    (map %tokenHolder_assets address int))
                 (address %1))
           (pair (address %holder) (int %tokens))
           { DUP ;
             CDR ;
             DUP ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
             GET ;
             IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DROP 3 } } ;
         LAMBDA
           (pair (pair (pair %0
                          (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                          (map %tokenHolder_assets address int))
                       (address %1))
                 (pair %2 (address %holder) (int %tokens)))
           (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                 (map %tokenHolder_assets address int))
           { DUP ;
             CAR ;
             CAR ;
             DUP ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             CDR ;
             DIP { DIP 2 { DUP } ;
                   DIG 2 ;
                   CDR ;
                   CDR ;
                   SOME ;
                   DIP { DIP { DUP } ; SWAP ; CDR } } ;
             UPDATE ;
             SWAP ;
             CAR ;
             PAIR ;
             DIP { DROP 2 } } ;
         LAMBDA
           (pair (pair %0
                    (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                    (map %tokenHolder_assets address int))
                 (pair %1 (address %holder) (int %tokens)))
           (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                 (map %tokenHolder_assets address int))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             MEM ;
             IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   CDR ;
                   SOME ;
                   DIP { DIP 2 { DUP } ; DIG 2 } } ;
             UPDATE ;
             SWAP ;
             CAR ;
             PAIR ;
             DIP { DROP 6 } } ;
         LAMBDA
           (pair (list %0 address) (address %1))
           bool
           { DUP ;
             CAR ;
             PUSH bool False ;
             SWAP ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CAR ;
                    DIP { DUP ; CDR ; DIP { DIP { DUP } ; SWAP ; CDR } ; COMPARE ; EQ } ;
                    OR ;
                    DIP { DROP } } ;
             DIP { DROP } } ;
         LAMBDA
           (pair (map %allowance_assets address (pair (int %amount) (address %ocpp_server)))
                 (map %tokenHolder_assets address int))
           (list address)
           { DUP ;
             NIL address ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    CAR ;
                    DIP { DUP ; CAR } ;
                    CONS ;
                    DIP { DROP } } ;
             DUP ;
             NIL address ;
             SWAP ;
             ITER { SWAP ; PAIR ; DUP ; CDR ; DIP { DUP ; CAR } ; CONS ; DIP { DROP } } ;
             DUP ;
             DIP { DROP 4 } } ;
         DIP 9 { DUP } ;
         DIG 9 ;
         CDR ;
         DIP 10 { DUP } ;
         DIG 10 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP 12 { DUP } ; DIG 12 } ;
                 EXEC ;
                 SENDER ;
                 SWAP ;
                 PAIR ;
                 DIP { DIP 13 { DUP } ; DIG 13 } ;
                 EXEC ;
                 IF { SENDER ;
                      DIP 2 { DUP } ;
                      DIG 2 ;
                      DIP { DUP } ;
                      PAIR ;
                      DIP { DIP 16 { DUP } ; DIG 16 } ;
                      EXEC ;
                      DIP 3 { DUP } ;
                      DIG 3 ;
                      DIP { DIP { DUP } ; SWAP } ;
                      PAIR ;
                      DIP { DIP 4 { DUP } ;
                            DIG 4 ;
                            CDR ;
                            DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                            PAIR ;
                            DIP { DUP ; CDR } ;
                            PAIR } ;
                      PAIR ;
                      DIP { DIP 16 { DUP } ; DIG 16 } ;
                      EXEC ;
                      DIP 3 { DUP } ;
                      DIG 3 ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DROP 4 } }
                    { DIP { DUP } ;
                      SWAP ;
                      DIP { DIP 2 { DUP } ;
                            DIG 2 ;
                            CDR ;
                            DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
                            PAIR ;
                            SENDER ;
                            SWAP ;
                            PAIR } ;
                      PAIR ;
                      DUP ;
                      CAR ;
                      DIP { DUP } ;
                      SWAP ;
                      CDR ;
                      DUP ;
                      CDR ;
                      DIP 2 { DUP } ;
                      DIG 2 ;
                      CAR ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DUP } ;
                      MEM ;
                      IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
                      DIP 4 { DUP } ;
                      DIG 4 ;
                      DIP 3 { DUP } ;
                      DIG 3 ;
                      DIP { DIP 4 { DUP } ;
                            DIG 4 ;
                            CAR ;
                            CAR ;
                            DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR } ;
                            PAIR ;
                            SOME ;
                            DIP { DIP 2 { DUP } ; DIG 2 } } ;
                      UPDATE ;
                      SWAP ;
                      CDR ;
                      SWAP ;
                      PAIR ;
                      DIP { DROP 6 ; DUP } ;
                      SWAP ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DROP 2 } } ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 6 } }
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 PUSH int 0 ;
                 SWAP ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "require f0 failed" ; FAILWITH } { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 SENDER ;
                 SWAP ;
                 PAIR ;
                 DIP { DIP 11 { DUP } ; DIG 11 } ;
                 EXEC ;
                 DUP ;
                 CDR ;
                 DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "require f1 failed" ; FAILWITH } { PUSH unit Unit } ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 DIP { DIP 10 { DUP } ; DIG 10 } ;
                 EXEC ;
                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR } ;
                 PAIR ;
                 DIP { DIP 11 { DUP } ; DIG 11 } ;
                 EXEC ;
                 IF { DIP 5 { DUP } ;
                      DIG 5 ;
                      CAR ;
                      DIP 5 { DUP } ;
                      DIG 5 ;
                      DIP { DUP } ;
                      PAIR ;
                      DIP { DIP 15 { DUP } ; DIG 15 } ;
                      EXEC ;
                      DUP ;
                      CAR ;
                      DIP { DUP ; CDR ; DIP { DIP 7 { DUP } ; DIG 7 ; CDR } ; ADD } ;
                      PAIR ;
                      DIP 7 { DUP } ;
                      DIG 7 ;
                      DIP { DIP 2 { DUP } ; DIG 2 } ;
                      PAIR ;
                      DIP { DUP } ;
                      PAIR ;
                      DIP { DIP 16 { DUP } ; DIG 16 } ;
                      EXEC ;
                      DIP 4 { DUP } ;
                      DIG 4 ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DROP 5 } }
                    { DIP 4 { DUP } ;
                      DIG 4 ;
                      DIP { DIP 5 { DUP } ;
                            DIG 5 ;
                            CAR ;
                            DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; PUSH int 0 ; ADD } ;
                            PAIR } ;
                      PAIR ;
                      DIP { DIP 12 { DUP } ; DIG 12 } ;
                      EXEC ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DUP } ;
                      SWAP ;
                      DIP { DROP 2 } } ;
                 DUP ;
                 DUP ;
                 SENDER ;
                 SWAP ;
                 DIP { DUP } ;
                 PAIR ;
                 DIP { DIP 17 { DUP } ; DIG 17 } ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 DIP { DUP ; CDR ; DIP { DIP 9 { DUP } ; DIG 9 ; CDR } ; SUB } ;
                 PAIR ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DIP { DUP } ;
                 PAIR ;
                 DIP { DIP 18 { DUP } ; DIG 18 } ;
                 EXEC ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 14 } } ;
             DIP { DROP } }
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             DIP { DIP 10 { DUP } ; DIG 10 } ;
             EXEC ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CAR } ;
             PAIR ;
             DIP { DIP 11 { DUP } ; DIG 11 } ;
             EXEC ;
             NOT ;
             IF { PUSH string "require d1 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR } ;
             PAIR ;
             DIP { DIP 14 { DUP } ; DIG 14 } ;
             EXEC ;
             DUP ;
             CAR ;
             CDR ;
             SENDER ;
             SWAP ;
             COMPARE ;
             EQ ;
             NOT ;
             IF { PUSH string "require d2 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CAR } ;
             PAIR ;
             DIP { DIP 16 { DUP } ; DIG 16 } ;
             EXEC ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DIP 5 { DUP } ; DIG 5 ; CDR } ;
             COMPARE ;
             GE ;
             NOT ;
             IF { PUSH string "require d3 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP 6 { DUP } ;
             DIG 6 ;
             CDR ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             LT ;
             IF { PUSH string "require f3 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP 6 { DUP } ;
             DIG 6 ;
             DIP { DIP 7 { DUP } ; DIG 7 ; CAR ; CAR } ;
             PAIR ;
             DIP { DIP 15 { DUP } ; DIG 15 } ;
             EXEC ;
             DUP ;
             CDR ;
             DIP { DIP 8 { DUP } ; DIG 8 ; CDR } ;
             COMPARE ;
             LT ;
             IF { PUSH string "require f4 failed" ; FAILWITH } { PUSH unit Unit } ;
             DIP 9 { DUP } ;
             DIG 9 ;
             CAR ;
             CAR ;
             DIP 9 { DUP } ;
             DIG 9 ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 22 { DUP } ; DIG 22 } ;
             EXEC ;
             DIP 10 { DUP } ;
             DIG 10 ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DUP ; CAR ; CDR ; PUSH int 0 ; PAIR ; DIP { DUP ; CDR } ; PAIR } ;
             PAIR ;
             DIP { DIP 22 { DUP } ; DIG 22 } ;
             EXEC ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 17 { DUP } ; DIG 17 } ;
             EXEC ;
             DIP { DIP 13 { DUP } ; DIG 13 ; CAR ; CDR } ;
             PAIR ;
             DIP { DIP 18 { DUP } ; DIG 18 } ;
             EXEC ;
             IF { DIP 13 { DUP } ;
                  DIG 13 ;
                  CAR ;
                  CDR ;
                  DIP 2 { DUP } ;
                  DIG 2 ;
                  DIP { DUP } ;
                  PAIR ;
                  DIP { DIP 22 { DUP } ; DIG 22 } ;
                  EXEC ;
                  DUP ;
                  CAR ;
                  DIP { DUP ; CDR ; DIP { DIP 15 { DUP } ; DIG 15 ; CDR } ; ADD } ;
                  PAIR ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DIP 2 { DUP } ; DIG 2 } ;
                  PAIR ;
                  DIP { DUP } ;
                  PAIR ;
                  DIP { DIP 23 { DUP } ; DIG 23 } ;
                  EXEC ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DROP 5 } }
                { DIP { DUP } ;
                  SWAP ;
                  DIP { DIP 13 { DUP } ;
                        DIG 13 ;
                        CAR ;
                        CDR ;
                        DIP { DIP 13 { DUP } ; DIG 13 ; CDR ; PUSH int 0 ; ADD } ;
                        PAIR } ;
                  PAIR ;
                  DIP { DIP 19 { DUP } ; DIG 19 } ;
                  EXEC ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DROP 2 } } ;
             DUP ;
             DIP 15 { DUP } ;
             DIG 15 ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 24 { DUP } ; DIG 24 } ;
             EXEC ;
             DUP ;
             CAR ;
             DIP { DUP ; CDR ; DIP { DIP 17 { DUP } ; DIG 17 ; CDR } ; SUB } ;
             PAIR ;
             DIP 3 { DUP } ;
             DIG 3 ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             PAIR ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 25 { DUP } ; DIG 25 } ;
             EXEC ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 22 } } ;
         DIP { DROP 11 } } }
