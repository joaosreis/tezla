{ storage (pair (big_map %addEP string (lambda (pair (int %x) (int %y)) int)) (int %value)) ;
  parameter
    (or (or (int %add) (pair %callEP (string %epName) (pair %value (int %x) (int %y))))
        (or (int %multiply)
            (or (pair %setEntrypoint (string %epName) (lambda %epScript (pair (int %x) (int %y)) int))
                (int %square)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { PUSH int 0 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   COMPARE ;
                   GE ;
                   IF { {} } { { PUSH string "x must be greater than 0" ; FAILWITH } } ;
                   DUP ;
                   PUSH int 0 ;
                   SWAP ;
                   COMPARE ;
                   GE ;
                   IF { {} } { { PUSH string "y must be greater than 0" ; FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   SWAP ;
                   DIG 2 ;
                   CDR ;
                   ADD ;
                   SWAP ;
                   PAIR } }
               { { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   DIG 2 ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:20" ; FAILWITH } } {} ;
                   DIG 2 ;
                   CDR ;
                   EXEC ;
                   SWAP ;
                   PAIR } } }
           { IF_LEFT
               { { PUSH int 0 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   COMPARE ;
                   GE ;
                   IF { {} } { { PUSH string "x must be greater than 0" ; FAILWITH } } ;
                   DUP ;
                   PUSH int 0 ;
                   SWAP ;
                   COMPARE ;
                   GE ;
                   IF { {} } { { PUSH string "y must be greater than 0" ; FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   SWAP ;
                   DIG 2 ;
                   CDR ;
                   MUL ;
                   SWAP ;
                   PAIR } }
               { IF_LEFT
                   { { SWAP ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       SOME ;
                       DIG 3 ;
                       CAR ;
                       UPDATE ;
                       PAIR } }
                   { { PUSH int 0 ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       COMPARE ;
                       GE ;
                       IF { {} } { { PUSH string "x must be greater than 0" ; FAILWITH } } ;
                       DUP ;
                       PUSH int 0 ;
                       SWAP ;
                       COMPARE ;
                       GE ;
                       IF { {} } { { PUSH string "y must be greater than 0" ; FAILWITH } } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       MUL ;
                       DIG 2 ;
                       DIG 3 ;
                       CDR ;
                       MUL ;
                       MUL ;
                       SWAP ;
                       PAIR } } } } ;
         NIL operation ;
         PAIR } }
