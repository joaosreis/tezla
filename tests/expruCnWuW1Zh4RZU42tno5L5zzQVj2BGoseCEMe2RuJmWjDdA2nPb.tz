{ parameter
    (or (or (pair %acceptBounty (address %approved) (string %bountyId))
            (pair %issueBounty (string %bountyId) (int %deadline)))
        (string %refundBounty)) ;
  storage
    (map string
         (pair (pair (mutez %balance) (string %bountyId))
               (pair (int %deadline) (address %issuer)))) ;
  code { LAMBDA
           address
           (contract unit)
           { DUP ;
             CONTRACT unit ;
             IF_NONE
               { PUSH string "Not a contract" ; FAILWITH }
               { DUP ; DIP { DROP } } ;
             DIP { DROP } } ;
         LAMBDA
           string
           (lambda
              address
              (lambda
                 (map string (pair (pair mutez string) (pair int address)))
                 (pair (pair mutez string) (pair int address))))
           { DUP ;
             LAMBDA
               (pair string address)
               (lambda
                  (map string (pair (pair mutez string) (pair int address)))
                  (pair (pair mutez string) (pair int address)))
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 DUP ;
                 DIP { PAIR } ;
                 SWAP ;
                 LAMBDA
                   (pair (pair address string) (map string (pair (pair mutez string) (pair int address))))
                   (pair (pair mutez string) (pair int address))
                   { DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DIP { DUP ; CDR ; SWAP ; CAR } ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     GET ;
                     IF_NONE
                       { PUSH string "Can't find bounty" ; FAILWITH }
                       { DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CDR ;
                         COMPARE ;
                         NEQ ;
                         IF { PUSH string "Wrong issuer" ; FAILWITH } { DUP } ;
                         DIP { DROP } } ;
                     DIP { DROP 3 } } ;
                 SWAP ;
                 APPLY ;
                 DIP { DROP 2 } } ;
             SWAP ;
             APPLY ;
             DIP { DROP } } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                         SWAP } ;
                                   SWAP } ;
                             SWAP } ;
                       SWAP } ;
                 DUP ;
                 DIP { PAIR } ;
                 SWAP ;
                 LAMBDA
                   (pair (pair string
                               (pair (lambda
                                        string
                                        (lambda
                                           address
                                           (lambda
                                              (map string (pair (pair mutez string) (pair int address)))
                                              (pair (pair mutez string) (pair int address)))))
                                     (lambda address (contract unit))))
                         address)
                   (lambda
                      (map string (pair (pair mutez string) (pair int address)))
                      (pair (list operation) (map string (pair (pair mutez string) (pair int address)))))
                   { DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DIP { DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                           DUP ;
                           DIP { PAIR } ;
                           SWAP } ;
                     DUP ;
                     DIP { PAIR } ;
                     SWAP ;
                     LAMBDA
                       (pair (pair address
                                   (pair string
                                         (pair (lambda
                                                  string
                                                  (lambda
                                                     address
                                                     (lambda
                                                        (map string (pair (pair mutez string) (pair int address)))
                                                        (pair (pair mutez string) (pair int address)))))
                                               (lambda address (contract unit)))))
                             (map string (pair (pair mutez string) (pair int address))))
                       (pair (list operation) (map string (pair (pair mutez string) (pair int address))))
                       { DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
                         DUP ;
                         SOURCE ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         NONE (pair (pair mutez string) (pair int address)) ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         UPDATE ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         CAR ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         NIL operation ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CONS ;
                         PAIR ;
                         DIP { DROP 9 } } ;
                     SWAP ;
                     APPLY ;
                     DIP { DROP 4 } } ;
                 SWAP ;
                 APPLY ;
                 DIP { DROP } ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 EXEC ;
                 DIP { DROP } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 SOURCE ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 DUP ;
                 LAMBDA
                   (pair string int)
                   (lambda
                      address
                      (lambda
                         (map string (pair (pair mutez string) (pair int address)))
                         (pair (list operation) (map string (pair (pair mutez string) (pair int address))))))
                   { DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DIP { DUP } ;
                     DUP ;
                     DIP { PAIR } ;
                     SWAP ;
                     LAMBDA
                       (pair (pair int string) address)
                       (lambda
                          (map string (pair (pair mutez string) (pair int address)))
                          (pair (list operation) (map string (pair (pair mutez string) (pair int address)))))
                       { DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                         DUP ;
                         DIP { PAIR } ;
                         SWAP ;
                         LAMBDA
                           (pair (pair address (pair int string))
                                 (map string (pair (pair mutez string) (pair int address))))
                           (pair (list operation) (map string (pair (pair mutez string) (pair int address))))
                           { DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
                             PUSH mutez 0 ;
                             AMOUNT ;
                             COMPARE ;
                             LE ;
                             IF { PUSH string "Amount needs to be positive" ; FAILWITH }
                                { DUP ;
                                  DIG 4 ;
                                  DUP ;
                                  DUG 5 ;
                                  GET ;
                                  IF_NONE
                                    { DIG 1 ;
                                      DUP ;
                                      DUG 2 ;
                                      DIG 3 ;
                                      DUP ;
                                      DUG 4 ;
                                      PAIR ;
                                      DIG 4 ;
                                      DUP ;
                                      DUG 5 ;
                                      AMOUNT ;
                                      PAIR ;
                                      PAIR ;
                                      DIG 1 ;
                                      DUP ;
                                      DUG 2 ;
                                      DIG 1 ;
                                      DUP ;
                                      DUG 2 ;
                                      SOME ;
                                      DIG 6 ;
                                      DUP ;
                                      DUG 7 ;
                                      UPDATE ;
                                      NIL operation ;
                                      PAIR ;
                                      DIP { DROP } }
                                    { PUSH string "Bounty exists" ; FAILWITH } } ;
                             DIP { DROP 4 } } ;
                         SWAP ;
                         APPLY ;
                         DIP { DROP 3 } } ;
                     SWAP ;
                     APPLY ;
                     DIP { DROP 2 } } ;
                 SWAP ;
                 APPLY ;
                 DIP { DROP } ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 EXEC ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DIG 1 ;
             DUP ;
             DUG 2 ;
             SOURCE ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             SWAP ;
             EXEC ;
             SWAP ;
             EXEC ;
             SWAP ;
             EXEC ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             NONE (pair (pair mutez string) (pair int address)) ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             UPDATE ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             SWAP ;
             EXEC ;
             DUP ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             UNIT ;
             TRANSFER_TOKENS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             NIL operation ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CONS ;
             PAIR ;
             DIP { DROP 5 } } ;
         DIP { DROP 4 } } }
