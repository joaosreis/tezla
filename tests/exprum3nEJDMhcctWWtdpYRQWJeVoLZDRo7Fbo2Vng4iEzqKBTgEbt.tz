{ storage (map int (map int int)) ;
  parameter (or (or (unit %bar) (unit %glider)) (or (unit %reset) (unit %run))) ;
  code { PUSH (map int (map int int))
              { Elt 0
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 1
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 2
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 3
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 4
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 5
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 6
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 7
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 8
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } ;
                Elt 9
                    { Elt 0 0 ;
                      Elt 1 0 ;
                      Elt 2 0 ;
                      Elt 3 0 ;
                      Elt 4 0 ;
                      Elt 5 0 ;
                      Elt 6 0 ;
                      Elt 7 0 ;
                      Elt 8 0 ;
                      Elt 9 0 } } ;
         SWAP ;
         UNPAIR ;
         IF_LEFT
           { SWAP ;
             DROP ;
             IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 PUSH (list int) { 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 } ;
                 ITER { DIG 2 ;
                        DUP ;
                        PUSH int 5 ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { PUSH int 31 ; FAILWITH } {} ;
                        PUSH (option int) (Some 1) ;
                        DIG 4 ;
                        UPDATE ;
                        SOME ;
                        SWAP ;
                        UPDATE ;
                        SWAP } ;
                 DROP ;
                 SWAP ;
                 DROP }
               { DROP ;
                 DUP ;
                 PUSH int 3 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 20 ; FAILWITH } {} ;
                 PUSH (option int) (Some 1) ;
                 PUSH int 3 ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DUP ;
                 PUSH int 4 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 21 ; FAILWITH } {} ;
                 PUSH (option int) (Some 1) ;
                 PUSH int 4 ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DUP ;
                 PUSH int 5 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 22 ; FAILWITH } {} ;
                 PUSH (option int) (Some 1) ;
                 PUSH int 2 ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DUP ;
                 PUSH int 5 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 23 ; FAILWITH } {} ;
                 PUSH (option int) (Some 1) ;
                 PUSH int 3 ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DUP ;
                 PUSH int 5 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH int 24 ; FAILWITH } {} ;
                 PUSH (option int) (Some 1) ;
                 PUSH int 4 ;
                 UPDATE ;
                 SOME ;
                 SWAP ;
                 UPDATE } }
           { IF_LEFT
               { DROP 2 }
               { DUP 3 ;
                 PUSH (list int) { 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 } ;
                 ITER { PUSH (list int) { 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9 } ;
                        ITER { PUSH int 0 ;
                               PUSH int -1 ;
                               PUSH bool True ;
                               LOOP { DUP ;
                                      PUSH int 0 ;
                                      SWAP ;
                                      DUP 6 ;
                                      ADD ;
                                      COMPARE ;
                                      GE ;
                                      IF { DUP ; PUSH int 10 ; SWAP ; DUP 6 ; ADD ; COMPARE ; LT }
                                         { PUSH bool False } ;
                                      IF { PUSH int -1 ;
                                           PUSH bool True ;
                                           LOOP { DUP ;
                                                  PUSH int 0 ;
                                                  SWAP ;
                                                  DUP 6 ;
                                                  ADD ;
                                                  COMPARE ;
                                                  GE ;
                                                  IF { DUP ; PUSH int 10 ; SWAP ; DUP 6 ; ADD ; COMPARE ; LT }
                                                     { PUSH bool False } ;
                                                  IF { PUSH int 0 ;
                                                       DUP 3 ;
                                                       COMPARE ;
                                                       NEQ ;
                                                       IF { PUSH bool True } { DUP ; PUSH int 0 ; COMPARE ; NEQ } ;
                                                       IF { DUP 8 ;
                                                            DUP 3 ;
                                                            DUP 7 ;
                                                            ADD ;
                                                            GET ;
                                                            IF_NONE { PUSH int 44 ; FAILWITH } {} ;
                                                            SWAP ;
                                                            DUP ;
                                                            DUG 2 ;
                                                            DUP 6 ;
                                                            ADD ;
                                                            GET ;
                                                            IF_NONE { PUSH int 44 ; FAILWITH } {} ;
                                                            DIG 3 ;
                                                            ADD ;
                                                            DUG 2 }
                                                          {} }
                                                     {} ;
                                                  PUSH int 1 ;
                                                  ADD ;
                                                  DUP ;
                                                  PUSH int 2 ;
                                                  COMPARE ;
                                                  GT } ;
                                           DROP }
                                         {} ;
                                      PUSH int 1 ;
                                      ADD ;
                                      DUP ;
                                      PUSH int 2 ;
                                      COMPARE ;
                                      GT } ;
                               DROP ;
                               PUSH int 0 ;
                               DUP 7 ;
                               DUP 5 ;
                               GET ;
                               IF_NONE { PUSH int 45 ; FAILWITH } {} ;
                               DUP 4 ;
                               GET ;
                               IF_NONE { PUSH int 45 ; FAILWITH } {} ;
                               COMPARE ;
                               EQ ;
                               IF { PUSH int 3 ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DIG 2 ;
                                         DUP ;
                                         DUP 4 ;
                                         DUP ;
                                         DUG 2 ;
                                         GET ;
                                         IF_NONE { PUSH int 47 ; FAILWITH } {} ;
                                         PUSH (option int) (Some 1) ;
                                         DIG 4 ;
                                         UPDATE ;
                                         SOME ;
                                         SWAP ;
                                         UPDATE ;
                                         SWAP }
                                       { DROP } }
                                  { DUP ;
                                    PUSH int 2 ;
                                    SWAP ;
                                    COMPARE ;
                                    GE ;
                                    IF { PUSH int 3 ; SWAP ; COMPARE ; LE } { DROP ; PUSH bool False } ;
                                    IF { DIG 2 ;
                                         DUP ;
                                         DUP 4 ;
                                         DUP ;
                                         DUG 2 ;
                                         GET ;
                                         IF_NONE { PUSH int 50 ; FAILWITH } {} ;
                                         PUSH (option int) (Some 1) ;
                                         DIG 4 ;
                                         UPDATE ;
                                         SOME ;
                                         SWAP ;
                                         UPDATE ;
                                         SWAP }
                                       { DROP } } } ;
                        DROP } ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP } } ;
         NIL operation ;
         PAIR } }
