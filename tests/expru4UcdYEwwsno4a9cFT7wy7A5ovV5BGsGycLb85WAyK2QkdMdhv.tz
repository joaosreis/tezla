{ storage
    (pair (pair (nat %answeredQuestions) (pair (address %owner) (mutez %prizePerQuestion)))
          (pair (map %questions
                   int
                   (pair (bool %answered) (pair (address %answerer) (mutez %rewardedAmount))))
                (pair (int %startTimestamp) (nat %totalQuestions)))) ;
  parameter
    (or (pair %reward (address %answerer) (int %question))
        (or (unit %sendAmount) (unit %withdraw))) ;
  code { UNPAIR ;
         IF_LEFT
           { SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET 3 ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: sp.sender == self.data.owner" ; FAILWITH } ;
             PUSH bool False ;
             DUP 3 ;
             GET 3 ;
             DUP 3 ;
             CDR ;
             GET ;
             IF_NONE { PUSH int 26 ; FAILWITH } {} ;
             CAR ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "WrongCondition: self.data.questions[params.question].answered == False" ;
                  FAILWITH } ;
             DUP ;
             CAR ;
             CONTRACT unit ;
             IF_NONE { PUSH int 30 ; FAILWITH } {} ;
             NIL operation ;
             SWAP ;
             DUP 4 ;
             CAR ;
             GET 4 ;
             UNIT ;
             TRANSFER_TOKENS ;
             CONS ;
             DIG 2 ;
             DUP ;
             GET 3 ;
             DUP ;
             DUP 5 ;
             CDR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 31 ; FAILWITH } {} ;
             PUSH bool True ;
             UPDATE 1 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 3 ;
             DUP ;
             GET 3 ;
             DUP ;
             DUP 5 ;
             CDR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 32 ; FAILWITH } {} ;
             DUP 6 ;
             CAR ;
             UPDATE 3 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 3 ;
             DUP ;
             DUG 3 ;
             DUP ;
             GET 3 ;
             DUP ;
             DIG 4 ;
             CDR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 33 ; FAILWITH } {} ;
             DIG 5 ;
             CAR ;
             GET 4 ;
             UPDATE 4 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 3 ;
             UNPAIR ;
             UNPAIR ;
             PUSH nat 1 ;
             ADD ;
             PAIR ;
             PAIR ;
             SWAP }
           { IF_LEFT
               { DROP ; NIL operation }
               { DROP ;
                 DUP ;
                 CAR ;
                 GET 3 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.owner" ; FAILWITH } ;
                 DUP ;
                 CAR ;
                 GET 3 ;
                 CONTRACT unit ;
                 IF_NONE { PUSH int 39 ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 BALANCE ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS } } ;
         PAIR } }
