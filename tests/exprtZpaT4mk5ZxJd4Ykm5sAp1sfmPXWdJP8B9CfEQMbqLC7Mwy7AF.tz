{ parameter
    (or (or (or (pair %addLiquidity (pair address nat) (pair nat timestamp))
                (pair %approve (pair address nat) nat))
            (or (unit %awardBakingRights) (pair %betForBakingRights (pair key_hash address) nat)))
        (or (or (pair %removeLiquidity
                   (pair (pair address address) (pair nat mutez))
                   (pair nat timestamp))
                (pair %tokenToXtz (pair (pair address address) (pair nat mutez)) timestamp))
            (pair %xtzToToken (pair address nat) timestamp))) ;
  storage
    (pair (big_map %accounts address (pair (map %allowances address nat) (nat %balance)))
          (pair %s
             (pair (pair (option %current_baker key_hash)
                         (option %current_baker_candidate (pair (pair key_hash address) (pair mutez nat))))
                   (pair (timestamp %last_auction) (nat %lqt_total)))
             (pair (address %token_address) (nat %token_pool)))) ;
  code { LAMBDA
           mutez
           nat
           { DUP ;
             PUSH mutez 1 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP } } ;
         LAMBDA nat mutez { DUP ; PUSH mutez 1 ; SWAP ; MUL ; DIP { DROP } } ;
         EMPTY_MAP address nat ;
         DUP ;
         LAMBDA
           (pair string int)
           nat
           { DUP ;
             CDR ;
             DUP ;
             PUSH nat 0 ;
             SWAP ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF { DIP { DUP } ; SWAP ; ABS ; DIP { DROP } ; PUSH unit Unit }
                { DIP 2 { DUP } ; DIG 2 ; CAR ; FAILWITH } ;
             DROP ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         LAMBDA
           (pair (map address nat)
                 (pair address (big_map address (pair (map %allowances address nat) (nat %balance)))))
           (pair (map %allowances address nat) (nat %balance))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DUP ; CDR } ;
             GET ;
             IF_NONE
               { DIP { DUP } ; SWAP ; PUSH nat 0 ; SWAP ; PAIR }
               { DUP ; DIP { DROP } } ;
             DIP { DROP 2 } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (big_map %accounts address (pair (map %allowances address nat) (nat %balance)))
                 (pair %s
                    (pair (pair (option %current_baker key_hash)
                                (option %current_baker_candidate (pair (pair key_hash address) (pair mutez nat))))
                          (pair (timestamp %last_auction) (nat %lqt_total)))
                    (pair (address %token_address) (nat %token_pool))))
           (pair mutez nat)
           { PUSH nat 0 ;
             PUSH mutez 0 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             CAR ;
             CDR ;
             IF_NONE
               { PUSH unit Unit }
               { DUP ;
                 CDR ;
                 CAR ;
                 DIP { DUP ; CDR ; CDR } ;
                 PAIR ;
                 DIP { DIP { DUP } ; SWAP ; DROP } ;
                 SWAP ;
                 DROP ;
                 DIP { DROP } ;
                 PUSH unit Unit } ;
             DROP ;
             DUP ;
             DIP { DROP 2 } } ;
         LAMBDA
           (pair (option key_hash) key_hash)
           (pair operation operation)
           { DUP ;
             CDR ;
             SOME ;
             SET_DELEGATE ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             SET_DELEGATE ;
             DIP { DUP } ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DROP 3 } } ;
         NONE (pair (pair key_hash address) (pair mutez nat)) ;
         DIP 8 { DUP } ;
         DIG 8 ;
         CDR ;
         DIP 9 { DUP } ;
         DIG 9 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR ; CDR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; CAR ; DIP { DUP ; CDR ; CDR } ; PAIR } ;
                     PAIR ;
                     DIP { DIP 4 { DUP } ; DIG 4 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     NIL operation ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH unit Unit }
                        { PUSH string "add_liquidity: Expected the deadline to be greater than now." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "add_liquidity: Expected maxTokens to be greater than 0." ;
                          FAILWITH } ;
                     DROP ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "add_liquidity: Expected the amount sent to the contract to be greater than 0." ;
                          FAILWITH } ;
                     DROP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { DIP 3 { DUP } ;
                          DIG 3 ;
                          PUSH nat 0 ;
                          SWAP ;
                          COMPARE ;
                          GT ;
                          IF { PUSH unit Unit }
                             { PUSH string "add_liquidity: min_lqt_created must be greater than zero." ;
                               FAILWITH } ;
                          DROP ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DIP 13 { DUP } ; DIG 13 } ;
                          EXEC ;
                          AMOUNT ;
                          BALANCE ;
                          SUB ;
                          DIP { DUP ; CAR } ;
                          SUB ;
                          DIP { DIP 19 { DUP } ; DIG 19 } ;
                          EXEC ;
                          DIP 20 { DUP } ;
                          DIG 20 ;
                          AMOUNT ;
                          EXEC ;
                          DUP ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CDR ; CDR } ;
                          MUL ;
                          DIP { DIP { DUP } ; SWAP } ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; CAR ; CDR ; CDR } ;
                          MUL ;
                          DIP { DIP 2 { DUP } ; DIG 2 } ;
                          EDIV ;
                          IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                          CAR ;
                          DIP 7 { DUP } ;
                          DIG 7 ;
                          DIP { DIP { DUP } ; SWAP } ;
                          COMPARE ;
                          GE ;
                          IF { PUSH unit Unit }
                             { PUSH string
                                    "add_liquidity: max_tokens_deposited must be greater than or equal to tokens_deposited." ;
                               FAILWITH } ;
                          DROP ;
                          DUP ;
                          DIP { DIP 8 { DUP } ; DIG 8 } ;
                          COMPARE ;
                          GE ;
                          IF { PUSH unit Unit }
                             { PUSH string "add_liquidity: lqt_minted must be greater than min_lqt_created." ;
                               FAILWITH } ;
                          DROP ;
                          DIP 9 { DUP } ;
                          DIG 9 ;
                          DIP { DIP 6 { DUP } ; DIG 6 ; CAR } ;
                          PAIR ;
                          DIP { DIP 19 { DUP } ; DIG 19 } ;
                          EXEC ;
                          DUP ;
                          CDR ;
                          DIP { DIP { DUP } ; SWAP } ;
                          ADD ;
                          DIP 11 { DUP } ;
                          DIG 11 ;
                          DIP { DIP { DUP } ;
                                SWAP ;
                                CAR ;
                                DIP { DUP } ;
                                PAIR ;
                                SOME ;
                                DIP { DIP 8 { DUP } ; DIG 8 ; CAR } } ;
                          UPDATE ;
                          DIP { DIP 8 { DUP } ; DIG 8 ; CDR } ;
                          PAIR ;
                          DIP 9 { DROP } ;
                          DUG 8 ;
                          DIP 8 { DUP } ;
                          DIG 8 ;
                          CDR ;
                          CAR ;
                          CDR ;
                          CDR ;
                          DIP { DIP 2 { DUP } ; DIG 2 } ;
                          ADD ;
                          DIP { DIP 8 { DUP } ;
                                DIG 8 ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CDR ;
                                SWAP ;
                                CAR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DIP 9 { DROP } ;
                          DUG 8 ;
                          DIP 8 { DUP } ;
                          DIG 8 ;
                          CDR ;
                          CDR ;
                          CDR ;
                          DIP { DIP 3 { DUP } ; DIG 3 } ;
                          ADD ;
                          DIP { DIP 8 { DUP } ;
                                DIG 8 ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DIP 9 { DROP } ;
                          DUG 8 ;
                          DIP 8 { DUP } ;
                          DIG 8 ;
                          CDR ;
                          CDR ;
                          CAR ;
                          CONTRACT %transfer (pair (pair address address) nat) ;
                          IF_NONE
                            { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                            {} ;
                          DIP 12 { DUP } ;
                          DIG 12 ;
                          DIP { SELF ; ADDRESS } ;
                          PAIR ;
                          DIP { DIP 4 { DUP } ; DIG 4 } ;
                          PAIR ;
                          DIP { DUP ; PUSH mutez 0 } ;
                          TRANSFER_TOKENS ;
                          DUP ;
                          NIL operation ;
                          SWAP ;
                          CONS ;
                          DIP { DIP 9 { DUP } ; DIG 9 ; DROP } ;
                          DIP 10 { DROP } ;
                          DUG 9 ;
                          DROP 9 ;
                          PUSH unit Unit }
                        { PUSH mutez 1000000 ;
                          AMOUNT ;
                          COMPARE ;
                          GE ;
                          IF { PUSH unit Unit }
                             { PUSH string
                                    "add_liquidity: when intiating the liquidity pool the amount must be at least 1 XTZ." ;
                               FAILWITH } ;
                          DROP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DIP 14 { DUP } ; DIG 14 } ;
                          EXEC ;
                          DUP ;
                          CAR ;
                          BALANCE ;
                          SUB ;
                          DIP { DIP 20 { DUP } ; DIG 20 } ;
                          EXEC ;
                          DUP ;
                          DIP { DIP 4 { DUP } ;
                                DIG 4 ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CDR ;
                                SWAP ;
                                CAR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DIP 5 { DROP } ;
                          DUG 4 ;
                          DIP 7 { DUP } ;
                          DIG 7 ;
                          DIP { DIP 19 { DUP } ;
                                DIG 19 ;
                                DIP { DUP } ;
                                PAIR ;
                                SOME ;
                                DIP { DIP 4 { DUP } ; DIG 4 ; CAR } } ;
                          UPDATE ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                          PAIR ;
                          DIP 5 { DROP } ;
                          DUG 4 ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DIP 4 { DUP } ;
                                DIG 4 ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                DUP ;
                                CAR ;
                                SWAP ;
                                CDR ;
                                CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DIP 5 { DROP } ;
                          DUG 4 ;
                          DIP 4 { DUP } ;
                          DIG 4 ;
                          CDR ;
                          CDR ;
                          CAR ;
                          CONTRACT %transfer (pair (pair address address) nat) ;
                          IF_NONE
                            { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                            {} ;
                          DIP 8 { DUP } ;
                          DIG 8 ;
                          DIP { SELF ; ADDRESS } ;
                          PAIR ;
                          DIP { DIP 3 { DUP } ; DIG 3 } ;
                          PAIR ;
                          DIP { DUP ; PUSH mutez 0 } ;
                          TRANSFER_TOKENS ;
                          DUP ;
                          NIL operation ;
                          SWAP ;
                          CONS ;
                          DIP { DIP 5 { DUP } ; DIG 5 ; DROP } ;
                          DIP 6 { DROP } ;
                          DUG 5 ;
                          DROP 5 ;
                          PUSH unit Unit } ;
                     DROP ;
                     DUP ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DROP 8 } }
                   { DUP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR ; CDR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     SENDER ;
                     SWAP ;
                     COMPARE ;
                     NEQ ;
                     IF { DUP ;
                          CAR ;
                          SENDER ;
                          PAIR ;
                          DIP { DIP 11 { DUP } ; DIG 11 } ;
                          EXEC ;
                          DUP ;
                          CAR ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR ; SOME ; DIP { DUP } } ;
                          UPDATE ;
                          DIP { DROP } ;
                          DUP ;
                          DIP { DIP { DUP } ; SWAP ; CDR } ;
                          PAIR ;
                          SOME ;
                          DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
                          SENDER ;
                          UPDATE ;
                          DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                          PAIR ;
                          DIP 3 { DROP } ;
                          DUG 2 ;
                          DROP 2 ;
                          PUSH unit Unit }
                        { PUSH string
                               "approve: the spender must not be the sender. The owner already has rights to all of the LQT" ;
                          FAILWITH } ;
                     DROP ;
                     DUP ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 5 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DIP 3 { DUP } ;
                     DIG 3 ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PUSH int 604800 ;
                     ADD ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "grant_baking_rights_to_highest_bidder" ; FAILWITH } ;
                     DROP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF_NONE
                       { PUSH string "grant_baking_rights_to_highest_bidder" ; FAILWITH }
                       { DIP 2 { DUP } ;
                         DIG 2 ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CAR ;
                         IF_NONE
                           { DUP ;
                             CAR ;
                             CAR ;
                             SOME ;
                             DIP { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   DUP ;
                                   CAR ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CDR ;
                                   SWAP ;
                                   CAR ;
                                   DUP ;
                                   CDR ;
                                   SWAP ;
                                   CAR ;
                                   CDR } ;
                             PAIR ;
                             PAIR ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DIP 3 { DROP } ;
                             DUG 2 ;
                             DIP 7 { DUP } ;
                             DIG 7 ;
                             DIP { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   DUP ;
                                   CAR ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CDR ;
                                   SWAP ;
                                   CAR ;
                                   DUP ;
                                   CDR ;
                                   SWAP ;
                                   CAR ;
                                   CAR } ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DIP 3 { DROP } ;
                             DUG 2 ;
                             DIP 2 { DUP } ;
                             DIG 2 ;
                             CDR ;
                             CDR ;
                             CDR ;
                             DIP { DUP ; CDR ; CDR } ;
                             ADD ;
                             DIP { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   DUP ;
                                   CAR ;
                                   SWAP ;
                                   CDR ;
                                   DUP ;
                                   CAR ;
                                   SWAP ;
                                   CDR ;
                                   CAR } ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DIP 3 { DROP } ;
                             DUG 2 ;
                             DIP 2 { DUP } ;
                             DIG 2 ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             DUP ;
                             CDR ;
                             SWAP ;
                             CAR ;
                             DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             CDR ;
                             NOW ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             SWAP ;
                             PAIR ;
                             DIP 3 { DROP } ;
                             DUG 2 ;
                             DIP 2 { DUP } ;
                             DIG 2 ;
                             CDR ;
                             CAR ;
                             CAR ;
                             CAR ;
                             SET_DELEGATE ;
                             DUP ;
                             DIP { DIP 2 { DUP } ; DIG 2 } ;
                             CONS ;
                             DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                             DIP 3 { DROP } ;
                             DUG 2 ;
                             DROP ;
                             PUSH unit Unit }
                           { DUP ;
                             DIP { DIP { DUP } ; SWAP ; CAR ; CAR } ;
                             COMPARE ;
                             EQ ;
                             IF { DIP 8 { DUP } ;
                                  DIG 8 ;
                                  DIP { DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        CAR } ;
                                  SWAP ;
                                  PAIR ;
                                  PAIR ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  CDR ;
                                  CDR ;
                                  CDR ;
                                  DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
                                  ADD ;
                                  DIP { DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        CAR } ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  CDR ;
                                  SWAP ;
                                  CAR ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  CDR ;
                                  NOW ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  PUSH unit Unit }
                                { DIP { DUP } ;
                                  SWAP ;
                                  CAR ;
                                  CAR ;
                                  SOME ;
                                  DIP { DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        CDR } ;
                                  PAIR ;
                                  PAIR ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 8 { DUP } ;
                                  DIG 8 ;
                                  DIP { DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        DUP ;
                                        CDR ;
                                        SWAP ;
                                        CAR ;
                                        CAR } ;
                                  SWAP ;
                                  PAIR ;
                                  PAIR ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  CDR ;
                                  CDR ;
                                  CDR ;
                                  DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
                                  ADD ;
                                  DIP { DIP 3 { DUP } ;
                                        DIG 3 ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        DUP ;
                                        CAR ;
                                        SWAP ;
                                        CDR ;
                                        CAR } ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  DUP ;
                                  CDR ;
                                  SWAP ;
                                  CAR ;
                                  DUP ;
                                  CAR ;
                                  SWAP ;
                                  CDR ;
                                  CDR ;
                                  NOW ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  PAIR ;
                                  SWAP ;
                                  PAIR ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  CDR ;
                                  CAR ;
                                  CAR ;
                                  CAR ;
                                  SET_DELEGATE ;
                                  DUP ;
                                  DIP { DIP 3 { DUP } ; DIG 3 } ;
                                  CONS ;
                                  DIP { DIP 3 { DUP } ; DIG 3 ; DROP } ;
                                  DIP 4 { DROP } ;
                                  DUG 3 ;
                                  DROP ;
                                  PUSH unit Unit } ;
                             DIP { DROP } } ;
                         DIP { DROP } } ;
                     DROP ;
                     DUP ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DROP 3 } }
                   { DUP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR ; CDR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CAR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF_NONE
                       { DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CAR ;
                         DIP { DIP 4 { DUP } ; DIG 4 } ;
                         PAIR ;
                         DIP { DIP 12 { DUP } ; DIG 12 } ;
                         EXEC ;
                         DUP ;
                         CAR ;
                         DIP { DIP { DUP } ; SWAP } ;
                         CONS ;
                         DIP { DIP { DUP } ; SWAP ; DROP } ;
                         SWAP ;
                         DIP { DIP { DROP } } ;
                         DUP ;
                         CDR ;
                         DIP { DIP { DUP } ; SWAP } ;
                         CONS ;
                         DIP { DIP { DUP } ; SWAP ; DROP } ;
                         SWAP ;
                         DROP ;
                         DIP { DROP } ;
                         PUSH unit Unit }
                       { DUP ;
                         CAR ;
                         CAR ;
                         DIP { DIP 5 { DUP } ; DIG 5 } ;
                         COMPARE ;
                         EQ ;
                         IF { PUSH unit Unit }
                            { DIP 2 { DUP } ;
                              DIG 2 ;
                              CDR ;
                              CAR ;
                              CAR ;
                              CAR ;
                              DIP { DIP 5 { DUP } ; DIG 5 } ;
                              PAIR ;
                              DIP { DIP 13 { DUP } ; DIG 13 } ;
                              EXEC ;
                              DUP ;
                              CAR ;
                              DIP { DIP 2 { DUP } ; DIG 2 } ;
                              CONS ;
                              DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                              DIP 3 { DROP } ;
                              DUG 2 ;
                              DUP ;
                              CDR ;
                              DIP { DIP 2 { DUP } ; DIG 2 } ;
                              CONS ;
                              DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                              DIP 3 { DROP } ;
                              DUG 2 ;
                              DROP ;
                              PUSH unit Unit } ;
                         DIP { DROP } } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "bet_for_baking_rights: max_tokens_bet must be greater than zero" ;
                          FAILWITH } ;
                     DROP ;
                     PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "bet_for_baking_rights: amount of XTZ bet must be greater than zero" ;
                          FAILWITH } ;
                     DROP ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 13 { DUP } ; DIG 13 } ;
                     EXEC ;
                     DUP ;
                     CAR ;
                     AMOUNT ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit } { PUSH string "bet_for_baking_rights" ; FAILWITH } ;
                     DROP ;
                     AMOUNT ;
                     BALANCE ;
                     SUB ;
                     DIP { DUP ; CAR } ;
                     SUB ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP 20 { DUP } ;
                     DIG 20 ;
                     AMOUNT ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CDR ; CDR } ;
                     MUL ;
                     DIP { DIP { DUP } ; SWAP } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit } { PUSH string "bet_for_baking_rights" ; FAILWITH } ;
                     DROP ;
                     DUP ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit } { PUSH string "bet_for_baking_rights" ; FAILWITH } ;
                     DROP ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF_NONE
                       { PUSH unit Unit }
                       { DIP 6 { DUP } ;
                         DIG 6 ;
                         CDR ;
                         CDR ;
                         CAR ;
                         CONTRACT %transfer (pair (pair address address) nat) ;
                         IF_NONE
                           { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                           {} ;
                         SELF ;
                         ADDRESS ;
                         DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
                         PAIR ;
                         DIP { DIP { DUP } ; SWAP ; CDR ; CDR } ;
                         PAIR ;
                         DIP { DUP ; PUSH mutez 0 } ;
                         TRANSFER_TOKENS ;
                         DUP ;
                         DIP { DIP 7 { DUP } ; DIG 7 } ;
                         CONS ;
                         DIP { DIP 7 { DUP } ; DIG 7 ; DROP } ;
                         DIP 8 { DROP } ;
                         DUG 7 ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         CAR ;
                         CDR ;
                         CONTRACT unit ;
                         IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         CAR ;
                         DIP { DUP } ;
                         UNIT ;
                         TRANSFER_TOKENS ;
                         DUP ;
                         DIP { DIP 9 { DUP } ; DIG 9 } ;
                         CONS ;
                         DIP { DIP 9 { DUP } ; DIG 9 ; DROP } ;
                         DIP 10 { DROP } ;
                         DUG 9 ;
                         DROP 5 ;
                         PUSH unit Unit } ;
                     DROP ;
                     DIP 8 { DUP } ;
                     DIG 8 ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DUP ; AMOUNT ; PAIR } ;
                     PAIR ;
                     SOME ;
                     DIP { DIP 5 { DUP } ;
                           DIG 5 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 6 { DROP } ;
                     DUG 5 ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CONTRACT %transfer (pair (pair address address) nat) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                       {} ;
                     DIP 8 { DUP } ;
                     DIG 8 ;
                     DIP { SELF ; ADDRESS } ;
                     PAIR ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DUP ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     DUP ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     CONS ;
                     DIP { DIP 6 { DUP } ; DIG 6 ; DROP } ;
                     DIP 7 { DROP } ;
                     DUG 6 ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DROP 14 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR ; CAR ; CDR } ;
                     PAIR ;
                     DIP { DUP ; CAR ; CDR ; CAR ; DIP { DUP ; CAR ; CDR ; CDR } ; PAIR } ;
                     PAIR ;
                     DIP { DUP ;
                           CDR ;
                           CAR ;
                           DIP { DUP ; CDR ; CDR } ;
                           PAIR ;
                           DIP { DIP 4 { DUP } ; DIG 4 } ;
                           PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CDR ;
                     CDR ;
                     NIL operation ;
                     DIP 7 { DUP } ;
                     DIG 7 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH unit Unit }
                        { PUSH string "remove_liquidity: Expected now to be less than the deadline." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     PUSH mutez 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "remove_liquidity: Expected min_xtz_withdrawn to be greater than zero." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "remove_liquidity: Expected mint_tokens to be greater than zero." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "remove_liquidity: Expected lqt_burned to be greater than zero." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     PUSH nat 0 ;
                     SWAP ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CAR } ;
                     GET ;
                     IF_NONE
                       { PUSH string "check_approval: owner account does not exist." ; FAILWITH }
                       { DIP 2 { DUP } ;
                         DIG 2 ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { DUP ;
                              CAR ;
                              SENDER ;
                              GET ;
                              IF_NONE
                                { PUSH string "check_approval: allowance for sender does not exist." ;
                                  FAILWITH }
                                { DUP ;
                                  DIP { DIP 2 { DUP } ; DIG 2 ; DROP } ;
                                  DIP 3 { DROP } ;
                                  DUG 2 ;
                                  DROP ;
                                  PUSH unit Unit } }
                            { DUP ;
                              CDR ;
                              DIP { DIP { DUP } ; SWAP ; DROP } ;
                              SWAP ;
                              DIP { DIP { DROP } } ;
                              PUSH unit Unit } ;
                         DIP { DROP } } ;
                     DROP ;
                     DUP ;
                     DIP { DROP 3 } ;
                     DUP ;
                     DIP { DIP 5 { DUP } ; DIG 5 } ;
                     COMPARE ;
                     GE ;
                     IF { PUSH unit Unit }
                        { PUSH string "remove_liquidity: sender tried to burn more than their allowance." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     GT ;
                     IF { PUSH unit Unit }
                        { PUSH string "remove_liquidity: Expected lqt_total to be greater than zero." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP { DIP 16 { DUP } ; DIG 16 } ;
                     EXEC ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     DIP { DUP ; CAR ; BALANCE ; SUB ; DIP { DIP 22 { DUP } ; DIG 22 } ; EXEC } ;
                     MUL ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CAR ; CDR ; CDR } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DIP 21 { DUP } ; DIG 21 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     COMPARE ;
                     GE ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "remove_liquidity: Expected xtz_withdrawn to be greater than or equal to min_xtz_withdrawn." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 7 { DUP } ;
                     DIG 7 ;
                     DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CDR ; CDR } ;
                     MUL ;
                     DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CAR ; CDR ; CDR } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DUP ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     COMPARE ;
                     GE ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "remove_liquidity: Expected tokens_withdrawn to be greater than or equal to min_tokens_withdrawn." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 10 { DUP } ;
                     DIG 10 ;
                     DIP { DIP 5 { DUP } ; DIG 5 ; CAR } ;
                     PAIR ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DUP ;
                     CDR ;
                     DIP { DIP 9 { DUP } ; DIG 9 } ;
                     COMPARE ;
                     GE ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "remove_liquidity: Expected owner balance to be greater than or equal to burn_lqt." ;
                          FAILWITH } ;
                     DROP ;
                     DUP ;
                     CDR ;
                     DIP { DIP 9 { DUP } ; DIG 9 } ;
                     SUB ;
                     PUSH string
                          "remove_liquidity: new_balance: int_to_nat: cannot convert a negative number to a nat." ;
                     PAIR ;
                     DIP { DIP 22 { DUP } ; DIG 22 } ;
                     EXEC ;
                     DIP 12 { DUP } ;
                     DIG 12 ;
                     DIP { DIP { DUP } ;
                           SWAP ;
                           CAR ;
                           DIP { DUP } ;
                           PAIR ;
                           SOME ;
                           DIP { DIP 7 { DUP } ; DIG 7 ; CAR } } ;
                     UPDATE ;
                     DIP { DIP 7 { DUP } ; DIG 7 ; CDR } ;
                     PAIR ;
                     DIP 8 { DROP } ;
                     DUG 7 ;
                     DIP 7 { DUP } ;
                     DIG 7 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 10 { DUP } ; DIG 10 } ;
                     SUB ;
                     PUSH string
                          "remove_liquidity: lqt_total: int_to_nat: cannot convert a negative number to a nat." ;
                     PAIR ;
                     DIP { DIP 23 { DUP } ; DIG 23 } ;
                     EXEC ;
                     DIP { DIP 7 { DUP } ;
                           DIG 7 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 8 { DROP } ;
                     DUG 7 ;
                     DIP 7 { DUP } ;
                     DIG 7 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     SUB ;
                     PUSH string
                          "remove_liquidity: token_pool: int_to_nat: cannot convert a negative number to a nat." ;
                     PAIR ;
                     DIP { DIP 23 { DUP } ; DIG 23 } ;
                     EXEC ;
                     DIP { DIP 7 { DUP } ;
                           DIG 7 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 8 { DROP } ;
                     DUG 7 ;
                     DIP 12 { DUP } ;
                     DIG 12 ;
                     SENDER ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP 5 { DUP } ;
                           DIG 5 ;
                           DIP { DIP 10 { DUP } ; DIG 10 } ;
                           SUB ;
                           PUSH string
                                "remove_liquidity: approve: int_to_nat: cannot convert a negative number to a nat." ;
                           PAIR ;
                           DIP { DIP 23 { DUP } ; DIG 23 } ;
                           EXEC ;
                           DIP { DIP 7 { DUP } ; DIG 7 } ;
                           PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     COMPARE ;
                     NEQ ;
                     IF { DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DUP ; CAR } ;
                          PAIR ;
                          DIP { DIP 26 { DUP } ; DIG 26 } ;
                          EXEC ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CAR ; SOME ; DIP { DUP ; CAR } } ;
                          UPDATE ;
                          DIP { DUP ; CDR } ;
                          PAIR ;
                          DIP { DROP } ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          DIP { DUP ;
                                CAR ;
                                DIP { DUP ; CDR } ;
                                PAIR ;
                                SOME ;
                                DIP { DIP { DUP } ; SWAP ; CAR } } ;
                          UPDATE ;
                          DIP { DIP { DUP } ; SWAP ; CDR } ;
                          PAIR ;
                          SWAP ;
                          DROP ;
                          DIP { DROP } ;
                          PUSH unit Unit }
                        { PUSH unit Unit } ;
                     DROP ;
                     DUP ;
                     DIP { DROP 4 ; DIP 7 { DUP } ; DIG 7 ; DROP } ;
                     DIP 8 { DROP } ;
                     DUG 7 ;
                     DIP 11 { DUP } ;
                     DIG 11 ;
                     CONTRACT unit ;
                     IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP { DUP } ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     DIP 9 { DUP } ;
                     DIG 9 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CONTRACT %transfer (pair (pair address address) nat) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                       {} ;
                     SELF ;
                     ADDRESS ;
                     DIP { DIP 14 { DUP } ; DIG 14 } ;
                     PAIR ;
                     DIP { DIP 5 { DUP } ; DIG 5 } ;
                     PAIR ;
                     DIP { DUP ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP { DUP ; NIL operation ; SWAP ; CONS } ;
                     CONS ;
                     DIP { DIP 10 { DUP } ; DIG 10 ; DROP } ;
                     DIP 11 { DROP } ;
                     DUG 10 ;
                     DIP 10 { DUP } ;
                     DIG 10 ;
                     DIP { DIP 11 { DUP } ; DIG 11 } ;
                     PAIR ;
                     DIP { DROP 20 } }
                   { DUP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR ; CAR ; CDR } ;
                     PAIR ;
                     DIP { DUP ; CAR ; CDR ; CAR ; DIP { DUP ; CAR ; CDR ; CDR } ; PAIR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     NIL operation ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CAR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH unit Unit }
                        { PUSH string "token_to_xtz: Expected now to be less than the deadline." ;
                          FAILWITH } ;
                     DROP ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 11 { DUP } ; DIG 11 } ;
                     EXEC ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     PUSH nat 997 ;
                     SWAP ;
                     MUL ;
                     DIP { AMOUNT ;
                           BALANCE ;
                           SUB ;
                           DIP { DUP ; CAR } ;
                           SUB ;
                           DIP { DIP 17 { DUP } ; DIG 17 } ;
                           EXEC } ;
                     MUL ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           CDR ;
                           CDR ;
                           CDR ;
                           PUSH nat 1000 ;
                           SWAP ;
                           MUL ;
                           DIP { DIP 3 { DUP } ; DIG 3 ; PUSH nat 997 ; SWAP ; MUL } ;
                           ADD } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DIP 16 { DUP } ; DIG 16 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CDR } ;
                     COMPARE ;
                     GE ;
                     IF { PUSH unit Unit }
                        { PUSH string
                               "token_to_xtz: Expected xtz_bought to be greater than or equal to min_xtz_bought." ;
                          FAILWITH } ;
                     DROP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 4 { DUP } ; DIG 4 } ;
                     ADD ;
                     DIP { DIP 3 { DUP } ;
                           DIG 3 ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           DUP ;
                           CAR ;
                           SWAP ;
                           CDR ;
                           CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 4 { DROP } ;
                     DUG 3 ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     CONTRACT unit ;
                     IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DUP } ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CONTRACT %transfer (pair (pair address address) nat) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                       {} ;
                     DIP 8 { DUP } ;
                     DIG 8 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { SELF ; ADDRESS } ;
                     PAIR ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DUP ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP { DUP ; NIL operation ; SWAP ; CONS } ;
                     CONS ;
                     DIP { DIP 6 { DUP } ; DIG 6 ; DROP } ;
                     DIP 7 { DROP } ;
                     DUG 6 ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DROP 12 } } ;
                 DIP { DROP } }
               { DUP ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DUP ; CAR ; CDR } ;
                 PAIR ;
                 DIP { DUP ; CDR ; DIP { DIP 3 { DUP } ; DIG 3 } ; PAIR } ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 CDR ;
                 NIL operation ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH unit Unit }
                    { PUSH string "xtz_to_token: Expected now to be less than the deadline." ;
                      FAILWITH } ;
                 DROP ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP 9 { DUP } ; DIG 9 } ;
                 EXEC ;
                 AMOUNT ;
                 BALANCE ;
                 SUB ;
                 DIP { DUP ; CAR } ;
                 SUB ;
                 DIP { DIP 15 { DUP } ; DIG 15 } ;
                 EXEC ;
                 DIP 16 { DUP } ;
                 DIG 16 ;
                 AMOUNT ;
                 EXEC ;
                 DUP ;
                 PUSH nat 997 ;
                 SWAP ;
                 MUL ;
                 DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CDR ; CDR } ;
                 MUL ;
                 DIP { DIP { DUP } ;
                       SWAP ;
                       PUSH nat 1000 ;
                       SWAP ;
                       MUL ;
                       DIP { DUP ; PUSH nat 997 ; SWAP ; MUL } ;
                       ADD } ;
                 EDIV ;
                 IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                 CAR ;
                 DUP ;
                 DIP { DIP 6 { DUP } ; DIG 6 ; CAR ; CDR } ;
                 COMPARE ;
                 GE ;
                 IF { PUSH unit Unit }
                    { PUSH string
                           "xtz_to_token: Expected tokens_bought to be greater than or equal to min_tokens_bought." ;
                      FAILWITH } ;
                 DROP ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIP { DUP } ;
                 SUB ;
                 PUSH string
                      "xtz_to_token: token_pool: int_to_nat: cannot convert a negative number to a nat." ;
                 PAIR ;
                 DIP { DIP 15 { DUP } ; DIG 15 } ;
                 EXEC ;
                 DIP { DIP 5 { DUP } ;
                       DIG 5 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR } ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIP 6 { DROP } ;
                 DUG 5 ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 CONTRACT %transfer (pair (pair address address) nat) ;
                 IF_NONE
                   { PUSH string "bad address for get_entrypoint (%transfer)" ; FAILWITH }
                   {} ;
                 SELF ;
                 ADDRESS ;
                 DIP { DIP 7 { DUP } ; DIG 7 ; CAR ; CAR } ;
                 PAIR ;
                 DIP { DIP { DUP } ; SWAP } ;
                 PAIR ;
                 DIP { DUP ; PUSH mutez 0 } ;
                 TRANSFER_TOKENS ;
                 DUP ;
                 NIL operation ;
                 SWAP ;
                 CONS ;
                 DIP { DIP 6 { DUP } ; DIG 6 ; DROP } ;
                 DIP 7 { DROP } ;
                 DUG 6 ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DIP 7 { DUP } ; DIG 7 } ;
                 PAIR ;
                 DIP { DROP 11 } } ;
             DIP { DROP } } ;
         DIP { DROP 10 } } }
