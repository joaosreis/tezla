{ parameter (or (pair %addCreditor address nat) (address %removeCreditor)) ;
  storage
    (pair (pair (map %creditorsMap address (pair (nat %creditAmount) (timestamp %initialTime)))
                (address %debtor))
          (int %totalCredits)) ;
  code { DUP ;
         CDR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         NEQ ;
         IF { PUSH string "This contract do not accept token" ; FAILWITH }
            { PUSH unit Unit } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         IF_LEFT
           { DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DUP ;
             CAR ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             COMPARE ;
             EQ ;
             IF { PUSH string "Creditor contract does not exist" ; FAILWITH }
                { DUP ;
                  CAR ;
                  CAR ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  GET ;
                  IF_NONE
                    { NOW ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      CAR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      ADD ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIP { DROP } ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DROP 4 } }
                    { PUSH string "Creditor contract does not reach maturity" ; FAILWITH } ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIP { DROP 2 } } ;
             DUP ;
             DIP { DROP 5 } ;
             NIL operation ;
             PAIR ;
             DIP { DROP } }
           { DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DUP ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             COMPARE ;
             EQ ;
             IF { PUSH string "Creditor contract does not exist" ; FAILWITH }
                { DUP ;
                  CAR ;
                  CAR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  GET ;
                  IF_NONE
                    { PUSH string "Creditor contract does not exist" ; FAILWITH }
                    { DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      NONE (pair (nat %creditAmount) (timestamp %initialTime)) ;
                      SWAP ;
                      UPDATE ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                      PAIR ;
                      PAIR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      SUB ;
                      PUSH int 0 ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      COMPARE ;
                      LT ;
                      IF { PUSH string "totalCredits cannot be less than zero." ; FAILWITH }
                         { PUSH unit Unit } ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIP { DROP } ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIP { DROP 6 } } ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIP { DROP 2 } } ;
             DUP ;
             DIP { DROP 4 } ;
             NIL operation ;
             PAIR ;
             DIP { DROP } } ;
         DIP { DROP 3 } } }
