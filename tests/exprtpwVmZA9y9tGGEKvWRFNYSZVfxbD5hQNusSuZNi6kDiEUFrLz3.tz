{ parameter
    (pair (pair (int %start_x) (int %start_y)) (pair (int %target_x) (int %target_y))) ;
  storage
    (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                (pair (pair %players
                         (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                         (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                      (address %turn)))
          (option %winner address)) ;
  code { LAMBDA
           (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
           (pair (int %x) (int %y))
           { DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR } ;
             SUB ;
             DIP { DUP ; CDR ; DIP { DIP { DUP } ; SWAP ; CDR } ; SUB } ;
             PAIR ;
             DUP ;
             DIP { DROP 4 } } ;
         DUP ;
         LAMBDA
           (pair (pair (int %x) (int %y))
                 (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                             (pair (pair %players
                                      (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                      (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                   (address %turn)))
                       (option %winner address)))
           (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                   (pair %occupiedCell (pair (int %x) (int %y)) int))
               (unit %outOfBoundsCell))
           { DUP ;
             CAR ;
             DUP ;
             CDR ;
             DIP { DIP { DUP } ; SWAP ; CDR ; CAR ; CAR ; CAR } ;
             GET ;
             IF_NONE
               { PUSH unit Unit ;
                 RIGHT (or (pair (pair (int %x) (int %y)) int) (pair (pair (int %x) (int %y)) int)) }
               { DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 DIP { DUP } ;
                 GET ;
                 IF_NONE
                   { PUSH unit Unit ;
                     RIGHT (or (pair (pair (int %x) (int %y)) int) (pair (pair (int %x) (int %y)) int)) }
                   { DUP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     IF { DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DUP } ;
                          PAIR ;
                          LEFT (pair (pair (int %x) (int %y)) int) ;
                          LEFT unit }
                        { DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DUP } ;
                          PAIR ;
                          RIGHT (pair (pair (int %x) (int %y)) int) ;
                          LEFT unit } ;
                     DIP { DROP } } ;
                 DIP { DROP } } ;
             DUP ;
             DIP { DROP 3 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (int %x) (int %y))
                                (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                                            (pair (pair %players
                                                     (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                                     (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                                  (address %turn)))
                                      (option %winner address)))
                          (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                  (pair %occupiedCell (pair (int %x) (int %y)) int))
                              (unit %outOfBoundsCell)))
                       (lambda (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) (pair (int %x) (int %y))))
                 (pair (pair (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                             (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                     (pair %occupiedCell (pair (int %x) (int %y)) int))
                                 (unit %outOfBoundsCell)))
                       (pair (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                     (pair %occupiedCell (pair (int %x) (int %y)) int))
                                 (unit %outOfBoundsCell))
                             (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                                         (pair (pair %players
                                                  (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                                  (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                               (address %turn)))
                                   (option %winner address)))))
           (or (or (string %invalidMove)
                   (pair %jumpMove
                      (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                      (pair int (pair (int %x) (int %y)))))
               (pair %stepMove (pair (int %x) (int %y)) (pair (int %x) (int %y))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP ; CAR ; CDR } ;
             PAIR ;
             DIP { DUP ; CDR ; CAR ; DIP { DUP ; CDR ; CDR } ; PAIR } ;
             PAIR ;
             DUP ;
             CAR ;
             CDR ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { PUSH string "INVALID MOVE EMPTY START CELL" ;
                     LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                (pair int (pair (int %x) (int %y)))) ;
                     LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) ;
                     DIP { DROP } }
                   { DUP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CAR } ; PAIR } ;
                     PAIR ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CDR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DUP ;
                     DIP { DIP { DUP } ; SWAP ; CAR ; CAR } ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID MOVE CANNOT MOVE OPPONENT PIECE" ;
                          LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                     (pair int (pair (int %x) (int %y)))) ;
                          LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                        { DIP { DUP } ;
                          SWAP ;
                          DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CDR } ;
                          PAIR ;
                          DIP { DUP ; DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR ; CDR } ; PAIR } ;
                          PAIR ;
                          DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                          PAIR ;
                          DUP ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIP { DUP } ;
                          SWAP ;
                          CAR ;
                          CAR ;
                          CDR ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CDR ;
                          DIP 4 { DUP } ;
                          DIG 4 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          IF_LEFT
                            { DUP ;
                              IF_LEFT
                                { DUP ;
                                  DIP 6 { DUP } ;
                                  DIG 6 ;
                                  DIP { DIP 5 { DUP } ; DIG 5 } ;
                                  PAIR ;
                                  DIP { DIP 4 { DUP } ; DIG 4 ; DIP { DUP ; CAR } ; PAIR } ;
                                  PAIR ;
                                  DIP { DUP ; CDR ; DIP { DIP 3 { DUP } ; DIG 3 } ; PAIR } ;
                                  PAIR ;
                                  DUP ;
                                  CAR ;
                                  CAR ;
                                  CAR ;
                                  DIP { DUP } ;
                                  SWAP ;
                                  CAR ;
                                  CAR ;
                                  CDR ;
                                  DIP 2 { DUP } ;
                                  DIG 2 ;
                                  CAR ;
                                  CDR ;
                                  CDR ;
                                  DIP 3 { DUP } ;
                                  DIG 3 ;
                                  CDR ;
                                  CDR ;
                                  DIP 2 { DUP } ;
                                  DIG 2 ;
                                  DIP { DIP { DUP } ; SWAP } ;
                                  PAIR ;
                                  DIP { DIP 22 { DUP } ; DIG 22 } ;
                                  EXEC ;
                                  DUP ;
                                  DUP ;
                                  CAR ;
                                  ABS ;
                                  INT ;
                                  DIP { DUP ; CDR ; ABS ; INT } ;
                                  PAIR ;
                                  DIP { DROP } ;
                                  DIP 4 { DUP } ;
                                  DIG 4 ;
                                  DIP { DIP 3 { DUP } ; DIG 3 } ;
                                  PAIR ;
                                  DIP { DIP { DUP } ; SWAP ; DIP { DUP } ; PAIR } ;
                                  PAIR ;
                                  DIP { DIP 2 { DUP } ; DIG 2 } ;
                                  PAIR ;
                                  DUP ;
                                  CAR ;
                                  CAR ;
                                  CDR ;
                                  DIP { DUP } ;
                                  SWAP ;
                                  CAR ;
                                  CDR ;
                                  CAR ;
                                  DIP 2 { DUP } ;
                                  DIG 2 ;
                                  CAR ;
                                  CDR ;
                                  CDR ;
                                  CAR ;
                                  PUSH int 2 ;
                                  SWAP ;
                                  COMPARE ;
                                  EQ ;
                                  IF { DIP { DUP } ;
                                       SWAP ;
                                       CAR ;
                                       DIP { DUP ;
                                             CAR ;
                                             PUSH int 2 ;
                                             SWAP ;
                                             EDIV ;
                                             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                             CAR } ;
                                       SUB ;
                                       DIP { DIP { DUP } ; SWAP ; CDR } ;
                                       PAIR }
                                     { DIP { DUP } ;
                                       SWAP ;
                                       CAR ;
                                       DIP { DIP { DUP } ;
                                             SWAP ;
                                             CDR ;
                                             DIP { DUP ;
                                                   CDR ;
                                                   PUSH int 2 ;
                                                   SWAP ;
                                                   EDIV ;
                                                   IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                                                   CAR } ;
                                             SUB } ;
                                       PAIR } ;
                                  DUP ;
                                  DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
                                  PAIR ;
                                  DIP { DIP 27 { DUP } ; DIG 27 } ;
                                  EXEC ;
                                  DUP ;
                                  DIP { DROP 5 ; DUP } ;
                                  SWAP ;
                                  CAR ;
                                  PUSH int 0 ;
                                  SWAP ;
                                  COMPARE ;
                                  GT ;
                                  DIP { DIP { DUP } ; SWAP ; CDR ; PUSH int 0 ; SWAP ; COMPARE ; GT } ;
                                  AND ;
                                  IF { PUSH string "INVALID MOVE DIAGONAL" ;
                                       LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                  (pair int (pair (int %x) (int %y)))) ;
                                       LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                                     { DIP { DUP } ;
                                       SWAP ;
                                       CAR ;
                                       PUSH int 2 ;
                                       SWAP ;
                                       COMPARE ;
                                       GT ;
                                       DIP { DIP { DUP } ; SWAP ; CDR ; PUSH int 2 ; SWAP ; COMPARE ; GT } ;
                                       OR ;
                                       IF { PUSH string "INVALID MOVE TOO FAR" ;
                                            LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                       (pair int (pair (int %x) (int %y)))) ;
                                            LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                                          { DIP 6 { DUP } ;
                                            DIG 6 ;
                                            CAR ;
                                            CAR ;
                                            PUSH int 1 ;
                                            SWAP ;
                                            COMPARE ;
                                            EQ ;
                                            DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; PUSH int 0 ; SWAP ; COMPARE ; LT } ;
                                            AND ;
                                            DIP { DIP 6 { DUP } ;
                                                  DIG 6 ;
                                                  CAR ;
                                                  CAR ;
                                                  PUSH int 2 ;
                                                  SWAP ;
                                                  COMPARE ;
                                                  EQ ;
                                                  DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; PUSH int 0 ; SWAP ; COMPARE ; GT } ;
                                                  AND } ;
                                            OR ;
                                            IF { PUSH string "INVALID MOVE BACKWARDS" ;
                                                 LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                            (pair int (pair (int %x) (int %y)))) ;
                                                 LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                                               { DIP { DUP } ;
                                                 SWAP ;
                                                 CAR ;
                                                 PUSH int 2 ;
                                                 SWAP ;
                                                 COMPARE ;
                                                 EQ ;
                                                 DIP { DIP { DUP } ; SWAP ; CDR ; PUSH int 2 ; SWAP ; COMPARE ; EQ } ;
                                                 OR ;
                                                 IF { DIP 6 { DUP } ;
                                                      DIG 6 ;
                                                      DIP { DIP 5 { DUP } ; DIG 5 } ;
                                                      PAIR ;
                                                      DIP { DIP 7 { DUP } ;
                                                            DIG 7 ;
                                                            CAR ;
                                                            CDR ;
                                                            CAR ;
                                                            DIP { DIP 4 { DUP } ; DIG 4 } ;
                                                            PAIR } ;
                                                      PAIR ;
                                                      DIP { DIP 7 { DUP } ;
                                                            DIG 7 ;
                                                            CDR ;
                                                            CAR ;
                                                            DIP { DUP } ;
                                                            PAIR ;
                                                            DIP { DIP 3 { DUP } ; DIG 3 } ;
                                                            PAIR } ;
                                                      PAIR ;
                                                      DUP ;
                                                      CDR ;
                                                      CAR ;
                                                      CDR ;
                                                      IF_LEFT
                                                        { DUP ;
                                                          IF_LEFT
                                                            { PUSH string "INVALID MOVE CANNOT JUMP OVER EMPTY CELLS" ;
                                                              LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                                         (pair int (pair (int %x) (int %y)))) ;
                                                              LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) ;
                                                              DIP { DROP } }
                                                            { DUP ;
                                                              DIP 3 { DUP } ;
                                                              DIG 3 ;
                                                              CAR ;
                                                              CAR ;
                                                              CAR ;
                                                              DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR ; CDR } ;
                                                              PAIR ;
                                                              DIP { DIP 3 { DUP } ;
                                                                    DIG 3 ;
                                                                    CAR ;
                                                                    CDR ;
                                                                    CAR ;
                                                                    DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CDR ; CDR } ;
                                                                    PAIR } ;
                                                              PAIR ;
                                                              DIP { DIP 3 { DUP } ;
                                                                    DIG 3 ;
                                                                    CDR ;
                                                                    CAR ;
                                                                    CAR ;
                                                                    DIP { DUP ; CAR } ;
                                                                    PAIR ;
                                                                    DIP { DUP ; CDR ; DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CDR } ; PAIR } ;
                                                                    PAIR } ;
                                                              PAIR ;
                                                              DUP ;
                                                              CDR ;
                                                              CDR ;
                                                              CAR ;
                                                              DUP ;
                                                              DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR ; CAR ; CAR } ;
                                                              COMPARE ;
                                                              EQ ;
                                                              IF { PUSH string "INVALID MOVE CANNOT JUMP OVER OWN PIECES" ;
                                                                   LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                                              (pair int (pair (int %x) (int %y)))) ;
                                                                   LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                                                                 { DIP { DUP } ;
                                                                   SWAP ;
                                                                   CAR ;
                                                                   CAR ;
                                                                   CDR ;
                                                                   DIP { DIP { DUP } ; SWAP ; CDR ; CAR ; CDR } ;
                                                                   PAIR ;
                                                                   DIP { DUP ; DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CDR } ; PAIR } ;
                                                                   PAIR ;
                                                                   RIGHT string ;
                                                                   LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) } ;
                                                              DUP ;
                                                              DIP { DROP 5 } } ;
                                                          DIP { DROP } }
                                                        { PUSH string "INVALID MOVE" ;
                                                          LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                                     (pair int (pair (int %x) (int %y)))) ;
                                                          LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) ;
                                                          DIP { DROP } } ;
                                                      DUP ;
                                                      DIP { DROP 2 } }
                                                    { DIP 5 { DUP } ;
                                                      DIG 5 ;
                                                      DIP { DIP 4 { DUP } ; DIG 4 } ;
                                                      PAIR ;
                                                      RIGHT
                                                        (or string
                                                            (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                                  (pair int (pair (int %x) (int %y))))) } } } } ;
                                  DUP ;
                                  DIP { DROP 11 } }
                                { DUP ;
                                  DIP 6 { DUP } ;
                                  DIG 6 ;
                                  DIP { DIP 5 { DUP } ; DIG 5 } ;
                                  PAIR ;
                                  DIP { DIP 4 { DUP } ; DIG 4 ; DIP { DUP ; CAR } ; PAIR } ;
                                  PAIR ;
                                  DIP { DUP ; CDR ; DIP { DIP 3 { DUP } ; DIG 3 } ; PAIR } ;
                                  PAIR ;
                                  DUP ;
                                  CDR ;
                                  CAR ;
                                  DIP { DUP ; CAR ; CAR ; CAR ; CAR ; CAR } ;
                                  COMPARE ;
                                  EQ ;
                                  IF { PUSH string "INVALID MOVE CELL OCCUPIED BY OWN PIECE" ;
                                       LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                  (pair int (pair (int %x) (int %y)))) ;
                                       LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) }
                                     { PUSH string "INVALID MOVE CELL OCCUPIED BY OPPONENT PIECE" ;
                                       LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                                  (pair int (pair (int %x) (int %y)))) ;
                                       LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) } ;
                                  DUP ;
                                  DIP { DROP 4 } } ;
                              DIP { DROP } }
                            { PUSH string "INVALID MOVE OUT OF BOUNDS" ;
                              LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                         (pair int (pair (int %x) (int %y)))) ;
                              LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) ;
                              DIP { DROP } } ;
                          DUP ;
                          DIP { DROP 6 } } ;
                     DUP ;
                     DIP { DROP 6 } } ;
                 DIP { DROP } }
               { PUSH string "INVALID MOVE START OUT OF BOUNDS" ;
                 LEFT (pair (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                            (pair int (pair (int %x) (int %y)))) ;
                 LEFT (pair (pair (int %x) (int %y)) (pair (int %x) (int %y))) ;
                 DIP { DROP } } ;
             DUP ;
             DIP { DROP 2 } ;
             DUP ;
             DIP { DROP 4 } } ;
         SWAP ;
         APPLY ;
         DIP { DUP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                      (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                              (pair %occupiedCell (pair (int %x) (int %y)) int))
                                          (unit %outOfBoundsCell)))
                                (pair (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                              (pair %occupiedCell (pair (int %x) (int %y)) int))
                                          (unit %outOfBoundsCell))
                                      (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                                                  (pair (pair %players
                                                           (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                                           (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                                        (address %turn)))
                                            (option %winner address))))
                          (or (or (string %invalidMove)
                                  (pair %jumpMove
                                     (pair (pair (int %x) (int %y)) (pair (int %x) (int %y)))
                                     (pair int (pair (int %x) (int %y)))))
                              (pair %stepMove (pair (int %x) (int %y)) (pair (int %x) (int %y)))))
                       (lambda
                          (pair (pair (int %x) (int %y))
                                (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                                            (pair (pair %players
                                                     (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                                     (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                                  (address %turn)))
                                      (option %winner address)))
                          (or (or (pair %emptyCell (pair (int %x) (int %y)) int)
                                  (pair %occupiedCell (pair (int %x) (int %y)) int))
                              (unit %outOfBoundsCell))))
                 (pair (pair (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                             (pair (int %x) (int %y)))
                       (pair (pair (int %x) (int %y))
                             (pair (pair (pair (map %board int (map int int)) (option %next_jump (pair (int %x) (int %y))))
                                         (pair (pair %players
                                                  (pair (pair (int %id) (address %pAddress)) (int %piecesLeft))
                                                  (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)))
                                               (address %turn)))
                                   (option %winner address)))))
           bool
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR } ;
             DUP ;
             CDR ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 } ;
             EXEC ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DIP 3 { DUP } ;
             DIG 3 ;
             CAR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DUP ; DIP { DIP 2 { DUP } ; DIG 2 } ; PAIR } ;
             PAIR ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             EXEC ;
             DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT { DROP ; PUSH bool False } { DROP ; PUSH bool True } ;
                 DIP { DROP } }
               { DROP ; PUSH bool False } ;
             DIP { DROP 7 } } ;
         SWAP ;
         APPLY ;
         DIP 4 { DUP } ;
         DIG 4 ;
         CDR ;
         DUP ;
         CDR ;
         IF_NONE { PUSH bool False } { DROP ; PUSH bool True } ;
         IF { PUSH string "GAME IS OVER" ; FAILWITH } { PUSH unit Unit } ;
         DROP ;
         DUP ;
         SENDER ;
         PAIR ;
         DUP ;
         CAR ;
         DIP { DUP } ;
         SWAP ;
         CDR ;
         NONE (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)) ;
         DIP 2 { DUP } ;
         DIG 2 ;
         DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CAR ; CAR ; CAR ; CDR } ;
         COMPARE ;
         EQ ;
         IF { DIP { DUP } ;
              SWAP ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              SOME ;
              DIP { DROP } ;
              PUSH unit Unit }
            { DIP 2 { DUP } ;
              DIG 2 ;
              DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CAR ; CDR ; CAR ; CDR } ;
              COMPARE ;
              EQ ;
              IF { DIP { DUP } ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   CAR ;
                   CDR ;
                   SOME ;
                   DIP { DROP } ;
                   PUSH unit Unit }
                 { PUSH unit Unit } } ;
         DROP ;
         DUP ;
         IF_NONE
           { PUSH unit Unit ;
             RIGHT (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)) ;
             LEFT (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)) }
           { DUP ;
             CAR ;
             CDR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR ; CDR } ;
             COMPARE ;
             EQ ;
             IF { DUP ;
                  LEFT unit ;
                  LEFT (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)) }
                { DUP ;
                  RIGHT (or (pair (pair (int %id) (address %pAddress)) (int %piecesLeft)) unit) } ;
             DIP { DROP } } ;
         DUP ;
         DIP { DROP 5 } ;
         DUP ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 DIP 9 { DUP } ;
                 DIG 9 ;
                 CAR ;
                 DIP { DUP } ;
                 PAIR ;
                 DIP { DIP 4 { DUP } ; DIG 4 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CDR ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR } ;
                 PAIR ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CDR ;
                 CAR ;
                 DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CDR } ;
                 PAIR ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DIP { DIP 13 { DUP } ; DIG 13 } ;
                 EXEC ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP { DIP 3 { DUP } ; DIG 3 } ;
                 PAIR ;
                 DIP { DIP 14 { DUP } ; DIG 14 } ;
                 EXEC ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 IF_NONE
                   { PUSH unit Unit }
                   { DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     DIP { DUP ; CAR } ;
                     COMPARE ;
                     NEQ ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; DIP { DUP ; CDR } ; COMPARE ; NEQ } ;
                     OR ;
                     IF { PUSH string "INVALID MOVE YOU MUST COMPLETE YOUR SEQUENCE OF JUMPS" ;
                          FAILWITH }
                        { PUSH unit Unit } ;
                     DIP { DROP } } ;
                 DROP ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 DIP { DIP { DUP } ; SWAP } ;
                 PAIR ;
                 DIP { DUP ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
                 PAIR ;
                 DIP { DIP 14 { DUP } ; DIG 14 } ;
                 EXEC ;
                 DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DUP ; FAILWITH }
                       { DUP ;
                         DIP 9 { DUP } ;
                         DIG 9 ;
                         DIP { DUP ; CAR ; CAR } ;
                         PAIR ;
                         DIP { DUP ; CAR ; CDR ; DIP { DUP ; CDR ; CDR } ; PAIR } ;
                         PAIR ;
                         DIP { DIP 8 { DUP } ; DIG 8 } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         CAR ;
                         CDR ;
                         DIP { DUP } ;
                         SWAP ;
                         CAR ;
                         CDR ;
                         CAR ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         CAR ;
                         CDR ;
                         CDR ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         DIP { DUP ; CAR ; CAR ; CAR } ;
                         GET ;
                         IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CAR ;
                         DIP { DUP ; PUSH int 0 ; SOME } ;
                         UPDATE ;
                         DIP { DROP } ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CDR ;
                         DIP { DUP ; SOME ; DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR } } ;
                         UPDATE ;
                         DIP { DIP { DUP } ;
                               SWAP ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               CDR } ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         DIP { DIP { DROP } } ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR } ;
                         GET ;
                         IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CAR ;
                         DIP { DUP ; PUSH int 0 ; SOME } ;
                         UPDATE ;
                         DIP { DROP } ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CDR ;
                         DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CAR } } ;
                         UPDATE ;
                         DIP { DIP 2 { DUP } ;
                               DIG 2 ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               CDR } ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DIP 3 { DROP } ;
                         DUG 2 ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         CDR ;
                         DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CAR } ;
                         GET ;
                         IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CAR ;
                         DIP { DIP 7 { DUP } ;
                               DIG 7 ;
                               CAR ;
                               CAR ;
                               CAR ;
                               CAR ;
                               CAR ;
                               SOME ;
                               DIP { DUP } } ;
                         UPDATE ;
                         DIP { DROP } ;
                         DIP 4 { DUP } ;
                         DIG 4 ;
                         CDR ;
                         DIP { DUP ; SOME ; DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR ; CAR } } ;
                         UPDATE ;
                         DIP { DIP 3 { DUP } ;
                               DIG 3 ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               CDR } ;
                         PAIR ;
                         PAIR ;
                         PAIR ;
                         DIP 4 { DROP } ;
                         DUG 3 ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         DIP { DROP 8 ; DIP 8 { DUP } ; DIG 8 ; DROP } ;
                         DIP 9 { DROP } ;
                         DUG 8 ;
                         DUP ;
                         CDR ;
                         CAR ;
                         DIP { DIP 8 { DUP } ; DIG 8 } ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DIP { DUP } ;
                         SWAP ;
                         CAR ;
                         DIP { DUP ; CAR ; CDR ; CAR ; CAR ; CAR ; CAR } ;
                         COMPARE ;
                         EQ ;
                         IF { DUP ;
                              CAR ;
                              CDR ;
                              CAR ;
                              CAR ;
                              CDR ;
                              PUSH int 1 ;
                              SWAP ;
                              SUB ;
                              DIP { DUP ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CAR ;
                                    SWAP ;
                                    CDR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    CAR } ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              DIP { DROP } ;
                              PUSH unit Unit }
                            { DUP ;
                              CAR ;
                              CDR ;
                              CAR ;
                              CDR ;
                              CDR ;
                              PUSH int 1 ;
                              SWAP ;
                              SUB ;
                              DIP { DUP ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CAR ;
                                    SWAP ;
                                    CDR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CAR ;
                                    SWAP ;
                                    CDR ;
                                    CAR } ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              DIP { DROP } ;
                              PUSH unit Unit } ;
                         DROP ;
                         DUP ;
                         DIP { DROP 2 ; DIP 8 { DUP } ; DIG 8 ; DROP } ;
                         DIP 9 { DROP } ;
                         DUG 8 ;
                         DIP 9 { DUP } ;
                         DIG 9 ;
                         DIP { DUP ; CAR ; CAR } ;
                         PAIR ;
                         DIP { DUP ; CDR ; CDR ; DIP { DIP 8 { DUP } ; DIG 8 } ; PAIR } ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         CAR ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         CDR ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         CAR ;
                         CDR ;
                         DIP { DIP { DUP } ; SWAP } ;
                         PAIR ;
                         DIP { DIP 23 { DUP } ; DIG 23 } ;
                         EXEC ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         CAR ;
                         DIP { DUP ; CAR } ;
                         ADD ;
                         DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; DIP { DUP ; CDR } ; ADD } ;
                         PAIR ;
                         DIP 3 { DUP } ;
                         DIG 3 ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         PAIR ;
                         DIP { DIP 24 { DUP } ; DIG 24 } ;
                         EXEC ;
                         DIP { DUP } ;
                         SWAP ;
                         DIP { DIP 3 { DUP } ; DIG 3 } ;
                         PAIR ;
                         DIP { DIP 25 { DUP } ; DIG 25 } ;
                         EXEC ;
                         DIP 6 { DUP } ;
                         DIG 6 ;
                         CAR ;
                         CAR ;
                         DIP { DIP { DUP } ; SWAP } ;
                         PAIR ;
                         DIP { DUP ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
                         PAIR ;
                         DIP { DIP 25 { DUP } ; DIG 25 } ;
                         EXEC ;
                         DUP ;
                         IF_LEFT
                           { DUP ;
                             IF_LEFT
                               { DIP 7 { DUP } ;
                                 DIG 7 ;
                                 DUP ;
                                 CDR ;
                                 SWAP ;
                                 CAR ;
                                 DUP ;
                                 CDR ;
                                 SWAP ;
                                 CAR ;
                                 CAR ;
                                 NONE (pair (int %x) (int %y)) ;
                                 SWAP ;
                                 PAIR ;
                                 PAIR ;
                                 PAIR ;
                                 DIP 8 { DROP } ;
                                 DUG 7 ;
                                 DROP ;
                                 PUSH unit Unit }
                               { DUP ;
                                 DUP ;
                                 CDR ;
                                 CDR ;
                                 CAR ;
                                 DIP { DUP ; CDR ; CDR ; CDR } ;
                                 PAIR ;
                                 SOME ;
                                 DIP { DIP 8 { DUP } ;
                                       DIG 8 ;
                                       DUP ;
                                       CDR ;
                                       SWAP ;
                                       CAR ;
                                       DUP ;
                                       CDR ;
                                       SWAP ;
                                       CAR ;
                                       CAR } ;
                                 SWAP ;
                                 PAIR ;
                                 PAIR ;
                                 PAIR ;
                                 DIP 9 { DROP } ;
                                 DUG 8 ;
                                 DROP 2 ;
                                 PUSH unit Unit } ;
                             DIP { DROP } }
                           { DROP ; PUSH unit Unit } ;
                         DROP ;
                         DIP 5 { DUP } ;
                         DIG 5 ;
                         DIP { DROP 8 ; DIP 8 { DUP } ; DIG 8 ; DROP } ;
                         DIP 9 { DROP } ;
                         DUG 8 ;
                         DROP 2 ;
                         PUSH unit Unit } ;
                     DIP { DROP } }
                   { DUP ;
                     DIP 8 { DUP } ;
                     DIG 8 ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     DIP { DUP ; CDR ; DIP { DIP 7 { DUP } ; DIG 7 } ; PAIR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CAR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     DIP { DUP } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PUSH bool False ;
                     SWAP ;
                     ITER { SWAP ;
                            PAIR ;
                            DUP ;
                            CDR ;
                            DUP ;
                            CAR ;
                            DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CAR } ;
                            GET ;
                            IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                            DIP { DIP { DUP } ; SWAP ; CAR } ;
                            ITER { SWAP ;
                                   PAIR ;
                                   DUP ;
                                   CAR ;
                                   DIP { DUP } ;
                                   SWAP ;
                                   CDR ;
                                   DIP { DUP } ;
                                   SWAP ;
                                   IF { DIP { DUP } ; SWAP }
                                      { DUP ;
                                        CDR ;
                                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR ; CAR } ;
                                        COMPARE ;
                                        EQ ;
                                        IF { DIP 6 { DUP } ;
                                             DIG 6 ;
                                             DIP { DUP ; CAR ; DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ; PAIR } ;
                                             PAIR ;
                                             DIP { DIP 5 { DUP } ; DIG 5 } ;
                                             PAIR ;
                                             DUP ;
                                             CAR ;
                                             CAR ;
                                             DIP { DUP } ;
                                             SWAP ;
                                             CAR ;
                                             CDR ;
                                             DIP 2 { DUP } ;
                                             DIG 2 ;
                                             CDR ;
                                             DIP { DUP } ;
                                             SWAP ;
                                             CAR ;
                                             DIP { DIP { DUP } ; SWAP ; CDR ; PUSH int 2 ; ADD } ;
                                             PAIR ;
                                             DIP 3 { DUP } ;
                                             DIG 3 ;
                                             DIP { DIP 2 { DUP } ; DIG 2 } ;
                                             PAIR ;
                                             DIP { DUP ; DIP { DIP { DUP } ; SWAP } ; PAIR } ;
                                             PAIR ;
                                             DIP { DIP 34 { DUP } ; DIG 34 } ;
                                             EXEC ;
                                             DIP 3 { DUP } ;
                                             DIG 3 ;
                                             CAR ;
                                             PUSH int 2 ;
                                             ADD ;
                                             DIP { DIP 3 { DUP } ; DIG 3 ; CDR } ;
                                             PAIR ;
                                             DIP 5 { DUP } ;
                                             DIG 5 ;
                                             DIP { DIP 4 { DUP } ; DIG 4 } ;
                                             PAIR ;
                                             DIP { DUP ; DIP { DIP 3 { DUP } ; DIG 3 } ; PAIR } ;
                                             PAIR ;
                                             DIP { DIP 36 { DUP } ; DIG 36 } ;
                                             EXEC ;
                                             DIP 5 { DUP } ;
                                             DIG 5 ;
                                             CAR ;
                                             DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; PUSH int 2 ; SWAP ; SUB } ;
                                             PAIR ;
                                             DIP 7 { DUP } ;
                                             DIG 7 ;
                                             DIP { DIP 6 { DUP } ; DIG 6 } ;
                                             PAIR ;
                                             DIP { DUP ; DIP { DIP 5 { DUP } ; DIG 5 } ; PAIR } ;
                                             PAIR ;
                                             DIP { DIP 38 { DUP } ; DIG 38 } ;
                                             EXEC ;
                                             DIP 7 { DUP } ;
                                             DIG 7 ;
                                             CAR ;
                                             PUSH int 2 ;
                                             SWAP ;
                                             SUB ;
                                             DIP { DIP 7 { DUP } ; DIG 7 ; CDR } ;
                                             PAIR ;
                                             DIP 9 { DUP } ;
                                             DIG 9 ;
                                             DIP { DIP 8 { DUP } ; DIG 8 } ;
                                             PAIR ;
                                             DIP { DUP ; DIP { DIP 7 { DUP } ; DIG 7 } ; PAIR } ;
                                             PAIR ;
                                             DIP { DIP 40 { DUP } ; DIG 40 } ;
                                             EXEC ;
                                             DIP 6 { DUP } ;
                                             DIG 6 ;
                                             DIP { DIP 4 { DUP } ; DIG 4 } ;
                                             OR ;
                                             DIP { DIP 2 { DUP } ; DIG 2 } ;
                                             OR ;
                                             DIP { DUP } ;
                                             OR ;
                                             DIP { DROP 12 } }
                                           { DIP { DUP } ; SWAP } } ;
                                   DUP ;
                                   DIP { DROP 4 } } ;
                            DIP { DROP 2 } } ;
                     DIP { DROP 3 } ;
                     IF { PUSH string "INVALID MOVE YOU MUST JUMP IF THERE ARE JUMPS" ; FAILWITH }
                        { PUSH unit Unit } ;
                     DROP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DUP ; CAR ; CAR ; CAR } ;
                     GET ;
                     IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     DIP { DUP ; PUSH int 0 ; SOME } ;
                     UPDATE ;
                     DIP { DROP } ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     DIP { DUP ; SOME ; DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR } } ;
                     UPDATE ;
                     DIP { DIP { DUP } ;
                           SWAP ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CDR } ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     DIP { DIP { DROP } } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CAR } ;
                     GET ;
                     IF_NONE { PUSH string "GET_FORCE" ; FAILWITH } {} ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR ; SOME ; DIP { DUP } } ;
                     UPDATE ;
                     DIP { DROP } ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     DIP { DUP ; SOME ; DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CAR ; CAR } } ;
                     UPDATE ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           DUP ;
                           CDR ;
                           SWAP ;
                           CAR ;
                           CDR } ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DIP 3 { DROP } ;
                     DUG 2 ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP { DROP 7 ; DIP 7 { DUP } ; DIG 7 ; DROP } ;
                     DIP 8 { DROP } ;
                     DUG 7 ;
                     DROP 2 ;
                     PUSH unit Unit } ;
                 DROP ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CAR ; CAR ; CAR ; CDR } ;
                 COMPARE ;
                 EQ ;
                 DIP { DIP 5 { DUP } ;
                       DIG 5 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       CDR ;
                       CDR ;
                       PUSH int 0 ;
                       SWAP ;
                       COMPARE ;
                       EQ } ;
                 AND ;
                 DIP { DIP 5 { DUP } ;
                       DIG 5 ;
                       CAR ;
                       CDR ;
                       CDR ;
                       DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CAR ; CDR ; CAR ; CDR } ;
                       COMPARE ;
                       EQ ;
                       DIP { DIP 5 { DUP } ;
                             DIG 5 ;
                             CAR ;
                             CDR ;
                             CAR ;
                             CAR ;
                             CDR ;
                             PUSH int 0 ;
                             SWAP ;
                             COMPARE ;
                             EQ } ;
                       AND } ;
                 OR ;
                 IF { DIP 5 { DUP } ;
                      DIG 5 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      SOME ;
                      DIP { DIP 5 { DUP } ; DIG 5 ; CAR } ;
                      SWAP ;
                      PAIR ;
                      DIP 6 { DROP } ;
                      DUG 5 ;
                      PUSH unit Unit }
                    { DIP 5 { DUP } ;
                      DIG 5 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      IF_NONE
                        { DIP 5 { DUP } ;
                          DIG 5 ;
                          DUP ;
                          CAR ;
                          CDR ;
                          CDR ;
                          DIP { DUP ; CAR ; CDR ; CAR ; CAR ; CAR ; CDR } ;
                          COMPARE ;
                          EQ ;
                          IF { DUP ; CAR ; CDR ; CAR ; CDR ; CAR ; CDR }
                             { DUP ; CAR ; CDR ; CAR ; CAR ; CAR ; CDR } ;
                          DIP { DUP ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DIP { DROP } ;
                          DUP ;
                          DIP { DROP ; DIP 5 { DUP } ; DIG 5 ; DROP } ;
                          DIP 6 { DROP } ;
                          DUG 5 ;
                          PUSH unit Unit }
                        { DROP ; PUSH unit Unit } } ;
                 DROP ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 DIP { DROP 9 ; DIP 4 { DUP } ; DIG 4 ; DROP } ;
                 DIP 5 { DROP } ;
                 DUG 4 ;
                 DROP 2 ;
                 PUSH unit Unit }
               { PUSH string "YOU ARE NOT A PLAYER" ; FAILWITH } ;
             DIP { DROP } }
           { PUSH string "NOT YOUR TURN" ; FAILWITH } ;
         DROP ;
         DIP { DUP } ;
         SWAP ;
         NIL operation ;
         PAIR ;
         DIP { DROP 7 } } }
