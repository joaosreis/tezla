{ parameter
    (or (or (or (unit %addLiquidity) (nat %borrow))
            (or (unit %deposit) (pair %getBalanceOf (address %0) (contract %1 mutez))))
        (or (or (pair %getExchangeRate (unit %0) (contract %1 nat)) (unit %repayBorrow))
            (or (nat %updateCollateralRate) (nat %withdraw)))) ;
  storage
    (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                      (nat %collateralRate))
                (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                      (mutez %liquidity)))
          (pair (pair (address %owner)
                      (pair %token
                         (pair (address %contractAddress) (nat %tokenDecimals))
                         (nat %tokenSupply)))
                (pair (mutez %totalBorrows) (mutez %totalDeposits)))) ;
  code { LAMBDA nat mutez { DUP ; PUSH mutez 1000000 ; SWAP ; MUL ; DIP { DROP } } ;
         LAMBDA
           mutez
           nat
           { DUP ;
             PUSH mutez 1000000 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP } } ;
         DUP ;
         LAMBDA nat int { DUP ; PUSH int 0 ; ADD ; DIP { DROP } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           int
           nat
           { DUP ;
             PUSH nat 0 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             PUSH int 0 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF { DUP ; DIP 2 { DUP } ; DIG 2 ; ABS ; SWAP ; CDR ; SWAP ; PAIR }
                { PUSH string "Not posible to convert from negative values" ; FAILWITH } ;
             DUP ;
             CAR ;
             DIP { DROP 3 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (int %0) (int %1))
           int
           { DUP ;
             CAR ;
             DIP { DUP ; CDR } ;
             PAIR ;
             PUSH int 1 ;
             SWAP ;
             PAIR ;
             PUSH (lambda
                     (pair (pair (int %baseNumber) (int %exponent)) (int %result))
                     (pair (bool %0) (pair %1 (pair (int %baseNumber) (int %exponent)) (int %result))))
                  { {} ;
                    {} ;
                    {} ;
                    { { { { { DUP ; DIP { {} } } ; CAR } ; DIP { {} } } ; CDR } ;
                      { { { DUP ; DIP { { {} ; PUSH int 0 } } } ; { COMPARE ; NEQ } } ;
                        IF { { { { { { { { { DIP { DUP } ; SWAP } ; DIP { {} } } ; CDR } ;
                                       DIP { { { { { { { DIP { DUP } ; SWAP } ; DIP { {} } } ; CAR } ;
                                                   DIP { {} } } ;
                                                 CAR } ;
                                               DIP { {} } } } } ;
                                     MUL } ;
                                   { { {} ;
                                       { DIP 2 { DUP } ; DIG 2 } ;
                                       {} ;
                                       { {} ;
                                         { DIP 3 { DUP } ; DIG 3 } ;
                                         {} ;
                                         { DIP 2 { DUP } ; DIG 2 } ;
                                         {} ;
                                         { DIP { { DUP ; CAR ; SWAP ; CDR } ; DROP } ; { SWAP ; PAIR } } ;
                                         {} } ;
                                       {} ;
                                       DIP { DROP } ;
                                       {} } ;
                                     { { { { DIP 2 { DUP } ; DIG 2 } ; DIP { { {} ; PUSH int 1 } } } ;
                                         SUB } ;
                                       { {} ;
                                         { DIP { DUP } ; SWAP } ;
                                         {} ;
                                         { {} ;
                                           { DIP 2 { DUP } ; DIG 2 } ;
                                           {} ;
                                           { DIP 2 { DUP } ; DIG 2 } ;
                                           {} ;
                                           { DIP { { DUP ; CDR ; SWAP ; CAR } } ;
                                             { DIP { { DUP ; CAR ; SWAP ; CDR } ; DROP } ; { SWAP ; PAIR } } ;
                                             PAIR } ;
                                           {} } ;
                                         {} ;
                                         DIP { DROP } ;
                                         {} } ;
                                       {} ;
                                       DIP { DROP } } ;
                                     {} ;
                                     DIP { DROP } } ;
                                   {} ;
                                   DIP { DROP } } ;
                                 DIP { {} } } ;
                               { PUSH bool True ; PAIR } } }
                           { { { { DIP { DUP } ; SWAP } ; DIP { {} } } ;
                               { PUSH bool False ; PAIR } } } } ;
                      {} ;
                      DIP { DROP } } ;
                    {} ;
                    DIP { DROP } ;
                    {} } ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
             SWAP ;
             DROP ;
             DUP ;
             CDR ;
             DIP { DROP 2 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         NIL operation ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda (pair (int %0) (int %1)) int)
                       (pair (lambda int nat) (pair (lambda nat int) (lambda mutez nat))))
                 (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                   (nat %collateralRate))
                             (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                   (mutez %liquidity)))
                       (pair (pair (address %owner)
                                   (pair %token
                                      (pair (address %contractAddress) (nat %tokenDecimals))
                                      (nat %tokenSupply)))
                             (pair (mutez %totalBorrows) (mutez %totalDeposits)))))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             PUSH nat 1 ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 ; DIP { DIP { DUP } ; SWAP } ; PAIR } ;
             PAIR ;
             DIP { DUP ; DIP { DIP 4 { DUP } ; DIG 4 } ; PAIR } ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CAR ;
             CDR ;
             CDR ;
             PUSH nat 1 ;
             SWAP ;
             COMPARE ;
             GE ;
             IF { DIP { DUP } ;
                  SWAP ;
                  CDR ;
                  CAR ;
                  CDR ;
                  CDR ;
                  DIP { DIP { DUP } ;
                        SWAP ;
                        CDR ;
                        CAR ;
                        CDR ;
                        CAR ;
                        CDR ;
                        DIP { DIP 4 { DUP } ; DIG 4 } ;
                        EXEC ;
                        PUSH int 10 ;
                        PAIR ;
                        DIP { DIP 2 { DUP } ; DIG 2 } ;
                        EXEC ;
                        DIP { DIP 3 { DUP } ; DIG 3 } ;
                        EXEC } ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 2 { DUP } ;
                  DIG 2 ;
                  CDR ;
                  CDR ;
                  CDR ;
                  DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CDR ; CAR } ;
                  ADD ;
                  DIP { DIP 6 { DUP } ; DIG 6 } ;
                  EXEC ;
                  DIP { DUP } ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 2 { DUP } ;
                  DIG 2 ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                  PAIR ;
                  PAIR ;
                  PAIR ;
                  DIP { DROP 2 } }
                { DUP } ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             DIP { DROP 7 } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (nat %collateralRate))
                       (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (mutez %liquidity)))
                 (pair (pair (address %owner)
                             (pair %token
                                (pair (address %contractAddress) (nat %tokenDecimals))
                                (nat %tokenSupply)))
                       (pair (mutez %totalBorrows) (mutez %totalDeposits))))
           nat
           { DUP ;
             DUP ;
             PUSH nat 1 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CDR ;
             CDR ;
             DIP { DIP { DUP } ; SWAP ; CDR ; CDR ; CAR } ;
             ADD ;
             PUSH mutez 0 ;
             SWAP ;
             COMPARE ;
             GT ;
             IF { DIP { DUP } ;
                  SWAP ;
                  CDR ;
                  CDR ;
                  CAR ;
                  DIP { DIP { DUP } ;
                        SWAP ;
                        CDR ;
                        CDR ;
                        CDR ;
                        DIP { DIP { DUP } ; SWAP ; CDR ; CDR ; CAR } ;
                        ADD } ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP { DUP } ;
                  SWAP ;
                  CDR ;
                  DIP { DUP } ;
                  SWAP ;
                  PAIR ;
                  DIP { DROP } }
                { DUP } ;
             DUP ;
             CAR ;
             DIP { DROP 3 ; PUSH nat 20 } ;
             MUL ;
             PUSH nat 2 ;
             ADD ;
             DIP { DROP } } ;
         DUP ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (nat %collateralRate))
                                (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (mutez %liquidity)))
                          (pair (pair (address %owner)
                                      (pair %token
                                         (pair (address %contractAddress) (nat %tokenDecimals))
                                         (nat %tokenSupply)))
                                (pair (mutez %totalBorrows) (mutez %totalDeposits))))
                    nat)
                 (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                   (nat %collateralRate))
                             (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                   (mutez %liquidity)))
                       (pair (pair (address %owner)
                                   (pair %token
                                      (pair (address %contractAddress) (nat %tokenDecimals))
                                      (nat %tokenSupply)))
                             (pair (mutez %totalBorrows) (mutez %totalDeposits)))))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             EXEC ;
             DIP { DUP ;
                   DUP ;
                   PUSH nat 1 ;
                   PAIR ;
                   DIP { DUP } ;
                   SWAP ;
                   CDR ;
                   CDR ;
                   CDR ;
                   DIP { DIP { DUP } ; SWAP ; CDR ; CDR ; CAR } ;
                   ADD ;
                   PUSH mutez 0 ;
                   SWAP ;
                   COMPARE ;
                   GT ;
                   IF { DIP { DUP } ;
                        SWAP ;
                        CDR ;
                        CDR ;
                        CAR ;
                        DIP { DIP { DUP } ;
                              SWAP ;
                              CDR ;
                              CDR ;
                              CDR ;
                              DIP { DIP { DUP } ; SWAP ; CDR ; CDR ; CAR } ;
                              ADD } ;
                        EDIV ;
                        IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                        CAR ;
                        DIP { DUP } ;
                        SWAP ;
                        CDR ;
                        DIP { DUP } ;
                        SWAP ;
                        PAIR ;
                        DIP { DROP } }
                      { DUP } ;
                   DUP ;
                   CAR ;
                   DIP { DROP 3 } } ;
             MUL ;
             DIP { DROP 2 } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                 DUP ;
                                 DIP { PAIR } ;
                                 SWAP } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (or %0
                    (or (or (or (address %addOwner) (pair %approve (address %0) (nat %1)))
                            (or (nat %burn) (pair %burnTo (address %0) (nat %1))))
                        (or (or (pair %decimals (unit %0) (contract %1 nat))
                                (pair %getAllowance (pair (address %0) (address %1)) (contract %2 nat)))
                            (or (pair %getBalance (address %0) (contract %1 nat))
                                (pair %getTotalSupply (unit %0) (contract %1 nat)))))
                    (or (or (or (nat %mint) (pair %mintTo (address %0) (nat %1)))
                            (or (pair %name (unit %0) (contract %1 string))
                                (pair %symbol (unit %0) (contract %1 string))))
                        (pair %transfer (pair (address %0) (address %1)) (nat %2))))
                 (pair %1
                    (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                (nat %collateralRate))
                          (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                (mutez %liquidity)))
                    (pair (pair (address %owner)
                                (pair %token
                                   (pair (address %contractAddress) (nat %tokenDecimals))
                                   (nat %tokenSupply)))
                          (pair (mutez %totalBorrows) (mutez %totalDeposits)))))
           operation
           { DUP ;
             CDR ;
             CDR ;
             CAR ;
             CDR ;
             CAR ;
             CAR ;
             CONTRACT
               (or (or (or (or (address %addOwner) (pair %approve (address %0) (nat %1)))
                           (or (nat %burn) (pair %burnTo (address %0) (nat %1))))
                       (or (or (pair %decimals (unit %0) (contract %1 nat))
                               (pair %getAllowance (pair (address %0) (address %1)) (contract %2 nat)))
                           (or (pair %getBalance (address %0) (contract %1 nat))
                               (pair %getTotalSupply (unit %0) (contract %1 nat)))))
                   (or (or (or (nat %mint) (pair %mintTo (address %0) (nat %1)))
                           (or (pair %name (unit %0) (contract %1 string))
                               (pair %symbol (unit %0) (contract %1 string))))
                       (pair %transfer (pair (address %0) (address %1)) (nat %2)))) ;
             IF_NONE
               { PUSH string "Contract not found." ; FAILWITH }
               { DUP ; DIP { DROP } } ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             DIP { DUP ; PUSH mutez 0 } ;
             TRANSFER_TOKENS ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                            (nat %collateralRate))
                                      (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                            (mutez %liquidity)))
                                (pair (pair (address %owner)
                                            (pair %token
                                               (pair (address %contractAddress) (nat %tokenDecimals))
                                               (nat %tokenSupply)))
                                      (pair (mutez %totalBorrows) (mutez %totalDeposits))))
                          nat)
                       (pair (lambda (pair (int %0) (int %1)) int) (pair (lambda int nat) (lambda nat int))))
                 (pair (mutez %0)
                       (pair %1
                          (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (nat %collateralRate))
                                (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (mutez %liquidity)))
                          (pair (pair (address %owner)
                                      (pair %token
                                         (pair (address %contractAddress) (nat %tokenDecimals))
                                         (nat %tokenSupply)))
                                (pair (mutez %totalBorrows) (mutez %totalDeposits))))))
           (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (nat %collateralRate))
                       (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (mutez %liquidity)))
                 (pair (pair (address %owner)
                             (pair %token
                                (pair (address %contractAddress) (nat %tokenDecimals))
                                (nat %tokenSupply)))
                       (pair (mutez %totalBorrows) (mutez %totalDeposits))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             SENDER ;
             GET ;
             IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             PUSH int 365 ;
             PUSH int 522119 ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             NOW ;
             SUB ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DUP ; DIP { DIP 7 { DUP } ; DIG 7 } ; PAIR } ;
             PAIR ;
             DIP { DIP 9 { DUP } ;
                   DIG 9 ;
                   PUSH mutez 0 ;
                   SWAP ;
                   PAIR ;
                   DIP { DIP 10 { DUP } ; DIG 10 ; DIP { DIP 8 { DUP } ; DIG 8 } ; PAIR } ;
                   PAIR } ;
             PAIR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             COMPARE ;
             GT ;
             IF { DIP { DUP } ;
                  SWAP ;
                  DIP { DIP 2 { DUP } ; DIG 2 } ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  CDR ;
                  DIP { DIP 9 { DUP } ; DIG 9 } ;
                  EXEC ;
                  PUSH nat 100 ;
                  SWAP ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP { DIP 12 { DUP } ; DIG 12 } ;
                  EXEC ;
                  DIP { DUP } ;
                  SWAP ;
                  PUSH int 365 ;
                  SWAP ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 6 { DUP } ;
                  DIG 6 ;
                  CAR ;
                  CDR ;
                  DIP { DIP { DUP } ;
                        SWAP ;
                        PUSH int 1 ;
                        ADD ;
                        DIP { DUP } ;
                        PAIR ;
                        DIP { DIP 12 { DUP } ; DIG 12 } ;
                        EXEC ;
                        DIP { DIP 13 { DUP } ; DIG 13 } ;
                        EXEC } ;
                  MUL ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ;
                        CDR ;
                        SWAP ;
                        CAR ;
                        DUP ;
                        CAR ;
                        SWAP ;
                        CDR ;
                        DUP ;
                        CDR ;
                        SWAP ;
                        CAR ;
                        CAR } ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  DIP { DROP 4 } }
                { DUP } ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             CDR ;
             DIP { DROP 5 } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             ADD ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             ADD ;
             NOW ;
             PAIR ;
             SOME ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CDR ; CAR } ;
             SENDER ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CDR ;
             CDR ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             ADD ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             ADD ;
             DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             CDR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             ADD ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DROP 12 } } ;
         SWAP ;
         APPLY ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ;
                                             DUP ;
                                             DIP { PAIR } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           DUP ;
                           DIP { PAIR } ;
                           SWAP } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                            (nat %collateralRate))
                                      (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                            (mutez %liquidity)))
                                (pair (pair (address %owner)
                                            (pair %token
                                               (pair (address %contractAddress) (nat %tokenDecimals))
                                               (nat %tokenSupply)))
                                      (pair (mutez %totalBorrows) (mutez %totalDeposits))))
                          nat)
                       (pair (lambda (pair (int %0) (int %1)) int) (pair (lambda int nat) (lambda nat int))))
                 (pair (mutez %0)
                       (pair %1
                          (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (nat %collateralRate))
                                (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                                      (mutez %liquidity)))
                          (pair (pair (address %owner)
                                      (pair %token
                                         (pair (address %contractAddress) (nat %tokenDecimals))
                                         (nat %tokenSupply)))
                                (pair (mutez %totalBorrows) (mutez %totalDeposits))))))
           (pair (pair (pair (big_map %borrows address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (nat %collateralRate))
                       (pair (big_map %deposits address (pair (timestamp %blockTimestamp) (mutez %tezAmount)))
                             (mutez %liquidity)))
                 (pair (pair (address %owner)
                             (pair %token
                                (pair (address %contractAddress) (nat %tokenDecimals))
                                (nat %tokenSupply)))
                       (pair (mutez %totalBorrows) (mutez %totalDeposits))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             SENDER ;
             GET ;
             IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
             DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             PUSH int 365 ;
             PUSH int 522119 ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             NOW ;
             SUB ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DIP { DUP ; DIP { DIP 7 { DUP } ; DIG 7 } ; PAIR } ;
             PAIR ;
             DIP { DIP 9 { DUP } ;
                   DIG 9 ;
                   PUSH mutez 0 ;
                   SWAP ;
                   PAIR ;
                   DIP { DIP 10 { DUP } ; DIG 10 ; DIP { DIP 8 { DUP } ; DIG 8 } ; PAIR } ;
                   PAIR } ;
             PAIR ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             COMPARE ;
             GT ;
             IF { DIP { DUP } ;
                  SWAP ;
                  DIP { DIP 2 { DUP } ; DIG 2 } ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  CDR ;
                  DIP { DIP 9 { DUP } ; DIG 9 } ;
                  EXEC ;
                  PUSH nat 100 ;
                  SWAP ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP { DIP 12 { DUP } ; DIG 12 } ;
                  EXEC ;
                  DIP { DUP } ;
                  SWAP ;
                  PUSH int 365 ;
                  SWAP ;
                  EDIV ;
                  IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                  CAR ;
                  DIP 6 { DUP } ;
                  DIG 6 ;
                  CAR ;
                  CDR ;
                  DIP { DIP { DUP } ;
                        SWAP ;
                        PUSH int 1 ;
                        ADD ;
                        DIP { DUP } ;
                        PAIR ;
                        DIP { DIP 12 { DUP } ; DIG 12 } ;
                        EXEC ;
                        DIP { DIP 13 { DUP } ; DIG 13 } ;
                        EXEC } ;
                  MUL ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ;
                        CDR ;
                        SWAP ;
                        CAR ;
                        DUP ;
                        CAR ;
                        SWAP ;
                        CDR ;
                        DUP ;
                        CDR ;
                        SWAP ;
                        CAR ;
                        CAR } ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  DIP { DROP 4 } }
                { DUP } ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             CDR ;
             DIP { DROP 5 } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             ADD ;
             DIP { DIP 4 { DUP } ; DIG 4 } ;
             ADD ;
             NOW ;
             PAIR ;
             SOME ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR ; CAR } ;
             SENDER ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
             PAIR ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             CDR ;
             CAR ;
             DIP { DIP 2 { DUP } ; DIG 2 } ;
             ADD ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             ADD ;
             DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DUP ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             CDR ;
             DIP { DIP 6 { DUP } ; DIG 6 } ;
             SUB ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             DIP { DROP 12 } } ;
         SWAP ;
         APPLY ;
         DIP 12 { DUP } ;
         DIG 12 ;
         CDR ;
         DIP 13 { DUP } ;
         DIG 13 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIP 3 { DUP } ;
                     DIG 3 ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     DIP { PUSH mutez 0 ; AMOUNT ; COMPARE ; EQ } ;
                     OR ;
                     IF { PUSH string "There was a problem trying to add liquidity" ; FAILWITH }
                        { DIP { DUP } ;
                          SWAP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          AMOUNT ;
                          ADD ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DROP 2 } } ;
                     DIP 13 { DUP } ;
                     DIG 13 ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DROP 4 } }
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "No amount to borrow!" ; FAILWITH } { PUSH unit Unit } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 8 { DUP } ; DIG 8 } ;
                     EXEC ;
                     DUP ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 8 { DUP } ; DIG 8 } ;
                     EXEC ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     DIP { DUP } ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     CDR ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     CDR ;
                     DIP { DIP 21 { DUP } ; DIG 21 } ;
                     EXEC ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           CDR ;
                           CAR ;
                           CAR ;
                           CDR ;
                           DIP { DIP 21 { DUP } ; DIG 21 } ;
                           EXEC } ;
                     MUL ;
                     PUSH int 100 ;
                     SWAP ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DUP } ;
                     SUB ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     DIP { DIP 24 { DUP } ; DIG 24 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     LE ;
                     DIP { DUP ;
                           DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CAR ; CDR ; CDR } ;
                           COMPARE ;
                           GE } ;
                     OR ;
                     IF { PUSH string "Amount is greater than liquidity!" ; FAILWITH }
                        { PUSH unit Unit } ;
                     DROP 6 ;
                     UNIT ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP { DIP 21 { DUP } ; DIG 21 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     PAIR ;
                     DIP { DIP 11 { DUP } ; DIG 11 } ;
                     EXEC ;
                     SENDER ;
                     CONTRACT unit ;
                     IF_NONE
                       { PUSH string "Not a contract" ; FAILWITH }
                       { DUP ; DIP { DROP } } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP { DUP } ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     PAIR ;
                     DIP { DROP 11 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "No tez transferred!" ; FAILWITH } { PUSH unit Unit } ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     AMOUNT ;
                     PAIR ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     EXEC ;
                     DIP 16 { DUP } ;
                     DIG 16 ;
                     AMOUNT ;
                     EXEC ;
                     DIP { DUP ; DIP { DIP 11 { DUP } ; DIG 11 } ; EXEC } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DIP 15 { DUP } ; DIG 15 } ;
                     EXEC ;
                     DIP { DUP ;
                           CDR ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CDR ;
                           DIP { DIP 15 { DUP } ; DIG 15 } ;
                           EXEC ;
                           PUSH int 10 ;
                           PAIR ;
                           DIP { DIP 13 { DUP } ; DIG 13 } ;
                           EXEC } ;
                     MUL ;
                     DUP ;
                     DIP { DIP 15 { DUP } ; DIG 15 } ;
                     EXEC ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP { DUP } ;
                     ADD ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     SENDER ;
                     PAIR ;
                     RIGHT nat ;
                     LEFT (or (pair (unit %0) (contract %1 string)) (pair (unit %0) (contract %1 string))) ;
                     LEFT (pair (pair (address %0) (address %1)) (nat %2)) ;
                     RIGHT
                       (or (or (or address (pair (address %0) (nat %1))) (or nat (pair (address %0) (nat %1))))
                           (or (or (pair (unit %0) (contract %1 nat))
                                   (pair (pair (address %0) (address %1)) (contract %2 nat)))
                               (or (pair (address %0) (contract %1 nat)) (pair (unit %0) (contract %1 nat))))) ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP 12 { DUP } ; DIG 12 } ;
                     EXEC ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DROP 8 } }
                   { DUP ;
                     DUP ;
                     CAR ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     DIP { DIP 4 { DUP } ; DIG 4 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     NIL operation ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     DIP { DIP { DUP } ; SWAP ; CDR ; CAR ; CDR ; CAR } ;
                     GET ;
                     IF_NONE
                       { PUSH string "Account address not found" ; FAILWITH }
                       { DUP ;
                         CDR ;
                         DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR ; PUSH mutez 0 } ;
                         TRANSFER_TOKENS ;
                         NIL operation ;
                         SWAP ;
                         CONS ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         CAR ;
                         DIP { DUP } ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DUP ;
                     CDR ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                     PAIR ;
                     DIP { DROP 5 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CDR ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DIP { DIP 10 { DUP } ; DIG 10 } ;
                     EXEC ;
                     DIP { DUP ; CAR ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     DIP { DROP 2 } }
                   { PUSH mutez 0 ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "No tez transferred!" ; FAILWITH } { PUSH unit Unit } ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     EXEC ;
                     DUP ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 6 { DUP } ; DIG 6 } ;
                     EXEC ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CDR ;
                     DIP { DIP 18 { DUP } ; DIG 18 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DUP ;
                     AMOUNT ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "Amount to pay is greater than existing borrow amount!" ;
                          FAILWITH }
                        { PUSH unit Unit } ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     CDR ;
                     AMOUNT ;
                     SWAP ;
                     SUB ;
                     NOW ;
                     PAIR ;
                     SOME ;
                     DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR ; CAR } ;
                     SENDER ;
                     UPDATE ;
                     DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     AMOUNT ;
                     SWAP ;
                     SUB ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     AMOUNT ;
                     ADD ;
                     DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     DIP 20 { DUP } ;
                     DIG 20 ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DROP 11 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string
                               "You must be the owner of the contract to update the collateral ratio" ;
                          FAILWITH }
                        { DUP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          CDR ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          CAR ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          CDR ;
                          SWAP ;
                          PAIR } ;
                     DIP 13 { DUP } ;
                     DIG 13 ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     DIP { DROP 4 } }
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "No amount to withdraw!" ; FAILWITH } { PUSH unit Unit } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 8 { DUP } ; DIG 8 } ;
                     EXEC ;
                     DUP ;
                     PUSH mutez 0 ;
                     PAIR ;
                     DIP { DIP 8 { DUP } ; DIG 8 } ;
                     EXEC ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     DIP { DUP } ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     CDR ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     CDR ;
                     DIP { DIP 21 { DUP } ; DIG 21 } ;
                     EXEC ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           CDR ;
                           CAR ;
                           CAR ;
                           CDR ;
                           DIP { DIP 21 { DUP } ; DIG 21 } ;
                           EXEC } ;
                     MUL ;
                     PUSH int 100 ;
                     SWAP ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DUP } ;
                     SUB ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     DIP { DIP 24 { DUP } ; DIG 24 } ;
                     EXEC ;
                     DIP { DUP } ;
                     SWAP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     LE ;
                     DIP { DUP ;
                           DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CAR ; CDR ; CDR } ;
                           COMPARE ;
                           GE } ;
                     OR ;
                     IF { PUSH string "Amount is greater than liquidity!" ; FAILWITH }
                        { PUSH unit Unit } ;
                     DROP 6 ;
                     UNIT ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP { DIP { DUP } ; SWAP ; DIP { DIP 15 { DUP } ; DIG 15 } ; EXEC } ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP { DIP { DUP } ;
                           SWAP ;
                           CDR ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CDR ;
                           DIP { DIP 19 { DUP } ; DIG 19 } ;
                           EXEC ;
                           PUSH int 10 ;
                           PAIR ;
                           DIP { DIP 17 { DUP } ; DIG 17 } ;
                           EXEC } ;
                     MUL ;
                     DUP ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP { DUP } ;
                     SUB ;
                     DIP { DIP 20 { DUP } ; DIG 20 } ;
                     EXEC ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     SENDER ;
                     PAIR ;
                     RIGHT nat ;
                     RIGHT (or address (pair (address %0) (nat %1))) ;
                     LEFT (or (or (pair (unit %0) (contract %1 nat))
                                  (pair (pair (address %0) (address %1)) (contract %2 nat)))
                              (or (pair (address %0) (contract %1 nat)) (pair (unit %0) (contract %1 nat)))) ;
                     LEFT (or (or (or nat (pair (address %0) (nat %1)))
                                  (or (pair (unit %0) (contract %1 string)) (pair (unit %0) (contract %1 string))))
                              (pair (pair (address %0) (address %1)) (nat %2))) ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP 16 { DUP } ; DIG 16 } ;
                     EXEC ;
                     DIP 9 { DUP } ;
                     DIG 9 ;
                     DIP { DIP 26 { DUP } ; DIG 26 } ;
                     EXEC ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     GET ;
                     IF_NONE { PUSH mutez 0 ; NOW ; PAIR } { DUP ; DIP { DROP } } ;
                     CDR ;
                     DIP { DIP { DUP } ; SWAP } ;
                     SUB ;
                     NOW ;
                     PAIR ;
                     SOME ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CDR ; CAR } ;
                     SENDER ;
                     UPDATE ;
                     DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     SUB ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     SUB ;
                     DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SENDER ;
                     CONTRACT unit ;
                     IF_NONE
                       { PUSH string "Not a contract" ; FAILWITH }
                       { DUP ; DIP { DROP } } ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP { DUP } ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     DIP { DUP ; NIL operation ; SWAP ; CONS } ;
                     CONS ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     PAIR ;
                     DIP { DROP 18 } } ;
                 DIP { DROP } } ;
             DIP { DROP } } ;
         DIP { DROP 14 } } }
