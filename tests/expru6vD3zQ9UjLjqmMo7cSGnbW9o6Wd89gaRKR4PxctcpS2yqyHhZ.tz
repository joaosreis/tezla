{ parameter
    (or (or (or (address %expectAddress) (unit %triggerFailWith))
            (or (unit %triggerShiftOverflow)
                (or (pair %voidEP (bool %voidParam) (lambda %voidResProxy bool bool))
                    (unit %triggerFailWithCustomError))))
        (or (or (unit %triggerFailWithCustomErrorUnit1)
                (or (unit %triggerFailWithCustomErrorUnit2)
                    (unit %triggerFailWithCustomErrorNoArg)))
            (or (unit %triggerFailWithRightCombedPair)
                (or (unit %triggerFailWithChainIdStr) (unit %triggerFailWithChainIdBytes))))) ;
  storage unit ;
  code { CAST (pair (or (or (or address unit) (or unit (or (pair bool (lambda bool bool)) unit)))
                        (or (or unit (or unit unit)) (or unit (or unit unit))))
                    unit) ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DROP ; UNIT ; NIL operation ; PAIR }
                   { DROP ; PUSH string "oops" ; FAILWITH } }
               { IF_LEFT
                   { DROP ;
                     PUSH nat 257 ;
                     PUSH nat 1 ;
                     LSL ;
                     DROP ;
                     UNIT ;
                     NIL operation ;
                     PAIR }
                   { IF_LEFT
                       { UNPAIR ;
                         SWAP ;
                         DIP { NOT } ;
                         SWAP ;
                         EXEC ;
                         PUSH string "VoidResult" ;
                         PAIR ;
                         FAILWITH }
                       { DROP ; PUSH nat 1 ; PUSH string "CustomError" ; PAIR ; FAILWITH } } } }
           { IF_LEFT
               { IF_LEFT
                   { DROP ; UNIT ; PUSH string "CustomErrorUnit1" ; PAIR ; FAILWITH }
                   { IF_LEFT
                       { DROP ; UNIT ; PUSH string "CustomErrorUnit2" ; PAIR ; FAILWITH }
                       { DROP ; PUSH string "CustomErrorNoArg" ; FAILWITH } } }
               { IF_LEFT
                   { DROP ; PUSH (pair nat nat nat) { 1 ; 2 ; 3 } ; FAILWITH }
                   { IF_LEFT
                       { DROP ; PUSH string "NetXUdfLh6Gm88t" ; FAILWITH }
                       { DROP ; PUSH bytes 0x30783435386161383337 ; FAILWITH } } } } } }
