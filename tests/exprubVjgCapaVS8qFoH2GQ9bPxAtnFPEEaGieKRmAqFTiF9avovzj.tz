{ parameter
    (or (or (string %add_idea) (unit %finalize))
        (or (address %register) (pair %vote (int %n) (int %weight)))) ;
  storage
    (pair (pair (map %idea_assets int (pair (string %desc) (int %nbvotes)))
                (set %selected_assets int))
          (map %voter_assets address int)) ;
  code { PUSH address "tz1ZAQXACaEqryobpBoLbJUc2DjG5ZzrhARu" ;
         PUSH timestamp 1595376000 ;
         LAMBDA
           (pair (pair (pair (map int (pair string int)) (set int)) (map address int)) int)
           (pair (pair string int) int)
           { DUP ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
             DUP ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             PAIR ;
             PAIR ;
             DIP { DROP 3 } } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 PUSH int 172800 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 SUB ;
                 NOW ;
                 COMPARE ;
                 LE ;
                 NOT ;
                 IF { PUSH string "require r0 failed" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH int 0 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 SIZE ;
                 INT ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 MEM ;
                 IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CDR ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 DIP { DROP 6 } ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 5 } }
               { DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 NOT ;
                 IF { PUSH string "require r4 failed" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH int 0 ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CDR ;
                 SIZE ;
                 INT ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "require r5 failed" ; FAILWITH } { PUSH unit Unit } ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PUSH int 3 ;
                 NIL int ;
                 NIL int ;
                 DIG 9 ;
                 DUP ;
                 DUG 10 ;
                 CAR ;
                 CAR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        CAR ;
                        DIG 11 ;
                        DUP ;
                        DUG 12 ;
                        PAIR ;
                        DIG 12 ;
                        DUP ;
                        DUG 13 ;
                        SWAP ;
                        EXEC ;
                        PUSH int 5 ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        COMPARE ;
                        GE ;
                        IF { DIG 1 ; DUP ; DUG 2 ; DIG 1 ; DUP ; DUG 2 ; CAR ; CDR ; CONS }
                           { DIG 1 ; DUP ; DUG 2 } ;
                        DIP { DROP 3 } } ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        CONS ;
                        DIP { DROP } } ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 NIL int ;
                 DUP ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 ITER { SWAP ;
                        PAIR ;
                        NIL int ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        SOME ;
                        PAIR ;
                        DUP ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        CAR ;
                        ITER { SWAP ;
                               PAIR ;
                               DUP ;
                               CAR ;
                               DIG 1 ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               DIG 1 ;
                               DUP ;
                               DUG 2 ;
                               CAR ;
                               IF_NONE
                                 { DIG 1 ; DUP ; DUG 2 ; CDR ; DIG 1 ; DUP ; DUG 2 ; CONS ; NONE int ; PAIR }
                                 { PUSH int 0 ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   DIG 3 ;
                                   DUP ;
                                   DUG 4 ;
                                   PAIR ;
                                   PUSH int 0 ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   DIG 11 ;
                                   DUP ;
                                   DUG 12 ;
                                   PAIR ;
                                   DIG 21 ;
                                   DUP ;
                                   DUG 22 ;
                                   SWAP ;
                                   EXEC ;
                                   DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   CDR ;
                                   DIG 12 ;
                                   DUP ;
                                   DUG 13 ;
                                   PAIR ;
                                   DIG 22 ;
                                   DUP ;
                                   DUG 23 ;
                                   SWAP ;
                                   EXEC ;
                                   DUP ;
                                   CDR ;
                                   DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   CDR ;
                                   COMPARE ;
                                   LT ;
                                   IF { DIG 2 ; DUP ; DUG 3 ; DROP ; PUSH int 1 }
                                      { DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        DIG 1 ;
                                        DUP ;
                                        DUG 2 ;
                                        CDR ;
                                        DIG 3 ;
                                        DUP ;
                                        DUG 4 ;
                                        CDR ;
                                        COMPARE ;
                                        GT ;
                                        IF { DIG 3 ; DUP ; DUG 4 ; PUSH int 1 ; NEG ; DIP { DROP } }
                                           { DIG 3 ; DUP ; DUG 4 } ;
                                        DIP { DROP } } ;
                                   DIP { DROP 4 } ;
                                   COMPARE ;
                                   LT ;
                                   IF { DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CDR ;
                                        DIG 1 ;
                                        DUP ;
                                        DUG 2 ;
                                        CONS ;
                                        DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CONS ;
                                        NONE int ;
                                        PAIR }
                                      { DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CDR ;
                                        DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CONS ;
                                        DIG 1 ;
                                        DUP ;
                                        DUG 2 ;
                                        SOME ;
                                        PAIR } ;
                                   DIP { DROP } } ;
                               DUP ;
                               DIP { DROP 4 } } ;
                        DUP ;
                        CAR ;
                        IF_NONE
                          { DUP ; CDR }
                          { DIG 1 ; DUP ; DUG 2 ; CDR ; DIG 1 ; DUP ; DUG 2 ; CONS ; DIP { DROP } } ;
                        DIP { DROP 3 } } ;
                 DUP ;
                 DIP { DROP 4 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SIZE ;
                 INT ;
                 PUSH int 0 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "head_idea: index out of bound" ; FAILWITH }
                    { PUSH unit Unit } ;
                 NIL int ;
                 PUSH int 0 ;
                 PAIR ;
                 DUP ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 4 ;
                        DUP ;
                        DUG 5 ;
                        DIG 6 ;
                        DUP ;
                        DUG 7 ;
                        COMPARE ;
                        LT ;
                        IF { DIG 5 ; DUP ; DUG 6 } { DIG 4 ; DUP ; DUG 5 } ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        COMPARE ;
                        LT ;
                        IF { DUP ;
                             CDR ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CDR ;
                             CONS ;
                             PUSH int 1 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             ADD ;
                             PAIR }
                           { DUP ; CDR ; PUSH int 1 ; DIG 2 ; DUP ; DUG 3 ; CAR ; ADD ; PAIR } ;
                        DIP { DROP 2 } } ;
                 NIL int ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        CONS ;
                        DIP { DROP } } ;
                 DUP ;
                 DIP { DROP 8 } ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        CDR ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        MEM ;
                        IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        CAR ;
                        CDR ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        PUSH bool True ;
                        SWAP ;
                        UPDATE ;
                        DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                        SWAP ;
                        PAIR ;
                        PAIR ;
                        DIP { DROP 3 } ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        DIG 1 ;
                        DUP ;
                        DUG 2 ;
                        SWAP ;
                        CDR ;
                        SWAP ;
                        PAIR ;
                        CAR ;
                        DIP { DROP 2 } } ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH int 5 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 MEM ;
                 IF { PUSH string "key already exists" ; FAILWITH } { PUSH unit Unit } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CDR ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIP { DROP 6 } ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 4 } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SENDER ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 MEM ;
                 NOT ;
                 DIP { DROP } ;
                 IF { PUSH string "require r1 failed" ; FAILWITH } { PUSH unit Unit } ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 NOW ;
                 COMPARE ;
                 LE ;
                 NOW ;
                 PUSH int 172800 ;
                 DIG 11 ;
                 DUP ;
                 DUG 12 ;
                 SUB ;
                 COMPARE ;
                 LT ;
                 AND ;
                 NOT ;
                 IF { PUSH string "require r2 failed" ; FAILWITH } { PUSH unit Unit } ;
                 SENDER ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DIP { DROP 3 } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 COMPARE ;
                 GE ;
                 NOT ;
                 IF { PUSH string "require r3 failed" ; FAILWITH } { PUSH unit Unit } ;
                 SENDER ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 CDR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 SUB ;
                 DIP { DROP } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 GET ;
                 IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 CDR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CDR ;
                 ADD ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 14 } } ;
             DIP { DROP } } ;
         DIP { DROP 5 } } }
