{ parameter
    (or (or (unit %checkTotalSupply) (unit %retrieveTotalSupply)) (nat %setTotalSupply)) ;
  storage (pair (address %fa12) (nat %totalSupply)) ;
  code { DUP ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { PUSH nat 5000000 ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "OK" ; FAILWITH } { PUSH string "KO" ; FAILWITH } }
               { NIL operation ;
                 DUP ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 CAR ;
                 CONTRACT %getTotalSupply (contract nat) ;
                 IF_NONE { PUSH string "error self" ; FAILWITH } { DUP ; DIP { DROP } } ;
                 PUSH mutez 0 ;
                 SELF ;
                 ADDRESS ;
                 CONTRACT %setTotalSupply nat ;
                 IF_NONE { PUSH string "error self" ; FAILWITH } { DUP ; DIP { DROP } } ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIP { DROP 3 } } ;
             DIP { DROP } }
           { DIG 1 ;
             DUP ;
             DUG 2 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DUP ;
             CDR ;
             NIL operation ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             NOT ;
             IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             SELF ;
             ADDRESS ;
             CONTRACT %checkTotalSupply unit ;
             IF_NONE { PUSH string "error self" ; FAILWITH } { DUP ; DIP { DROP } } ;
             PUSH mutez 0 ;
             UNIT ;
             TRANSFER_TOKENS ;
             CONS ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             CAR ;
             SWAP ;
             CAR ;
             PAIR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIP { DROP 6 } } ;
         DIP { DROP 2 } } }
