{ parameter
    (or (or (or (pair %claimProperty (map %inputs nat bytes) (address %predicate_address))
                (pair %deposit
                   (pair (nat %amount)
                         (pair %state_object (map %inputs nat bytes) (address %predicate_address)))
                   (address %token_type)))
            (or (pair %finalizeCheckpoint
                   (pair %checkpoint_property (map %inputs nat bytes) (address %predicate_address))
                   (address %token_type))
                (pair %finalizeExit
                   (pair (nat %deposited_range_id)
                         (pair %exit_property (map %inputs nat bytes) (address %predicate_address)))
                   (address %token_type))))
        (pair %submit (nat %block_number) (bytes %root))) ;
  storage
    (pair (pair (map %adjudication_storage
                   bytes
                   (pair (pair (list %challenges bytes) (timestamp %created_block))
                         (pair (nat %decision)
                               (pair %property (map %inputs nat bytes) (address %predicate_address)))))
                (pair %commitment_storage
                   (pair (map %commitments nat bytes) (nat %current_block))
                   (address %operator_address)))
          (pair (map %deposit_storages
                   address
                   (pair (pair (map %checkpoints
                                  bytes
                                  (pair (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                                        (pair %subrange (nat %end_) (nat %start_))))
                               (map %deposited_ranges nat (pair (nat %end_) (nat %start_))))
                         (nat %total_deposited)))
                (pair %events_storage
                   (map %events string (list (pair (nat %block_height) (list %data bytes))))
                   (timestamp %ts)))) ;
  code { LAMBDA
           (pair (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                 (pair %subrange (nat %end_) (nat %start_)))
           bytes
           { DUP ; PACK ; SHA256 ; DIP { DROP } } ;
         DUP ;
         LAMBDA
           (pair (lambda
                    (pair (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                          (pair %subrange (nat %end_) (nat %start_)))
                    bytes)
                 (pair (pair (pair %0
                                (pair (map %adjudication_storage
                                         bytes
                                         (pair (pair (list %challenges bytes) (timestamp %created_block))
                                               (pair (nat %decision)
                                                     (pair %property (map %inputs nat bytes) (address %predicate_address)))))
                                      (pair %commitment_storage
                                         (pair (map %commitments nat bytes) (nat %current_block))
                                         (address %operator_address)))
                                (pair (map %deposit_storages
                                         address
                                         (pair (pair (map %checkpoints
                                                        bytes
                                                        (pair (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                                                              (pair %subrange (nat %end_) (nat %start_))))
                                                     (map %deposited_ranges nat (pair (nat %end_) (nat %start_))))
                                               (nat %total_deposited)))
                                      (pair %events_storage
                                         (map %events string (list (pair (nat %block_height) (list %data bytes))))
                                         (timestamp %ts))))
                             (address %1))
                       (pair %2
                          (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                          (pair %subrange (nat %end_) (nat %start_)))))
           (pair (pair (map %adjudication_storage
                          bytes
                          (pair (pair (list %challenges bytes) (timestamp %created_block))
                                (pair (nat %decision)
                                      (pair %property (map %inputs nat bytes) (address %predicate_address)))))
                       (pair %commitment_storage
                          (pair (map %commitments nat bytes) (nat %current_block))
                          (address %operator_address)))
                 (pair (map %deposit_storages
                          address
                          (pair (pair (map %checkpoints
                                         bytes
                                         (pair (pair %state_update (map %inputs nat bytes) (address %predicate_address))
                                               (pair %subrange (nat %end_) (nat %start_))))
                                      (map %deposited_ranges nat (pair (nat %end_) (nat %start_))))
                                (nat %total_deposited)))
                       (pair %events_storage
                          (map %events string (list (pair (nat %block_height) (list %data bytes))))
                          (timestamp %ts))))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CAR } ;
             GET ;
             IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             DIP { DIP 5 { DUP } ; DIG 5 } ;
             EXEC ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP 4 { DUP } ;
             DIG 4 ;
             DIP { DIP 2 { DUP } ;
                   DIG 2 ;
                   DIP 2 { DUP } ;
                   DIG 2 ;
                   DIP { DIP 4 { DUP } ;
                         DIG 4 ;
                         SOME ;
                         DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR } } ;
                   UPDATE ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                   PAIR ;
                   PAIR ;
                   SOME ;
                   DIP { DIP 5 { DUP } ; DIG 5 ; CDR ; CAR } } ;
             UPDATE ;
             DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP { DROP 7 } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair (pair %0
                          (map %events string (list (pair (nat %block_height) (list %data bytes))))
                          (timestamp %ts))
                       (string %1))
                 (list %2 bytes))
           (pair (map %events string (list (pair (nat %block_height) (list %data bytes))))
                 (timestamp %ts))
           { DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             PUSH nat 0 ;
             PAIR ;
             DUP ;
             NOW ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 ; DIP { DIP 2 { DUP } ; DIG 2 } ; PAIR } ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             COMPARE ;
             LT ;
             IF { DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DIP 3 { DUP } ;
                        DIG 3 ;
                        NIL (pair (nat %block_height) (list %data bytes)) ;
                        SWAP ;
                        CONS ;
                        SOME ;
                        EMPTY_MAP string (list (pair (nat %block_height) (list %data bytes))) ;
                        SWAP } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DROP } }
                { DUP ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP { DIP 5 { DUP } ;
                        DIG 5 ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } ;
                        GET ;
                        IF_NONE
                          { DIP 4 { DUP } ;
                            DIG 4 ;
                            NIL (pair (nat %block_height) (list %data bytes)) ;
                            SWAP ;
                            CONS }
                          { DIP 5 { DUP } ; DIG 5 ; DIP { DUP } ; CONS ; DIP { DROP } } ;
                        SOME ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR } ;
             CDR ;
             CAR ;
             DIP { DROP 6 } } ;
         LAMBDA
           (pair (pair (pair %0
                          (map %events string (list (pair (nat %block_height) (list %data bytes))))
                          (timestamp %ts))
                       (string %1))
                 (list %2 bytes))
           (pair (map %events string (list (pair (nat %block_height) (list %data bytes))))
                 (timestamp %ts))
           { DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             PUSH nat 0 ;
             PAIR ;
             DUP ;
             NOW ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 ; DIP { DIP 2 { DUP } ; DIG 2 } ; PAIR } ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             COMPARE ;
             LT ;
             IF { DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DIP 3 { DUP } ;
                        DIG 3 ;
                        NIL (pair (nat %block_height) (list %data bytes)) ;
                        SWAP ;
                        CONS ;
                        SOME ;
                        EMPTY_MAP string (list (pair (nat %block_height) (list %data bytes))) ;
                        SWAP } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DROP } }
                { DUP ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP { DIP 5 { DUP } ;
                        DIG 5 ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } ;
                        GET ;
                        IF_NONE
                          { DIP 4 { DUP } ;
                            DIG 4 ;
                            NIL (pair (nat %block_height) (list %data bytes)) ;
                            SWAP ;
                            CONS }
                          { DIP 5 { DUP } ; DIG 5 ; DIP { DUP } ; CONS ; DIP { DROP } } ;
                        SOME ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR } ;
             CDR ;
             CAR ;
             DIP { DROP 6 } } ;
         LAMBDA
           bytes
           (pair (map %inputs nat bytes) (address %predicate_address))
           { DUP ;
             UNPACK (pair (address %0) (map %1 nat bytes)) ;
             SOURCE ;
             EMPTY_MAP nat bytes ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             IF_NONE
               { PUSH string "decode error" ; FAILWITH }
               { DIP { DUP } ;
                 SWAP ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DIP { DUP } ; SWAP ; CAR } ;
                 PAIR ;
                 DIP { DROP 2 } } ;
             DIP { DROP } ;
             DUP ;
             DIP { DROP 3 } } ;
         LAMBDA nat mutez { DUP ; PUSH mutez 1 ; SWAP ; MUL ; DIP { DROP } } ;
         LAMBDA
           (pair (address %0) (mutez %1))
           operation
           { DUP ;
             CAR ;
             CONTRACT unit ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             UNIT ;
             TRANSFER_TOKENS ;
             DUP ;
             DIP { DROP 3 } } ;
         DIP 7 { DUP } ;
         DIG 7 ;
         CDR ;
         DIP 8 { DUP } ;
         DIG 8 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     PACK ;
                     SHA256 ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DUP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CAR ;
                     CDR ;
                     DIP { NOW ;
                           NIL bytes ;
                           PAIR ;
                           DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; PUSH nat 0 ; PAIR } ;
                           PAIR ;
                           SOME ;
                           DIP { DIP { DUP } ; SWAP } } ;
                     UPDATE ;
                     DIP { DROP 3 ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     PUSH string "NewPropertyClaimed" ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           PACK ;
                           DIP { DIP 4 { DUP } ;
                                 DIG 4 ;
                                 PACK ;
                                 DIP { NOW ; PACK ; NIL bytes ; SWAP ; CONS } ;
                                 CONS } ;
                           CONS } ;
                     PAIR ;
                     DIP { DIP 13 { DUP } ; DIG 13 } ;
                     EXEC ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 7 } }
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     LE ;
                     IF { PUSH string "Insufficient fund" ; FAILWITH } { PUSH unit Unit } ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DIP { DUP } ; SWAP ; CDR ; CAR } ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DUP ;
                     CDR ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR } ;
                     ADD ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     CAR ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DIP { DUP ; CAR } ;
                     PAIR ;
                     PACK ;
                     SOME ;
                     DIP { DROP ;
                           DIP 3 { DUP } ;
                           DIG 3 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           CDR ;
                           PACK ;
                           SOME ;
                           DIP { DUP ;
                                 DUP ;
                                 CDR ;
                                 DIP { DUP ; CAR } ;
                                 PAIR ;
                                 PACK ;
                                 SOME ;
                                 DIP { DROP ;
                                       DIP 4 { DUP } ;
                                       DIG 4 ;
                                       CDR ;
                                       PACK ;
                                       SOME ;
                                       EMPTY_MAP nat bytes ;
                                       SWAP ;
                                       PUSH nat 0 ;
                                       UPDATE } ;
                                 PUSH nat 1 ;
                                 UPDATE } ;
                           PUSH nat 2 ;
                           UPDATE } ;
                     PUSH nat 3 ;
                     UPDATE ;
                     PUSH address "tz1TGu6TN5GSez2ndXXeDX6LgUDvLzPLqgYV" ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     DIP { DIP 5 { DUP } ; DIG 5 ; CDR } ;
                     PAIR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP 16 { DUP } ; DIG 16 } ;
                     EXEC ;
                     DUP ;
                     DIP { DIP 6 { DUP } ; DIG 6 ; CDR } ;
                     PAIR ;
                     DIP { DIP 6 { DUP } ; DIG 6 ; CAR ; CAR } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CAR } ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DUP ;
                     CDR ;
                     DIP { DUP ; CAR ; CDR } ;
                     GET ;
                     IF_NONE { PUSH bool True } { DROP ; PUSH bool False } ;
                     IF { PUSH string "No range found for the old total_deposited." ; FAILWITH }
                        { PUSH unit Unit } ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DUP ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     CAR ;
                     CDR ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP { DUP } ; SWAP ; PUSH nat 0 ; PAIR } ;
                     PAIR ;
                     DIP { DIP 2 { DUP } ; DIG 2 } ;
                     PAIR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     PUSH nat 0 ;
                     SWAP ;
                     COMPARE ;
                     EQ ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; PUSH nat 0 ; SWAP ; COMPARE ; EQ } ;
                     AND ;
                     IF { DUP ;
                          DIP 7 { DUP } ;
                          DIG 7 ;
                          CDR ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR }
                        { DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DIP { DUP } ; SWAP ; NONE (pair (nat %end_) (nat %start_)) } ;
                          UPDATE ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          DIP 5 { DUP } ;
                          DIG 5 ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          DIP { DROP } } ;
                     DIP { DROP } ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DUP ;
                     CDR ;
                     DIP { DIP 8 { DUP } ; DIG 8 } ;
                     ADD ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DIP 10 { DUP } ; DIG 10 } ;
                     ADD ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DIP 12 { DUP } ;
                     DIG 12 ;
                     DIP 12 { DUP } ;
                     DIG 12 ;
                     DIP { DIP { DUP } ;
                           SWAP ;
                           DIP 3 { DUP } ;
                           DIG 3 ;
                           DIP { DIP 3 { DUP } ;
                                 DIG 3 ;
                                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CDR ; CAR } ;
                                 PAIR ;
                                 SOME ;
                                 DIP { DIP 5 { DUP } ; DIG 5 ; CAR ; CAR ; CDR } } ;
                           UPDATE ;
                           DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                           SWAP ;
                           PAIR ;
                           PAIR ;
                           SOME ;
                           DIP { DIP 13 { DUP } ; DIG 13 ; CDR ; CAR } } ;
                     UPDATE ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DROP 14 } ;
                     DIP 7 { DUP } ;
                     DIG 7 ;
                     CDR ;
                     PACK ;
                     DIP { DIP 2 { DUP } ;
                           DIG 2 ;
                           DIP { DIP 19 { DUP } ; DIG 19 } ;
                           EXEC ;
                           PACK ;
                           DIP { DIP 2 { DUP } ; DIG 2 ; PACK ; NIL bytes ; SWAP ; CONS } ;
                           CONS } ;
                     CONS ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     CDR ;
                     PUSH string "CheckpointFinalized" ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP { DUP } ; SWAP } ;
                     PAIR ;
                     DIP { DIP 19 { DUP } ; DIG 19 } ;
                     EXEC ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 12 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     PUSH nat 1 ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DUP ;
                     UNPACK (pair (address %0) (map %1 nat bytes)) ;
                     SOURCE ;
                     EMPTY_MAP nat bytes ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     IF_NONE
                       { PUSH string "decode error" ; FAILWITH }
                       { DIP { DUP } ;
                         SWAP ;
                         DIP { DUP } ;
                         SWAP ;
                         CDR ;
                         DIP { DIP { DUP } ; SWAP ; CAR } ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DIP { DROP } ;
                     DUP ;
                     DIP { DROP 3 ;
                           DUP ;
                           CAR ;
                           CAR ;
                           PUSH nat 0 ;
                           GET ;
                           IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                           DUP ;
                           UNPACK (pair (nat %0) (nat %1)) ;
                           PUSH nat 0 ;
                           PUSH nat 0 ;
                           PAIR ;
                           DIP { DUP } ;
                           SWAP ;
                           IF_NONE
                             { PUSH string "decode error" ; FAILWITH }
                             { DIP { DUP } ;
                               SWAP ;
                               DIP { DUP } ;
                               SWAP ;
                               CDR ;
                               DIP { DIP { DUP } ; SWAP ; CAR } ;
                               PAIR ;
                               DIP { DROP 2 } } ;
                           DIP { DROP } ;
                           DUP ;
                           DIP { DROP 3 } } ;
                     PAIR ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DIP { DUP } ; SWAP ; CDR } ;
                     PAIR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP 12 { DUP } ; DIG 12 } ;
                     EXEC ;
                     DUP ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     CDR ;
                     PUSH string "CheckpointFinalized" ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP 3 { DUP } ;
                           DIG 3 ;
                           CDR ;
                           PACK ;
                           DIP { DIP 2 { DUP } ;
                                 DIG 2 ;
                                 PACK ;
                                 SHA256 ;
                                 PACK ;
                                 DIP { DIP 2 { DUP } ; DIG 2 ; PACK ; NIL bytes ; SWAP ; CONS } ;
                                 CONS } ;
                           CONS } ;
                     PAIR ;
                     DIP { DIP 13 { DUP } ; DIG 13 } ;
                     EXEC ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 6 } }
                   { DUP ;
                     DIP { DIP 3 { DUP } ; DIG 3 } ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIP { DUP } ;
                     SWAP ;
                     CDR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PUSH nat 1 ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DIP { DIP 9 { DUP } ; DIG 9 } ;
                     EXEC ;
                     DIP { DIP { DUP } ;
                           SWAP ;
                           CAR ;
                           CDR ;
                           CAR ;
                           PUSH nat 0 ;
                           GET ;
                           IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                           DUP ;
                           UNPACK (pair (nat %0) (nat %1)) ;
                           PUSH nat 0 ;
                           PUSH nat 0 ;
                           PAIR ;
                           DIP { DUP } ;
                           SWAP ;
                           IF_NONE
                             { PUSH string "decode error" ; FAILWITH }
                             { DIP { DUP } ;
                               SWAP ;
                               DIP { DUP } ;
                               SWAP ;
                               CDR ;
                               DIP { DIP { DUP } ; SWAP ; CAR } ;
                               PAIR ;
                               DIP { DROP 2 } } ;
                           DIP { DROP } ;
                           DUP ;
                           DIP { DROP 3 } } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     DIP { DIP 3 { DUP } ;
                           DIG 3 ;
                           CDR ;
                           DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CAR } ;
                           GET ;
                           IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                           DIP { DIP { DUP } ; SWAP ; CDR } ;
                           PAIR ;
                           DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CAR } ;
                           PAIR ;
                           DUP ;
                           CAR ;
                           CAR ;
                           DIP { DUP } ;
                           SWAP ;
                           CAR ;
                           CDR ;
                           DIP 2 { DUP } ;
                           DIG 2 ;
                           CDR ;
                           DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
                           GET ;
                           IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                           DUP ;
                           CDR ;
                           DIP { DIP { DUP } ; SWAP ; CDR } ;
                           COMPARE ;
                           LE ;
                           DIP { DIP { DUP } ; SWAP ; CAR ; DIP { DUP ; CAR } ; COMPARE ; LE } ;
                           AND ;
                           IF { PUSH unit Unit }
                              { PUSH string "range must be of a depostied range." ; FAILWITH } ;
                           DIP 3 { DUP } ;
                           DIG 3 ;
                           DIP { DIP { DUP } ; SWAP } ;
                           PAIR ;
                           DIP { DIP 2 { DUP } ; DIG 2 } ;
                           PAIR ;
                           DIP 3 { DUP } ;
                           DIG 3 ;
                           CDR ;
                           DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                           COMPARE ;
                           NEQ ;
                           IF { DUP ;
                                DIP 5 { DUP } ;
                                DIG 5 ;
                                DIP 5 { DUP } ;
                                DIG 5 ;
                                CDR ;
                                DIP { DIP 5 { DUP } ;
                                      DIG 5 ;
                                      CDR ;
                                      DIP { DIP 4 { DUP } ; DIG 4 ; CDR } ;
                                      PAIR ;
                                      SOME ;
                                      DIP { DIP 6 { DUP } ; DIG 6 ; CAR ; CDR } } ;
                                UPDATE ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                                PAIR ;
                                PAIR }
                              { DUP } ;
                           DIP { DROP } ;
                           DUP ;
                           CAR ;
                           CDR ;
                           DIP { DUP } ;
                           SWAP ;
                           CDR ;
                           DIP 2 { DUP } ;
                           DIG 2 ;
                           CAR ;
                           CAR ;
                           DUP ;
                           DIP { DIP 2 { DUP } ; DIG 2 } ;
                           PAIR ;
                           DIP { DIP { DUP } ; SWAP } ;
                           PAIR ;
                           DIP 2 { DUP } ;
                           DIG 2 ;
                           CAR ;
                           DIP { DIP 3 { DUP } ; DIG 3 ; CAR } ;
                           COMPARE ;
                           EQ ;
                           IF { DIP { DUP } ;
                                SWAP ;
                                DIP 4 { DUP } ;
                                DIG 4 ;
                                CAR ;
                                DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR ; NONE (pair (nat %end_) (nat %start_)) } ;
                                UPDATE ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DIP { DUP } ;
                                SWAP ;
                                DIP { DUP } ;
                                SWAP ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                                PAIR ;
                                PAIR ;
                                DIP { DROP } }
                              { DIP 3 { DUP } ;
                                DIG 3 ;
                                DIP 3 { DUP } ;
                                DIG 3 ;
                                CAR ;
                                SWAP ;
                                CAR ;
                                PAIR ;
                                DIP { DUP } ;
                                SWAP ;
                                DIP { DUP } ;
                                SWAP ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DIP 3 { DUP } ;
                                DIG 3 ;
                                DIP 2 { DUP } ;
                                DIG 2 ;
                                CAR ;
                                DIP { DIP 2 { DUP } ;
                                      DIG 2 ;
                                      SOME ;
                                      DIP { DIP 4 { DUP } ; DIG 4 ; CAR ; CDR } } ;
                                UPDATE ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                                PAIR ;
                                PAIR ;
                                DIP { DROP } } ;
                           DIP { DROP } ;
                           DUP ;
                           CAR ;
                           CAR ;
                           SOME ;
                           DIP { DROP 10 ; DIP 2 { DUP } ; DIG 2 ; CDR ; CAR } } ;
                     UPDATE ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     PUSH nat 3 ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DIP { DIP 11 { DUP } ; DIG 11 } ;
                     EXEC ;
                     DUP ;
                     CAR ;
                     PUSH nat 0 ;
                     GET ;
                     IF_NONE { PUSH string "MAP FIND" ; FAILWITH } {} ;
                     DUP ;
                     UNPACK address ;
                     DIP { DROP } ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     CDR ;
                     CAR ;
                     DIP { DIP 3 { DUP } ; DIG 3 ; CDR ; CDR } ;
                     SUB ;
                     NIL operation ;
                     DIP 14 { DUP } ;
                     DIG 14 ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP 13 { DUP } ; DIG 13 ; DIP { DIP { DUP } ; SWAP } ; PAIR } ;
                     PAIR ;
                     DIP 3 { DUP } ;
                     DIG 3 ;
                     IF_NONE
                       { PUSH string "decode error" ; FAILWITH }
                       { DUP ;
                         DIP { DIP 3 { DUP } ;
                               DIG 3 ;
                               ABS ;
                               DIP { DIP 16 { DUP } ; DIG 16 } ;
                               EXEC } ;
                         PAIR ;
                         DIP { DIP 15 { DUP } ; DIG 15 } ;
                         EXEC ;
                         DIP { DIP 2 { DUP } ; DIG 2 } ;
                         CONS ;
                         DIP 2 { DUP } ;
                         DIG 2 ;
                         DIP { DUP } ;
                         SWAP ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DIP { DROP } ;
                     DIP 5 { DUP } ;
                     DIG 5 ;
                     DIP 6 { DUP } ;
                     DIG 6 ;
                     CDR ;
                     CDR ;
                     PUSH string "ExitFinalized" ;
                     SWAP ;
                     PAIR ;
                     DIP { DIP 9 { DUP } ;
                           DIG 9 ;
                           CDR ;
                           PACK ;
                           DIP { DIP 7 { DUP } ;
                                 DIG 7 ;
                                 PACK ;
                                 SHA256 ;
                                 PACK ;
                                 NIL bytes ;
                                 SWAP ;
                                 CONS } ;
                           CONS } ;
                     PAIR ;
                     DIP { DIP 18 { DUP } ; DIG 18 } ;
                     EXEC ;
                     DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CDR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DROP 12 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CAR ;
             DIP 3 { DUP } ;
             DIG 3 ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             SOURCE ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "source should be registered operator address" ; FAILWITH }
                { PUSH unit Unit } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; CDR ; PUSH nat 1 ; ADD } ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "block_number should be next block" ; FAILWITH }
                { PUSH unit Unit } ;
             DIP 5 { DUP } ;
             DIG 5 ;
             DIP 6 { DUP } ;
             DIG 6 ;
             CDR ;
             CDR ;
             PUSH string "BlockSubmitted" ;
             SWAP ;
             PAIR ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   PACK ;
                   DIP { DIP 3 { DUP } ; DIG 3 ; PACK ; NIL bytes ; SWAP ; CONS } ;
                   CONS } ;
             PAIR ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             PUSH nat 0 ;
             PAIR ;
             DUP ;
             NOW ;
             SWAP ;
             DIP { DUP } ;
             PAIR ;
             DIP { DIP 3 { DUP } ; DIG 3 ; DIP { DIP 2 { DUP } ; DIG 2 } ; PAIR } ;
             PAIR ;
             DIP 4 { DUP } ;
             DIG 4 ;
             CDR ;
             DIP { DIP { DUP } ; SWAP } ;
             COMPARE ;
             LT ;
             IF { DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  DIP { DIP 3 { DUP } ;
                        DIG 3 ;
                        NIL (pair (nat %block_height) (list %data bytes)) ;
                        SWAP ;
                        CONS ;
                        SOME ;
                        EMPTY_MAP string (list (pair (nat %block_height) (list %data bytes))) ;
                        SWAP } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP } ;
                  SWAP ;
                  DIP 4 { DUP } ;
                  DIG 4 ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  DIP { DROP } }
                { DUP ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP 5 { DUP } ;
                  DIG 5 ;
                  DIP { DIP 5 { DUP } ;
                        DIG 5 ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } ;
                        GET ;
                        IF_NONE
                          { DIP 4 { DUP } ;
                            DIG 4 ;
                            NIL (pair (nat %block_height) (list %data bytes)) ;
                            SWAP ;
                            CONS }
                          { DIP 5 { DUP } ; DIG 5 ; DIP { DUP } ; CONS ; DIP { DROP } } ;
                        SOME ;
                        DIP { DIP 6 { DUP } ; DIG 6 ; CAR } } ;
                  UPDATE ;
                  SWAP ;
                  CDR ;
                  SWAP ;
                  PAIR ;
                  DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                  PAIR ;
                  SWAP ;
                  PAIR } ;
             CDR ;
             CAR ;
             DIP { DROP 6 ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP 5 { DUP } ;
             DIG 5 ;
             DIP 5 { DUP } ;
             DIG 5 ;
             DIP { DIP 4 { DUP } ;
                   DIG 4 ;
                   SOME ;
                   DIP { DIP 6 { DUP } ; DIG 6 ; CAR ; CAR } } ;
             UPDATE ;
             DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
             PAIR ;
             PAIR ;
             DIP 5 { DUP } ;
             DIG 5 ;
             DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
             SWAP ;
             PAIR ;
             PAIR ;
             NIL operation ;
             PAIR ;
             DIP { DROP 9 } } ;
         DIP { DROP 9 } } }
