{ parameter
    (or (or (pair %create
               (pair (nat %id) (nat %questions))
               (pair (nat %rewards) (bytes %rewards_h)))
            (pair %solve (nat %id) (bytes %proof)))
        (pair %update
           (pair (nat %id) (nat %questions))
           (pair (nat %rewards) (bytes %rewards_h)))) ;
  storage
    (big_map
       nat
       (pair (pair (pair (address %author) (map %claimed address nat))
                   (pair (nat %id) (nat %questions)))
             (pair (nat %rewards) (bytes %rewards_h)))) ;
  code { DUP ;
         NIL operation ;
         SWAP ;
         CDR ;
         DIP 2 { DUP } ;
         DIG 2 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 DIP { DUP } ;
                 GET ;
                 IF_NONE
                   { PUSH unit Unit }
                   { PUSH string "Puzzle already exists." ; FAILWITH } ;
                 DIP 7 { DUP } ;
                 DIG 7 ;
                 DIP { DIP 2 { DUP } ;
                       DIG 2 ;
                       CAR ;
                       CAR ;
                       DIP { EMPTY_MAP address nat ;
                             SENDER ;
                             PAIR ;
                             DIP { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   CAR ;
                                   CAR ;
                                   DIP { DIP 2 { DUP } ; DIG 2 ; CAR ; CDR } ;
                                   PAIR } ;
                             PAIR ;
                             DIP { DIP 2 { DUP } ;
                                   DIG 2 ;
                                   CDR ;
                                   CAR ;
                                   DIP { DIP 2 { DUP } ; DIG 2 ; CDR ; CDR } ;
                                   PAIR } ;
                             PAIR ;
                             SOME ;
                             DIP { DIP { DUP } ; SWAP } } ;
                       UPDATE } ;
                 PAIR ;
                 DIP { DROP 5 } }
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DIP { DUP } ;
                 SWAP ;
                 CAR ;
                 DIP { DUP } ;
                 GET ;
                 IF_NONE
                   { PUSH string "Unknown puzzle index" ; FAILWITH }
                   { DUP ; DIP { DROP } } ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH string "No rewards are claimable." ; FAILWITH }
                    { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 CAR ;
                 DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CDR ; SIZE } ;
                 SUB ;
                 ABS ;
                 DUP ;
                 PUSH nat 1 ;
                 SWAP ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "No rewards are claimable." ; FAILWITH }
                    { PUSH unit Unit } ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 GET ;
                 IF_NONE
                   { PUSH unit Unit }
                   { PUSH string "No rewards are claimable." ; FAILWITH } ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 CDR ;
                 DIP { DIP 4 { DUP } ; DIG 4 ; CDR ; CDR } ;
                 PAIR ;
                 DIP { DIP 4 { DUP } ;
                       DIG 4 ;
                       CDR ;
                       CAR ;
                       PUSH nat 1 ;
                       ADD ;
                       DIP { DIP 2 { DUP } ; DIG 2 } ;
                       PAIR } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DUP ; CDR ; CAR ; DIP { DUP ; CDR ; CDR } ; SUB ; ABS } ;
                 PAIR ;
                 DUP ;
                 LAMBDA
                   (pair (pair (bytes %0) (nat %1))
                         (pair (pair (bytes %b) (lambda %hash bytes bytes)) (nat %i)))
                   (pair (bool %0) (pair %1 (pair (bytes %b) (lambda %hash bytes bytes)) (nat %i)))
                   { DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
                     COMPARE ;
                     LE ;
                     IF { DIP { DUP } ;
                          SWAP ;
                          CAR ;
                          CAR ;
                          DIP { DIP { DUP } ; SWAP ; CAR ; CDR } ;
                          EXEC ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP 3 { DUP } ;
                          DIG 3 ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                          PAIR ;
                          PAIR ;
                          DIP { DROP } ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          PUSH nat 1 ;
                          ADD ;
                          DIP { DUP } ;
                          SWAP ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          DIP 2 { DUP } ;
                          DIG 2 ;
                          SWAP ;
                          CAR ;
                          PAIR ;
                          DIP { DROP 4 } ;
                          PUSH bool True ;
                          PAIR }
                        { DIP { DUP } ; SWAP ; PUSH bool False ; PAIR } ;
                     DIP { DROP 3 } } ;
                 SWAP ;
                 APPLY ;
                 DIP { DUP ;
                       CAR ;
                       LAMBDA bytes bytes { DUP ; BLAKE2B ; DIP { DROP } } ;
                       SWAP ;
                       PAIR ;
                       PUSH nat 1 ;
                       SWAP ;
                       PAIR } ;
                 SWAP ;
                 PUSH bool True ;
                 LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
                 SWAP ;
                 DROP ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DIP { DROP 2 ; DUP ; CAR ; CDR } ;
                 COMPARE ;
                 EQ ;
                 DIP { DROP } ;
                 IF { PUSH unit Unit }
                    { PUSH string "Solution proof could not be verified." ; FAILWITH } ;
                 DIP 5 { DUP } ;
                 DIG 5 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SIZE ;
                 PUSH nat 1 ;
                 ADD ;
                 DIP 6 { DUP } ;
                 DIG 6 ;
                 DIP { DUP } ;
                 SWAP ;
                 SOME ;
                 DIP { DIP 7 { DUP } ; DIG 7 ; CAR ; CAR ; CDR } ;
                 SENDER ;
                 UPDATE ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PUSH address "KT1KtB2fNe1V7XWtucvm16nPGvndqAKdkEac" ;
                 CONTRACT %grantReward (pair (pair (address %addr) (nat %claim)) (nat %puzzle_id)) ;
                 IF_NONE
                   { PUSH string "bad address for get_entrypoint (%grantReward)" ; FAILWITH }
                   {} ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 SENDER ;
                 PAIR ;
                 DIP { DIP { DUP } ; SWAP ; CAR ; CDR ; CAR } ;
                 PAIR ;
                 DIP { DUP ; PUSH mutez 0 } ;
                 TRANSFER_TOKENS ;
                 DUP ;
                 NIL operation ;
                 SWAP ;
                 CONS ;
                 DIP { DIP 2 { DUP } ;
                       DIG 2 ;
                       CAR ;
                       CDR ;
                       CAR ;
                       DIP { DIP 2 { DUP } ; DIG 2 ; SOME ; DIP { DIP 10 { DUP } ; DIG 10 } } ;
                       UPDATE } ;
                 PAIR ;
                 DIP { DROP 14 } } ;
             DIP { DROP } }
           { DUP ;
             DIP { DIP { DUP } ; SWAP } ;
             PAIR ;
             DUP ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CDR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             GET ;
             IF_NONE
               { PUSH string "Unknown puzzle index" ; FAILWITH }
               { DUP ; DIP { DROP } } ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "Cannot update puzzle" ; FAILWITH } { PUSH unit Unit } ;
             DIP 3 { DUP } ;
             DIG 3 ;
             CDR ;
             CAR ;
             DIP { DIP { DUP } ; SWAP ; CAR ; CAR ; CDR ; SIZE } ;
             COMPARE ;
             LT ;
             IF { PUSH string "Cannot update puzzle" ; FAILWITH } { PUSH unit Unit } ;
             DIP 2 { DUP } ;
             DIG 2 ;
             DIP 5 { DUP } ;
             DIG 5 ;
             CDR ;
             CDR ;
             DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP 5 { DUP } ;
             DIG 5 ;
             CDR ;
             CAR ;
             DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIP 5 { DUP } ;
             DIG 5 ;
             CAR ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DIP 9 { DUP } ;
             DIG 9 ;
             DIP { DUP ;
                   CAR ;
                   CDR ;
                   CAR ;
                   DIP { DUP ; SOME ; DIP { DIP 4 { DUP } ; DIG 4 } } ;
                   UPDATE } ;
             PAIR ;
             DIP { DROP 8 } } ;
         DIP { DROP 3 } } }
