{ storage int ;
  parameter (or (list %median_from_histogram int) (list %quickselect int)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { DUP ;
             SIZE ;
             PUSH nat 2 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH int 9 ; FAILWITH } { CAR } ;
             EMPTY_MAP int nat ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             ITER { SWAP ;
                    DUP ;
                    DUG 2 ;
                    SWAP ;
                    DUP ;
                    DUG 2 ;
                    MEM ;
                    IF { SWAP ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 2 ;
                         GET ;
                         IF_NONE { PUSH int 13 ; FAILWITH } {} ;
                         PUSH nat 1 ;
                         ADD ;
                         SOME ;
                         SWAP ;
                         UPDATE }
                       { SWAP ; PUSH (option nat) (Some 1) ; DIG 2 ; UPDATE } } ;
             PUSH nat 0 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             ITER { DIG 3 ;
                    DUP ;
                    DUG 4 ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    COMPARE ;
                    LE ;
                    IF { DIG 5 ; DROP ; DUP ; CAR ; DUG 5 ; CDR ; ADD } { DROP } } ;
             DROP 4 }
           { DUP ;
             SIZE ;
             PUSH nat 2 ;
             SWAP ;
             EDIV ;
             IF_NONE { PUSH int 24 ; FAILWITH } { CAR } ;
             INT ;
             SWAP ;
             DUP ;
             DUG 2 ;
             NIL int ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SIZE ;
             INT ;
             PUSH int 0 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             COMPARE ;
             GT ;
             IF { PUSH bool True } { DUP ; PUSH int 0 ; COMPARE ; LT } ;
             LOOP { DUP ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    COMPARE ;
                    LT ;
                    IF { DIG 2 ; DUP ; DUG 3 }
                       { SWAP ; DUP ; DUG 2 ; SWAP ; DUP ; DUG 2 ; DIG 5 ; SUB ; DUG 4 } ;
                    DUP ;
                    IF_CONS
                      { DIG 4 ;
                        DROP ;
                        DIG 4 ;
                        DROP ;
                        NIL int ;
                        DUG 4 ;
                        DUP ;
                        NIL int ;
                        SWAP ;
                        CONS ;
                        DUG 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        ITER { SWAP ;
                               DUP ;
                               DUG 2 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               COMPARE ;
                               LE ;
                               IF { DIG 6 ; SWAP ; CONS ; DUG 5 } { DIG 5 ; SWAP ; CONS ; DUG 4 } } ;
                        DIG 3 ;
                        DROP 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        SIZE ;
                        INT }
                      { DROP } ;
                    PUSH int 0 ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    COMPARE ;
                    GT ;
                    IF { PUSH bool True } { DUP ; PUSH int 0 ; COMPARE ; LT } } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             IF_CONS
               { SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP ;
                 SWAP ;
                 DROP }
               { DROP 5 } } ;
         NIL operation ;
         PAIR } }
