{ storage nat ;
  parameter
    (or (or (nat %ajouter) (nat %diviser)) (or (unit %doubler) (nat %nouveauNombre))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { DUP ; DIG 2 ; DUP ; DUG 3 ; ADD ; DUG 2 ; DROP 2 } }
               { { DUP ;
                   PUSH nat 0 ;
                   COMPARE ;
                   NEQ ;
                   IF { {} }
                      { { PUSH string "WrongCondition: params.nombre != 0" ; FAILWITH } } ;
                   DUP ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   EDIV ;
                   IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                   DUG 2 ;
                   DROP 2 } } }
           { IF_LEFT
               { { PUSH nat 2 ; DIG 2 ; DUP ; DUG 3 ; MUL ; DUG 2 ; DROP 2 } }
               { { DUP ;
                   PUSH nat 0 ;
                   COMPARE ;
                   LT ;
                   IF { {} }
                      { { PUSH string "WrongCondition: params.nombre > 0" ; FAILWITH } } ;
                   SWAP ;
                   DROP } } } ;
         NIL operation ;
         PAIR } }
