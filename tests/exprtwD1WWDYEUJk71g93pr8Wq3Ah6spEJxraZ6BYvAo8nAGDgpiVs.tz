{ storage (pair (list %a (pair int int)) (int %b)) ;
  parameter (or (int %foo) (int %foo2)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { { SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               DIG 2 ;
               CAR ;
               PUSH int 1 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               PAIR ;
               CONS ;
               PAIR ;
               SWAP ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               DIG 2 ;
               CAR ;
               PUSH int 2 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               PAIR ;
               CONS ;
               PAIR ;
               SWAP ;
               PUSH int 1 ;
               PUSH int 13 ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               NEQ ;
               IF { {} } { { DUP ; FAILWITH } } ;
               PUSH nat 2 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               CAR ;
               SIZE ;
               COMPARE ;
               EQ ;
               IF { { DIG 2 ; CAR ; PUSH int 1 ; SWAP ; PAIR ; DUG 2 } } { {} } ;
               DROP 2 } }
           { { SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               DIG 2 ;
               CAR ;
               PUSH int 1 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               PAIR ;
               CONS ;
               PAIR ;
               SWAP ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               DIG 2 ;
               CAR ;
               PUSH int 2 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               PAIR ;
               CONS ;
               PAIR ;
               SWAP ;
               PUSH int 1 ;
               PUSH int 13 ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               NEQ ;
               IF { {} } { { DUP ; FAILWITH } } ;
               PUSH nat 2 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               CAR ;
               SIZE ;
               COMPARE ;
               EQ ;
               IF { { DIG 2 ; CAR ; PUSH int 1 ; SWAP ; PAIR ; DUG 2 } } { {} } ;
               DROP 2 } } ;
         NIL operation ;
         PAIR } }
