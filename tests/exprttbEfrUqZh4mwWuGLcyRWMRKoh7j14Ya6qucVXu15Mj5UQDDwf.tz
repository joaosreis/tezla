{ storage
    (pair (pair (int %abcd) (lambda %f int int))
          (pair (option %fff (lambda nat nat)) (pair (option %ggg int) (nat %value)))) ;
  parameter
    (or (or (int %abs_test) (or (unit %comp_test) (unit %f)))
        (or (or (unit %flambda) (unit %h)) (or (nat %hh) (unit %i)))) ;
  code { PUSH (lambda int int)
              { { DUP ;
                  PUSH int 0 ;
                  COMPARE ;
                  LT ;
                  IF { { DUP } } { { DUP ; NEG } } ;
                  SWAP ;
                  DROP } } ;
         SWAP ;
         PUSH (lambda (pair (lambda %f int int) (int %x)) int)
              { { DUP ; CAR ; SWAP ; CDR ; EXEC } } ;
         SWAP ;
         PUSH (lambda nat nat) { { PUSH nat 322 ; MUL } } ;
         SWAP ;
         PUSH (lambda nat nat)
              { { DUP ;
                  PUSH nat 0 ;
                  SWAP ;
                  COMPARE ;
                  GE ;
                  IF { {} }
                     { { PUSH string "WrongCondition: lparams_4 >= 0" ; FAILWITH } } ;
                  DUP ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  DUP ;
                  MUL ;
                  COMPARE ;
                  GT ;
                  LOOP { DUP ;
                         PUSH nat 2 ;
                         SWAP ;
                         DUP ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         EDIV ;
                         IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                         ADD ;
                         EDIV ;
                         IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         DUP ;
                         MUL ;
                         COMPARE ;
                         GT } ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  SWAP ;
                  DUP ;
                  DUG 2 ;
                  DUP ;
                  MUL ;
                  COMPARE ;
                  LE ;
                  IF { { DUP ;
                         PUSH nat 1 ;
                         ADD ;
                         PUSH nat 1 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         ADD ;
                         MUL ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         COMPARE ;
                         LT } }
                     { PUSH bool False } ;
                  IF { {} }
                     { { PUSH string
                              "WrongCondition: ((y.value * y.value) <= lparams_4) & (lparams_4 < ((y.value + 1) * (y.value + 1)))" ;
                         FAILWITH } } ;
                  SWAP ;
                  DROP } } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   DIG 3 ;
                   EXEC ;
                   PAIR ;
                   PAIR } }
               { IF_LEFT
                   { { DROP ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CDR ;
                       DIG 4 ;
                       DUP ;
                       DUG 5 ;
                       PUSH (pair (lambda %f int int) (int %x)) (Pair { { PUSH int 3 ; ADD } } 2) ;
                       EXEC ;
                       PAIR ;
                       PAIR } }
                   { { DROP ;
                       PUSH (lambda (pair nat nat) nat) { { DUP ; CDR ; SWAP ; CAR ; ADD } } ;
                       PUSH nat 5 ;
                       APPLY ;
                       SWAP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR ;
                       DIG 3 ;
                       PUSH nat 8 ;
                       EXEC ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } } } }
           { IF_LEFT
               { IF_LEFT
                   { { DROP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       PUSH nat 12345 ;
                       EXEC ;
                       DIG 5 ;
                       DUP ;
                       DUG 6 ;
                       DUP ;
                       PUSH nat 15 ;
                       EXEC ;
                       EXEC ;
                       ADD ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } }
                   { { DROP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CDR ;
                       PUSH (option (lambda nat nat))
                            (Some { { DUP ;
                                      PUSH nat 0 ;
                                      SWAP ;
                                      COMPARE ;
                                      GE ;
                                      IF { {} }
                                         { { PUSH string "WrongCondition: lparams_7 >= 0" ; FAILWITH } } ;
                                      DUP ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      DUP ;
                                      MUL ;
                                      COMPARE ;
                                      GT ;
                                      LOOP { DUP ;
                                             PUSH nat 2 ;
                                             SWAP ;
                                             DUP ;
                                             DIG 4 ;
                                             DUP ;
                                             DUG 5 ;
                                             EDIV ;
                                             IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                                             ADD ;
                                             EDIV ;
                                             IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                                             SWAP ;
                                             DROP ;
                                             SWAP ;
                                             DUP ;
                                             DUG 2 ;
                                             SWAP ;
                                             DUP ;
                                             DUG 2 ;
                                             DUP ;
                                             MUL ;
                                             COMPARE ;
                                             GT } ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      DUP ;
                                      MUL ;
                                      COMPARE ;
                                      LE ;
                                      IF { { DUP ;
                                             PUSH nat 1 ;
                                             ADD ;
                                             PUSH nat 1 ;
                                             DIG 2 ;
                                             DUP ;
                                             DUG 3 ;
                                             ADD ;
                                             MUL ;
                                             DIG 2 ;
                                             DUP ;
                                             DUG 3 ;
                                             COMPARE ;
                                             LT } }
                                         { PUSH bool False } ;
                                      IF { {} }
                                         { { PUSH string
                                                  "WrongCondition: ((y.value * y.value) <= lparams_7) & (lparams_7 < ((y.value + 1) * (y.value + 1)))" ;
                                             FAILWITH } } ;
                                      SWAP ;
                                      DROP } }) ;
                       PAIR ;
                       SWAP ;
                       PAIR } } }
               { IF_LEFT
                   { { SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR ;
                       DIG 4 ;
                       CDR ;
                       CAR ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       DIG 4 ;
                       EXEC ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } }
                   { { DROP ;
                       PUSH (lambda nat nat)
                            { { PUSH (lambda int bool)
                                     { { DUP ;
                                         PUSH int 0 ;
                                         SWAP ;
                                         COMPARE ;
                                         GE ;
                                         IF { {} }
                                            { { PUSH string "WrongCondition: lparams_12 >= 0" ; FAILWITH } } ;
                                         DROP ;
                                         PUSH bool False } } ;
                                PUSH nat 0 ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                COMPARE ;
                                GE ;
                                IF { {} }
                                   { { PUSH string "WrongCondition: lparams_11 >= 0" ; FAILWITH } } ;
                                DROP ;
                                PUSH nat 3 ;
                                MUL } } ;
                       SWAP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CAR ;
                       DIG 3 ;
                       PUSH nat 12 ;
                       EXEC ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR } } } } ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP ;
         NIL operation ;
         PAIR } }
