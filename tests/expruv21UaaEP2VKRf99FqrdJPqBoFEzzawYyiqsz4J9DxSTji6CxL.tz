{ parameter
    (or :BrokerContractTypes.message
       (or (or (pair :BrokerContractTypes.origination_request %Originate
                  (pair (string %sprthash) (nat %template))
                  (pair (bytes %genparam) (mutez %initbalance)))
               (pair :BrokerContractTypes.origination_request %SudoOriginate
                  (pair (string %sprthash) (nat %template))
                  (pair (bytes %genparam) (mutez %initbalance))))
           (or (address %SudoAddAdmin) (address %SudoRemoveAdmin)))
       (or (or (pair :BrokerContractTypes.message.SudoUploadTemplate %SudoUploadTemplate
                  (nat %tmplid)
                  (bytes %ccgen))
               (pair :BrokerContractTypes.message.SudoUpdateBroker %SudoUpdateBroker
                  (option %new_fee
                     (or :BrokerContractTypes.fee_descriptor
                        (int %FreeOfCharge)
                        (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                           (mutez %fee_amount)
                           (address %fee_collector))))
                  (option %new_availability bool)))
           (or (pair :BrokerContractTypes.message.SudoUpdateTemplate %SudoUpdateTemplate
                  (pair (nat %template)
                        (option %new_fee
                           (or :BrokerContractTypes.fee_descriptor
                              (int %FreeOfCharge)
                              (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                                 (mutez %fee_amount)
                                 (address %fee_collector)))))
                  (pair (option %new_availability bool) (option %new_bookhash (option string))))
               (pair :BrokerContractTypes.message.SudoWithdraw %SudoWithdraw
                  (mutez %amount)
                  (address %collector))))) ;
  storage
    (pair :BrokerContractTypes.storage
       (pair (or :BrokerContractTypes.fee_descriptor %broker_fee
                (int %FreeOfCharge)
                (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                   (mutez %fee_amount)
                   (address %fee_collector)))
             (set %broker_admins address))
       (pair (bool %broker_availability)
             (pair (big_map %templates
                      nat
                      (pair :BrokerContractTypes.template_descriptor
                         (pair (nat %template_id)
                               (or :BrokerContractTypes.fee_descriptor %template_fee
                                  (int %FreeOfCharge)
                                  (pair :BrokerContractTypes.fee_descriptor.Charged %Charged
                                     (mutez %fee_amount)
                                     (address %fee_collector))))
                         (pair (pair (bool %template_availability) (bytes %ccgen))
                               (pair (option %bookhash string) (bytes %tmplhash)))))
                   (big_map %instances
                      string
                      (pair :BrokerContractTypes.instance_descriptor
                         (pair (string %sprthash) (address %originator))
                         (pair (bytes %tmplhash) (map %ensemble string address))))))) ;
  code { DUP ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         SELF ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         DUP ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         DIG 10 ;
         DUP ;
         DUG 11 ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     MEM ;
                     DUP ;
                     IF { PUSH string "sprthash conflict" ; DUP ; FAILWITH } { UNIT } ;
                     DUP ;
                     DROP ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     GET ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     IF_NONE { PUSH string "112" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     UNPACK
                       (pair :BrokerContractTypes.ccgen
                          (lambda %genprog
                             bytes
                             (list (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes))))
                          (lambda %initprog bytes (lambda (map string address) (map string bytes)))) ;
                     DUP ;
                     IF_NONE { PUSH string "114" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 32 ;
                     DUP ;
                     DUG 33 ;
                     ADDRESS ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     EXEC ;
                     LAMBDA
                       (pair address
                             (pair (mutez %initbalance)
                                   (pair (string %sprthash)
                                         (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes)))))
                       (pair string (pair operation address))
                       { DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         PAIR ;
                         DUP ;
                         DIG 9 ;
                         DUP ;
                         DUG 10 ;
                         PAIR ;
                         DUP ;
                         SOME ;
                         PUSH (option key_hash) None ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         PAIR ;
                         DUP ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         PAIR ;
                         DUP ;
                         DIG 13 ;
                         DUP ;
                         DUG 14 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CREATE_CONTRACT
                           { parameter bytes ;
                             storage
                               (pair :storage
                                  (lambda %wfunc (pair bytes bytes) (pair (list operation) bytes))
                                  (pair (bytes %wstorage)
                                        (option %avatarid
                                           (pair :avatar_identity (address %broker) (pair (string %sprthash) (string %rclabel)))))) ;
                             code { DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DUP ;
                                    CAR ;
                                    DUP ;
                                    DIG 5 ;
                                    DUP ;
                                    DUG 6 ;
                                    PAIR ;
                                    DIG 3 ;
                                    DUP ;
                                    DUG 4 ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    EXEC ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DIG 7 ;
                                    DUP ;
                                    DUG 8 ;
                                    CAR ;
                                    DIG 8 ;
                                    DUP ;
                                    DUG 9 ;
                                    CDR ;
                                    DUP ;
                                    CDR ;
                                    DUP ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    PAIR ;
                                    DUP ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    PAIR ;
                                    DUP ;
                                    DIG 7 ;
                                    DUP ;
                                    DUG 8 ;
                                    PAIR ;
                                    DUP ;
                                    DIP { DROP 16 } } } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         PAIR ;
                         DUP ;
                         DIG 14 ;
                         DUP ;
                         DUG 15 ;
                         PAIR ;
                         DUP ;
                         DIP { DROP 19 } } ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     APPLY ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     APPLY ;
                     DIG 15 ;
                     DUP ;
                     DUG 16 ;
                     APPLY ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda
                             (map string address)
                             (lambda (pair string (pair operation address)) (map string address)))
                          { LAMBDA
                              (pair (map string address) (pair string (pair operation address)))
                              (map string address)
                              { DUP ;
                                DIP { CAR } ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                CDR ;
                                DUP ;
                                SOME ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                UPDATE ;
                                DUP ;
                                DIP { DROP 7 } } ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            APPLY ;
                            DUP ;
                            DIP { DROP 2 } } ;
                     EMPTY_MAP string address ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                     DIP { DROP } ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     DIG 19 ;
                     DUP ;
                     DUG 20 ;
                     EXEC ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     EXEC ;
                     LAMBDA
                       (pair (map string bytes) (pair string (pair operation address)))
                       (list operation)
                       { DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         GET ;
                         DUP ;
                         IF_NONE
                           { NIL operation ;
                             DUP ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             CONS ;
                             DUP ;
                             DIP { DROP 2 } }
                           { PUSH mutez 0 ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CONTRACT bytes ;
                             DUP ;
                             IF_NONE
                               { PUSH string "process_origination#contract" ; DUP ; FAILWITH }
                               { DUP ; DIP { DROP } } ;
                             DUP ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             TRANSFER_TOKENS ;
                             NIL operation ;
                             DUP ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             DUP ;
                             DIG 10 ;
                             DUP ;
                             DUG 11 ;
                             CONS ;
                             DUP ;
                             DIP { DROP 8 } } ;
                         DUP ;
                         DIP { DROP 8 } } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     APPLY ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (pair (list operation) (list operation)) (list operation))
                          { DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            DIP { NIL operation } ;
                            ITER { CONS } ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            ITER { CONS } ;
                            DUP ;
                            DIP { DROP 5 } } ;
                     NIL operation ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { SWAP ; PAIR ; DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (pair string (pair operation address)) (pair string address))
                          { DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            CDR ;
                            DUP ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            PAIR ;
                            DUP ;
                            DIP { DROP 5 } } ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (map string address) (lambda (pair string address) (map string address)))
                          { LAMBDA
                              (pair (map string address) (pair string address))
                              (map string address)
                              { DUP ;
                                DIP { CAR } ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                SOME ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                UPDATE ;
                                DUP ;
                                DIP { DROP 6 } } ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            APPLY ;
                            DUP ;
                            DIP { DROP 2 } } ;
                     EMPTY_MAP string address ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                     DIP { DROP } ;
                     DUP ;
                     DIG 23 ;
                     DUP ;
                     DUG 24 ;
                     PAIR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DUP ;
                     DIG 46 ;
                     DUP ;
                     DUG 47 ;
                     PAIR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     SOME ;
                     DIG 54 ;
                     DUP ;
                     DUG 55 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 51 ;
                     DUP ;
                     DUG 52 ;
                     UPDATE ;
                     DIG 64 ;
                     DUP ;
                     DUG 65 ;
                     CAR ;
                     DIG 65 ;
                     DUP ;
                     DUG 66 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 67 ;
                     DUP ;
                     DUG 68 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 20 ;
                     DUP ;
                     DUG 21 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 57 } ;
                     DUP ;
                     DIP { DROP 7 } }
                   { DUP ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 15 ;
                     DUP ;
                     DUG 16 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     MEM ;
                     DUP ;
                     IF { PUSH string "sprthash conflict" ; DUP ; FAILWITH } { UNIT } ;
                     DUP ;
                     DROP ;
                     DIG 16 ;
                     DUP ;
                     DUG 17 ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     GET ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     CAR ;
                     DIG 14 ;
                     DUP ;
                     DUG 15 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     IF_NONE { PUSH string "112" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     UNPACK
                       (pair :BrokerContractTypes.ccgen
                          (lambda %genprog
                             bytes
                             (list (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes))))
                          (lambda %initprog bytes (lambda (map string address) (map string bytes)))) ;
                     DUP ;
                     IF_NONE { PUSH string "114" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 39 ;
                     DUP ;
                     DUG 40 ;
                     ADDRESS ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     EXEC ;
                     LAMBDA
                       (pair address
                             (pair (mutez %initbalance)
                                   (pair (string %sprthash)
                                         (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes)))))
                       (pair string (pair operation address))
                       { DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         PAIR ;
                         DUP ;
                         DIG 9 ;
                         DUP ;
                         DUG 10 ;
                         PAIR ;
                         DUP ;
                         SOME ;
                         PUSH (option key_hash) None ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         PAIR ;
                         DUP ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         PAIR ;
                         DUP ;
                         DIG 13 ;
                         DUP ;
                         DUG 14 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CREATE_CONTRACT
                           { parameter bytes ;
                             storage
                               (pair :storage
                                  (lambda %wfunc (pair bytes bytes) (pair (list operation) bytes))
                                  (pair (bytes %wstorage)
                                        (option %avatarid
                                           (pair :avatar_identity (address %broker) (pair (string %sprthash) (string %rclabel)))))) ;
                             code { DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DUP ;
                                    CAR ;
                                    DUP ;
                                    DIG 5 ;
                                    DUP ;
                                    DUG 6 ;
                                    PAIR ;
                                    DIG 3 ;
                                    DUP ;
                                    DUG 4 ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    EXEC ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    DIG 7 ;
                                    DUP ;
                                    DUG 8 ;
                                    CAR ;
                                    DIG 8 ;
                                    DUP ;
                                    DUG 9 ;
                                    CDR ;
                                    DUP ;
                                    CDR ;
                                    DUP ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    PAIR ;
                                    DUP ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    PAIR ;
                                    DUP ;
                                    DIG 7 ;
                                    DUP ;
                                    DUG 8 ;
                                    PAIR ;
                                    DUP ;
                                    DIP { DROP 16 } } } ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         PAIR ;
                         DUP ;
                         DIG 14 ;
                         DUP ;
                         DUG 15 ;
                         PAIR ;
                         DUP ;
                         DIP { DROP 19 } } ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     APPLY ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     APPLY ;
                     DIG 15 ;
                     DUP ;
                     DUG 16 ;
                     APPLY ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda
                             (map string address)
                             (lambda (pair string (pair operation address)) (map string address)))
                          { LAMBDA
                              (pair (map string address) (pair string (pair operation address)))
                              (map string address)
                              { DUP ;
                                DIP { CAR } ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                CDR ;
                                DUP ;
                                SOME ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                UPDATE ;
                                DUP ;
                                DIP { DROP 7 } } ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            APPLY ;
                            DUP ;
                            DIP { DROP 2 } } ;
                     EMPTY_MAP string address ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                     DIP { DROP } ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     DIG 19 ;
                     DUP ;
                     DUG 20 ;
                     EXEC ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     EXEC ;
                     LAMBDA
                       (pair (map string bytes) (pair string (pair operation address)))
                       (list operation)
                       { DUP ;
                         DIP { CAR } ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIG 5 ;
                         DUP ;
                         DUG 6 ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         GET ;
                         DUP ;
                         IF_NONE
                           { NIL operation ;
                             DUP ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             CONS ;
                             DUP ;
                             DIP { DROP 2 } }
                           { PUSH mutez 0 ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CONTRACT bytes ;
                             DUP ;
                             IF_NONE
                               { PUSH string "process_origination#contract" ; DUP ; FAILWITH }
                               { DUP ; DIP { DROP } } ;
                             DUP ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             TRANSFER_TOKENS ;
                             NIL operation ;
                             DUP ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             DUP ;
                             DIG 10 ;
                             DUP ;
                             DUG 11 ;
                             CONS ;
                             DUP ;
                             DIP { DROP 8 } } ;
                         DUP ;
                         DIP { DROP 8 } } ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     APPLY ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (pair (list operation) (list operation)) (list operation))
                          { DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            DIP { NIL operation } ;
                            ITER { CONS } ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            ITER { CONS } ;
                            DUP ;
                            DIP { DROP 5 } } ;
                     NIL operation ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { SWAP ; PAIR ; DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (pair string (pair operation address)) (pair string address))
                          { DUP ;
                            CAR ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            CDR ;
                            DUP ;
                            CDR ;
                            DUP ;
                            DIG 3 ;
                            DUP ;
                            DUG 4 ;
                            PAIR ;
                            DUP ;
                            DIP { DROP 5 } } ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     SWAP ;
                     MAP { DIP { DUP } ; EXEC } ;
                     DIP { DROP } ;
                     PUSH (lambda (map string address) (lambda (pair string address) (map string address)))
                          { LAMBDA
                              (pair (map string address) (pair string address))
                              (map string address)
                              { DUP ;
                                DIP { CAR } ;
                                CDR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                DUP ;
                                SOME ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                DIG 4 ;
                                DUP ;
                                DUG 5 ;
                                UPDATE ;
                                DUP ;
                                DIP { DROP 6 } } ;
                            DIG 1 ;
                            DUP ;
                            DUG 2 ;
                            APPLY ;
                            DUP ;
                            DIP { DROP 2 } } ;
                     EMPTY_MAP string address ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     SWAP ;
                     DIP { SWAP } ;
                     SWAP ;
                     ITER { DIP 2 { DUP } ; DUG 2 ; EXEC ; SWAP ; EXEC } ;
                     DIP { DROP } ;
                     DUP ;
                     DIG 23 ;
                     DUP ;
                     DUG 24 ;
                     PAIR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DUP ;
                     DIG 53 ;
                     DUP ;
                     DUG 54 ;
                     PAIR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     SOME ;
                     DIG 61 ;
                     DUP ;
                     DUG 62 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 58 ;
                     DUP ;
                     DUG 59 ;
                     UPDATE ;
                     DIG 71 ;
                     DUP ;
                     DUG 72 ;
                     CAR ;
                     DIG 72 ;
                     DUP ;
                     DUG 73 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 74 ;
                     DUP ;
                     DUG 75 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 20 ;
                     DUP ;
                     DUG 21 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 59 } ;
                     DUP ;
                     DIP { DROP 12 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     NIL operation ;
                     DIG 20 ;
                     DUP ;
                     DUG 21 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     PUSH bool True ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     UPDATE ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     PAIR ;
                     DIG 25 ;
                     DUP ;
                     DUG 26 ;
                     CDR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DIP { DROP 8 } ;
                     DUP ;
                     DIP { DROP 9 } }
                   { DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     NIL operation ;
                     DIG 20 ;
                     DUP ;
                     DUG 21 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     PUSH bool False ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     UPDATE ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     PAIR ;
                     DIG 25 ;
                     DUP ;
                     DUG 26 ;
                     CDR ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DIP { DROP 8 } ;
                     DUP ;
                     DIP { DROP 9 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 14 ;
                     DUP ;
                     DUG 15 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     MEM ;
                     DUP ;
                     IF { PUSH string "template id conflict" ; DUP ; FAILWITH } { UNIT } ;
                     DUP ;
                     DROP ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     UNPACK
                       (pair :BrokerContractTypes.ccgen
                          (lambda %genprog
                             bytes
                             (list (pair string (pair (lambda (pair bytes bytes) (pair (list operation) bytes)) bytes))))
                          (lambda %initprog bytes (lambda (map string address) (map string bytes)))) ;
                     DUP ;
                     IF_NONE
                       { PUSH string "template.ccgen typecheck fails" ; DUP ; FAILWITH }
                       { PUSH unit Unit ; DUP ; DIP { DROP 2 } } ;
                     DUP ;
                     DROP ;
                     DIG 11 ;
                     DUP ;
                     DUG 12 ;
                     BLAKE2B ;
                     PUSH int 0 ;
                     DUP ;
                     LEFT (pair :BrokerContractTypes.fee_descriptor.Charged
                             (mutez %fee_amount)
                             (address %fee_collector)) ;
                     DUP ;
                     DIG 16 ;
                     DUP ;
                     DUG 17 ;
                     PAIR ;
                     PUSH bool False ;
                     DIG 16 ;
                     DUP ;
                     DUG 17 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     PUSH (option string) None ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     PAIR ;
                     DUP ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     PAIR ;
                     NIL operation ;
                     DIG 36 ;
                     DUP ;
                     DUG 37 ;
                     CAR ;
                     DIG 37 ;
                     DUP ;
                     DUG 38 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     SOME ;
                     DIG 32 ;
                     DUP ;
                     DUG 33 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 29 ;
                     DUP ;
                     DUG 30 ;
                     UPDATE ;
                     DIG 41 ;
                     DUP ;
                     DUG 42 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     PAIR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     PAIR ;
                     DUP ;
                     DIG 12 ;
                     DUP ;
                     DUG 13 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 27 } ;
                     DUP ;
                     DIP { DROP 11 } }
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 14 ;
                     DUP ;
                     DUG 15 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     IF_NONE { DIG 17 ; DUP ; DUG 18 } { DUP ; DIP { DROP } } ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     IF_NONE { DIG 16 ; DUP ; DUG 17 } { DUP ; DIP { DROP } } ;
                     NIL operation ;
                     DIG 24 ;
                     DUP ;
                     DUG 25 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DIG 27 ;
                     DUP ;
                     DUG 28 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     PAIR ;
                     DUP ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 11 } ;
                     DUP ;
                     DIP { DROP 11 } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CDR ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     DIG 17 ;
                     DUP ;
                     DUG 18 ;
                     DIG 11 ;
                     DUP ;
                     DUG 12 ;
                     GET ;
                     DUP ;
                     IF_NONE { PUSH string "207" ; DUP ; FAILWITH } { DUP ; DIP { DROP } } ;
                     DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     IF_NONE { DIG 4 ; DUP ; DUG 5 } { DUP ; DIP { DROP } } ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     IF_NONE { DIG 2 ; DUP ; DUG 3 } { DUP ; DIP { DROP } } ;
                     DIG 18 ;
                     DUP ;
                     DUG 19 ;
                     IF_NONE { DIG 2 ; DUP ; DUG 3 } { DUP ; DIP { DROP } } ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     CAR ;
                     DUP ;
                     CAR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DIG 13 ;
                     DUP ;
                     DUG 14 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DIG 17 ;
                     DUP ;
                     DUG 18 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 11 ;
                     DUP ;
                     DUG 12 ;
                     PAIR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     PAIR ;
                     DUP ;
                     SOME ;
                     DIG 43 ;
                     DUP ;
                     DUG 44 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 38 ;
                     DUP ;
                     DUG 39 ;
                     UPDATE ;
                     NIL operation ;
                     DIG 53 ;
                     DUP ;
                     DUG 54 ;
                     CAR ;
                     DIG 54 ;
                     DUP ;
                     DUG 55 ;
                     CDR ;
                     DUP ;
                     CAR ;
                     DIG 56 ;
                     DUP ;
                     DUG 57 ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     PAIR ;
                     DUP ;
                     DIG 8 ;
                     DUP ;
                     DUG 9 ;
                     PAIR ;
                     DUP ;
                     DIG 10 ;
                     DUP ;
                     DUG 11 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 38 } ;
                     DUP ;
                     DIP { DROP 15 } }
                   { DUP ;
                     CAR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 14 ;
                     DUP ;
                     DUG 15 ;
                     CAR ;
                     DUP ;
                     CDR ;
                     PUSH unit Unit ;
                     DUP ;
                     DROP ;
                     SOURCE ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     MEM ;
                     DUP ;
                     NOT ;
                     DUP ;
                     IF { PUSH string "sudoer check fails" ; DUP ; FAILWITH } { PUSH unit Unit } ;
                     DUP ;
                     DROP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     CONTRACT unit ;
                     DUP ;
                     IF_NONE
                       { PUSH string "incorrect or not-supported collector address" ;
                         DUP ;
                         FAILWITH }
                       { PUSH unit Unit ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         DIG 12 ;
                         DUP ;
                         DUG 13 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         TRANSFER_TOKENS ;
                         DUP ;
                         DIP { DROP 3 } } ;
                     NIL operation ;
                     DUP ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CONS ;
                     DIG 25 ;
                     DUP ;
                     DUG 26 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     DIP { DROP 5 } ;
                     DUP ;
                     DIP { DROP 11 } } ;
                 DIP { DROP } } ;
             DIP { DROP } } ;
         DUP ;
         DIP { DROP 13 } } }
