{ storage
    (pair (map %SecretStore bytes string) (pair (bytes %hashedProof) (int %nonce))) ;
  parameter
    (pair (string %encryptedData) (pair (bytes %nexthashedProof) (bytes %proof))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         CAR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         CDR ;
         BLAKE2B ;
         COMPARE ;
         EQ ;
         IF { {} }
            { { PUSH string "WrongCondition: sp.blake2b(params.proof) == self.data.hashedProof" ;
                FAILWITH } } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CAR ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CAR ;
         PACK ;
         BLAKE2B ;
         MEM ;
         IF { { PUSH string
                     "WrongCondition: ~ (self.data.SecretStore.contains(sp.blake2b(sp.pack(params.encryptedData))))" ;
                FAILWITH } }
            { {} } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         SOME ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         PACK ;
         BLAKE2B ;
         UPDATE ;
         PAIR ;
         DUG 2 ;
         SWAP ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         CAR ;
         PUSH int 1 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         CDR ;
         ADD ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUG 2 ;
         SWAP ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CAR ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUG 2 ;
         DROP 2 ;
         NIL operation ;
         PAIR } }
