{ storage (pair (list %l string) (pair (int %result) (string %summary))) ;
  parameter string ;
  code { LAMBDA
           string
           nat
           { { PUSH nat 0 ;
               SWAP ;
               DUP ;
               DUG 2 ;
               SIZE ;
               PUSH nat 0 ;
               DUP ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               GT ;
               LOOP { DIG 2 ;
                      PUSH (map string nat)
                           { Elt "0" 0 ;
                             Elt "1" 1 ;
                             Elt "2" 2 ;
                             Elt "3" 3 ;
                             Elt "4" 4 ;
                             Elt "5" 5 ;
                             Elt "6" 6 ;
                             Elt "7" 7 ;
                             Elt "8" 8 ;
                             Elt "9" 9 } ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      PUSH nat 1 ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      SLICE ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      GET ;
                      IF_NONE { { PUSH string "Get-item:14" ; FAILWITH } } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      PUSH nat 10 ;
                      MUL ;
                      ADD ;
                      SWAP ;
                      DROP ;
                      DUG 2 ;
                      PUSH nat 1 ;
                      ADD ;
                      DUP ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      COMPARE ;
                      GT } ;
               DROP ;
               DROP ;
               SWAP ;
               DROP } } ;
         SWAP ;
         LAMBDA
           nat
           string
           { { DUP ;
               PUSH (list string) {} ;
               PUSH nat 0 ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               EQ ;
               IF { { DUP ; PUSH string "0" ; CONS ; SWAP ; DROP } } { {} } ;
               PUSH nat 0 ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               GT ;
               LOOP { DUP ;
                      PUSH (map nat string)
                           { Elt 0 "0" ;
                             Elt 1 "1" ;
                             Elt 2 "2" ;
                             Elt 3 "3" ;
                             Elt 4 "4" ;
                             Elt 5 "5" ;
                             Elt 6 "6" ;
                             Elt 7 "7" ;
                             Elt 8 "8" ;
                             Elt 9 "9" } ;
                      PUSH nat 10 ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      EDIV ;
                      IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CDR } ;
                      GET ;
                      IF_NONE { { PUSH string "Get-item:25" ; FAILWITH } } {} ;
                      CONS ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      DUP ;
                      PUSH nat 10 ;
                      SWAP ;
                      EDIV ;
                      IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                      SWAP ;
                      DROP ;
                      SWAP ;
                      PUSH nat 0 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      COMPARE ;
                      GT } ;
               DUP ;
               CONCAT ;
               SWAP ;
               DROP ;
               SWAP ;
               DROP ;
               SWAP ;
               DROP } } ;
         SWAP ;
         LAMBDA
           (pair (string %s) (string %sep))
           (list string)
           { { PUSH nat 0 ;
               PUSH (list string) {} ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               CAR ;
               SIZE ;
               PUSH nat 0 ;
               DUP ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               GT ;
               LOOP { DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      CDR ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CAR ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      SLICE ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      COMPARE ;
                      EQ ;
                      IF { { DIG 2 ;
                             DUP ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             CAR ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             SUB ;
                             ISNAT ;
                             IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                             DIG 6 ;
                             DUP ;
                             DUG 7 ;
                             SLICE ;
                             IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                             CONS ;
                             SWAP ;
                             DROP ;
                             DUG 2 ;
                             DIG 3 ;
                             PUSH nat 1 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             ADD ;
                             SWAP ;
                             DROP ;
                             DUG 3 } }
                         { {} } ;
                      PUSH nat 1 ;
                      ADD ;
                      DUP ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      COMPARE ;
                      GT } ;
               DROP ;
               DROP ;
               PUSH nat 0 ;
               DIG 3 ;
               DUP ;
               DUG 4 ;
               CAR ;
               SIZE ;
               COMPARE ;
               GT ;
               IF { { DUP ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      CAR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CAR ;
                      SIZE ;
                      SUB ;
                      ISNAT ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      SLICE ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      CONS ;
                      SWAP ;
                      DROP } }
                  { {} } ;
               DUP ;
               NIL string ;
               SWAP ;
               ITER { CONS } ;
               SWAP ;
               DROP ;
               SWAP ;
               DROP ;
               SWAP ;
               DROP } } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         PUSH (map string (lambda (pair int int) int)) {} ;
         LAMBDA
           (pair int int)
           int
           { { DUP ; CDR ; SWAP ; DUP ; DUG 2 ; CAR ; ADD ; SWAP ; DROP } } ;
         SOME ;
         PUSH string "+" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { { DUP ; CDR ; SWAP ; DUP ; DUG 2 ; CAR ; MUL ; SWAP ; DROP } } ;
         SOME ;
         PUSH string "*" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { { DUP ; CAR ; SWAP ; DUP ; DUG 2 ; CDR ; SUB ; SWAP ; DROP } } ;
         SOME ;
         PUSH string "-" ;
         UPDATE ;
         LAMBDA
           (pair int int)
           int
           { { PUSH int 1 ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               PUSH int 0 ;
               DUP ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               GT ;
               LOOP { DIG 2 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      CAR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      MUL ;
                      SWAP ;
                      DROP ;
                      DUG 2 ;
                      PUSH int 1 ;
                      ADD ;
                      DUP ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      COMPARE ;
                      GT } ;
               DROP ;
               DROP ;
               SWAP ;
               DROP } } ;
         SOME ;
         PUSH string "pow" ;
         UPDATE ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         PUSH string " " ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         PAIR %s %sep ;
         EXEC ;
         PUSH (list int) {} ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { DUP ;
                PUSH string "" ;
                COMPARE ;
                NEQ ;
                IF { { DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       MEM ;
                       IF { { SWAP ;
                              DUP ;
                              DUG 2 ;
                              IF_CONS
                                { { SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    IF_CONS
                                      { { DIG 5 ;
                                          DIG 2 ;
                                          DUP ;
                                          DUG 3 ;
                                          SWAP ;
                                          DROP ;
                                          DUG 5 ;
                                          DIG 5 ;
                                          DUP ;
                                          DIG 8 ;
                                          DUP ;
                                          DUG 9 ;
                                          DIG 7 ;
                                          DUP ;
                                          DUG 8 ;
                                          GET ;
                                          IF_NONE { { PUSH string "Get-item:58" ; FAILWITH } } {} ;
                                          DIG 3 ;
                                          DUP ;
                                          DUG 4 ;
                                          DIG 6 ;
                                          DUP ;
                                          DUG 7 ;
                                          PAIR ;
                                          EXEC ;
                                          CONS ;
                                          SWAP ;
                                          DROP ;
                                          DUG 5 ;
                                          DROP ;
                                          DROP } }
                                      { {} } ;
                                    DROP ;
                                    DROP } }
                                { {} } } }
                          { { DIG 8 ;
                              DUP ;
                              DUG 9 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              EXEC ;
                              INT ;
                              DIG 2 ;
                              DUP ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              CONS ;
                              SWAP ;
                              DROP ;
                              DUG 2 ;
                              DROP } } } }
                   { {} } ;
                DROP } ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         PAIR ;
         DUG 5 ;
         DIG 4 ;
         DROP ;
         DUP ;
         IF_CONS
           { { DIG 6 ;
               DUP ;
               DUG 7 ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CDR ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               PAIR ;
               SWAP ;
               PAIR ;
               DUG 7 ;
               DIG 6 ;
               DROP ;
               DUP ;
               PUSH int 0 ;
               COMPARE ;
               LT ;
               IF { { DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      CAR ;
                      DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      ISNAT ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      EXEC ;
                      PUSH string " = " ;
                      DIG 9 ;
                      DUP ;
                      DUG 10 ;
                      CONCAT ;
                      CONCAT ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUG 7 ;
                      DIG 6 ;
                      DROP } }
                  { { DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      DUP ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      CAR ;
                      DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      NEG ;
                      ISNAT ;
                      IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                      EXEC ;
                      PUSH string " = -" ;
                      DIG 9 ;
                      DUP ;
                      DUG 10 ;
                      CONCAT ;
                      CONCAT ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      DUG 7 ;
                      DIG 6 ;
                      DROP } } ;
               DROP ;
               DROP } }
           { {} } ;
         DROP ;
         DROP ;
         DROP ;
         DROP ;
         NIL operation ;
         PAIR ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP } }
