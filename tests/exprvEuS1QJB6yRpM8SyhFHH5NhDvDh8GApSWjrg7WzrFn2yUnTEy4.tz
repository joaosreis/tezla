{ parameter
    (or (or (or (address %banUser) (unit %bet))
            (or (unit %fund) (pair %hit (address %player) (nat %result))))
        (or (or (pair %launchBJ
                   (pair (address %player) (nat %result1))
                   (pair (nat %result2) (nat %result3)))
                (pair %stand
                   (pair (address %player) (nat %result1))
                   (pair (nat %result2) (nat %result3))))
            (or (address %unBanUser) (unit %unfund)))) ;
  storage
    (pair (pair (pair (set %bannedUsers address) (nat %blackjack))
                (pair (address %creator)
                      (map %games
                         address
                         (pair (pair (pair (nat %bet) (nat %cardsDealt))
                                     (pair (map %houseCards nat nat) (address %player)))
                               (pair (pair (map %playerCards nat nat) (nat %playerScore)) (nat %state))))))
          (pair (nat %maxBet) (nat %minBet))) ;
  code { PUSH nat 5 ;
         PUSH nat 0 ;
         EMPTY_MAP nat nat ;
         PUSH nat 0 ;
         SOME ;
         PUSH nat 0 ;
         UPDATE ;
         PAIR ;
         PAIR ;
         PUSH address "tz1burnburnburnburnburnburnburjAYjjX" ;
         EMPTY_MAP nat nat ;
         PUSH nat 0 ;
         SOME ;
         PUSH nat 0 ;
         UPDATE ;
         PAIR ;
         PUSH nat 0 ;
         PUSH nat 0 ;
         PAIR ;
         PAIR ;
         PAIR ;
         LAMBDA
           (pair bool string)
           unit
           { UNPAIR ; IF { DROP } { FAILWITH } ; UNIT } ;
         LAMBDA
           (pair nat bool)
           nat
           { UNPAIR ;
             PUSH nat 13 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             PUSH nat 1 ;
             PUSH nat 13 ;
             DIG 3 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             ADD ;
             DIG 2 ;
             PUSH nat 0 ;
             DUP 4 ;
             COMPARE ;
             EQ ;
             AND ;
             IF { DROP 2 ; PUSH nat 11 }
                { PUSH nat 12 ;
                  DUP 3 ;
                  COMPARE ;
                  EQ ;
                  PUSH nat 11 ;
                  DUP 4 ;
                  COMPARE ;
                  EQ ;
                  PUSH nat 10 ;
                  DUP 5 ;
                  COMPARE ;
                  EQ ;
                  PUSH nat 9 ;
                  DIG 5 ;
                  COMPARE ;
                  EQ ;
                  OR ;
                  OR ;
                  OR ;
                  IF { DROP ; PUSH nat 10 } {} } } ;
         LAMBDA
           nat
           bool
           { PUSH nat 12 ;
             PUSH nat 13 ;
             DUP 3 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             COMPARE ;
             EQ ;
             PUSH nat 11 ;
             PUSH nat 13 ;
             DUP 4 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             COMPARE ;
             EQ ;
             PUSH nat 10 ;
             PUSH nat 13 ;
             DUP 5 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             COMPARE ;
             EQ ;
             PUSH nat 9 ;
             PUSH nat 13 ;
             DIG 5 ;
             EDIV ;
             IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
             CDR ;
             COMPARE ;
             EQ ;
             OR ;
             OR ;
             OR } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         LAMBDA
           (pair (lambda (pair nat bool) nat) (map nat nat))
           (pair nat nat)
           { UNPAIR ;
             SWAP ;
             PUSH nat 0 ;
             PUSH nat 0 ;
             PAIR ;
             PUSH nat 0 ;
             PUSH bool False ;
             PAIR ;
             PAIR ;
             DUG 2 ;
             PAIR ;
             LAMBDA
               (pair (pair (map nat nat) (lambda (pair nat bool) nat)) (pair (pair bool nat) (pair nat nat)))
               (pair bool (pair (pair bool nat) (pair nat nat)))
               { UNPAIR ;
                 UNPAIR ;
                 DIG 2 ;
                 DUP ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 DUP 5 ;
                 SIZE ;
                 DUP 4 ;
                 COMPARE ;
                 LT ;
                 IF { DIG 4 ;
                      DUP 4 ;
                      GET ;
                      IF_NONE { PUSH nat 0 } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      NOT ;
                      PUSH nat 0 ;
                      PUSH nat 13 ;
                      DUP 4 ;
                      EDIV ;
                      IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                      CDR ;
                      COMPARE ;
                      EQ ;
                      AND ;
                      IF { SWAP ;
                           DROP ;
                           PUSH bool True ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           PAIR ;
                           DUP 6 ;
                           SWAP ;
                           EXEC ;
                           DIG 2 ;
                           ADD ;
                           PUSH bool True ;
                           PAIR }
                         { PUSH bool False ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           PAIR ;
                           DUP 7 ;
                           SWAP ;
                           EXEC ;
                           DIG 3 ;
                           ADD ;
                           DIG 2 ;
                           PAIR } ;
                      DUP 4 ;
                      CDR ;
                      DUP 5 ;
                      CAR ;
                      CDR ;
                      DUP 3 ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      PUSH bool False ;
                      DIG 2 ;
                      PAIR ;
                      DIG 4 ;
                      SWAP ;
                      EXEC ;
                      DIG 3 ;
                      CDR ;
                      CAR ;
                      ADD ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      ADD ;
                      DUP 3 ;
                      CDR ;
                      CDR ;
                      DIG 2 ;
                      PAIR ;
                      DIG 2 ;
                      CAR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PUSH bool True ;
                      PAIR }
                    { SWAP ; DIG 2 ; DIG 4 ; DIG 5 ; DROP 5 ; PUSH bool False ; PAIR } } ;
             SWAP ;
             APPLY ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; UNPAIR } ;
             SWAP ;
             DROP ;
             DUP ;
             CDR ;
             CDR ;
             SWAP ;
             CDR ;
             CAR ;
             PAIR } ;
         SWAP ;
         APPLY ;
         DUP 5 ;
         DUG 2 ;
         DUP ;
         DUG 3 ;
         PAIR 3 ;
         LAMBDA
           (pair (pair (lambda (map nat nat) (pair nat nat))
                       (pair (lambda nat bool)
                             (pair (pair (pair nat nat) (pair (map nat nat) address)) (pair (pair (map nat nat) nat) nat))))
                 (pair (pair (pair (pair (pair (set address) nat)
                                         (pair address
                                               (map address
                                                    (pair (pair (pair nat nat) (pair (map nat nat) address)) (pair (pair (map nat nat) nat) nat)))))
                                   (pair nat nat))
                             address)
                       bool))
           (pair (list operation)
                 (pair (pair (pair (set address) nat)
                             (pair address
                                   (map address
                                        (pair (pair (pair nat nat) (pair (map nat nat) address)) (pair (pair (map nat nat) nat) nat)))))
                       (pair nat nat)))
           { UNPAIR ;
             UNPAIR 3 ;
             DIG 3 ;
             UNPAIR ;
             UNPAIR ;
             DUP ;
             CAR ;
             CDR ;
             CDR ;
             DUP 3 ;
             GET ;
             IF_NONE { DIG 5 } { DIG 6 ; DROP } ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             DUP 6 ;
             SWAP ;
             EXEC ;
             DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP 3 ;
             CDR ;
             CAR ;
             CAR ;
             DIG 7 ;
             SWAP ;
             EXEC ;
             DUP ;
             CAR ;
             SWAP ;
             CDR ;
             PUSH address "tz1burnburnburnburnburnburnburjAYjjX" ;
             CONTRACT unit ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             PUSH mutez 1 ;
             UNIT ;
             TRANSFER_TOKENS ;
             DUP 6 ;
             CDR ;
             CDR ;
             DUP 4 ;
             DUP 8 ;
             CDR ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             DIG 6 ;
             CAR ;
             PAIR ;
             DUP 7 ;
             CAR ;
             CAR ;
             CDR ;
             DUP 7 ;
             COMPARE ;
             EQ ;
             DUP 8 ;
             CAR ;
             CAR ;
             CDR ;
             DUP 7 ;
             COMPARE ;
             EQ ;
             OR ;
             IF { DIG 4 ;
                  DIG 5 ;
                  DIG 8 ;
                  DIG 9 ;
                  DROP 4 ;
                  DUP 5 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  DIG 3 ;
                  COMPARE ;
                  EQ ;
                  DUP 5 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  DIG 4 ;
                  COMPARE ;
                  EQ ;
                  OR ;
                  IF { SWAP ;
                       DROP ;
                       DUP 3 ;
                       CONTRACT unit ;
                       IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                       PUSH mutez 1 ;
                       DUP 3 ;
                       CAR ;
                       CAR ;
                       CAR ;
                       MUL ;
                       UNIT ;
                       TRANSFER_TOKENS ;
                       PUSH nat 2 ;
                       DUP 3 ;
                       CDR ;
                       CAR ;
                       PAIR ;
                       DIG 2 ;
                       CAR ;
                       PAIR ;
                       PAIR }
                     { SWAP ; PUSH nat 3 ; DUP 3 ; CDR ; CAR ; PAIR ; DIG 2 ; CAR ; PAIR ; PAIR } }
                { DUP 7 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  DUP 4 ;
                  COMPARE ;
                  EQ ;
                  DUP 8 ;
                  CAR ;
                  CAR ;
                  CDR ;
                  DUP 6 ;
                  COMPARE ;
                  EQ ;
                  OR ;
                  IF { SWAP ;
                       DIG 2 ;
                       DIG 3 ;
                       DIG 4 ;
                       DIG 5 ;
                       DIG 8 ;
                       DROP 6 ;
                       DUP ;
                       CDR ;
                       CAR ;
                       CAR ;
                       PUSH nat 1 ;
                       GET ;
                       IF_NONE { PUSH nat 0 } {} ;
                       DUP 5 ;
                       SWAP ;
                       EXEC ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CAR ;
                       CAR ;
                       PUSH nat 0 ;
                       GET ;
                       IF_NONE { PUSH nat 0 } {} ;
                       DIG 5 ;
                       SWAP ;
                       EXEC ;
                       OR ;
                       PUSH nat 2 ;
                       DUP 3 ;
                       CDR ;
                       CAR ;
                       CAR ;
                       SIZE ;
                       COMPARE ;
                       EQ ;
                       AND ;
                       IF { DUP 3 ;
                            CONTRACT unit ;
                            IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                            PUSH mutez 1 ;
                            PUSH nat 2 ;
                            PUSH nat 5 ;
                            DUP 5 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            MUL ;
                            EDIV ;
                            IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                            CAR ;
                            MUL ;
                            UNIT ;
                            TRANSFER_TOKENS }
                          { DUP 3 ;
                            CONTRACT unit ;
                            IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                            PUSH mutez 1 ;
                            PUSH nat 2 ;
                            DUP 4 ;
                            CAR ;
                            CAR ;
                            CAR ;
                            MUL ;
                            MUL ;
                            UNIT ;
                            TRANSFER_TOKENS } ;
                       PUSH nat 1 ;
                       DUP 3 ;
                       CDR ;
                       CAR ;
                       PAIR ;
                       DIG 2 ;
                       CAR ;
                       PAIR ;
                       PAIR }
                     { DIG 9 ;
                       DROP ;
                       DUP 7 ;
                       CAR ;
                       CAR ;
                       CDR ;
                       DUP 5 ;
                       COMPARE ;
                       GT ;
                       IF { PUSH nat 3 ; SWAP ; DUP ; DUG 2 ; CDR ; CAR ; PAIR ; SWAP ; CAR ; PAIR }
                          {} ;
                       DIG 8 ;
                       IF { PUSH nat 0 ;
                            DUP 8 ;
                            CAR ;
                            CAR ;
                            CDR ;
                            DUP 5 ;
                            COMPARE ;
                            GT ;
                            IF { DIG 3 ;
                                 DROP ;
                                 PUSH nat 0 ;
                                 DUP 3 ;
                                 PAIR ;
                                 DUP 8 ;
                                 CAR ;
                                 CAR ;
                                 CDR ;
                                 DUP 6 ;
                                 COMPARE ;
                                 GT ;
                                 IF { DIG 4 ;
                                      DROP ;
                                      CDR ;
                                      PUSH nat 3 ;
                                      DUP 4 ;
                                      CDR ;
                                      CAR ;
                                      PAIR ;
                                      DIG 3 ;
                                      CAR ;
                                      PAIR ;
                                      PAIR }
                                    { DIG 2 ;
                                      DROP ;
                                      DIG 3 ;
                                      DUP 7 ;
                                      CAR ;
                                      CAR ;
                                      CDR ;
                                      SUB ;
                                      ABS ;
                                      SWAP ;
                                      CAR ;
                                      PAIR } }
                               { DIG 4 ;
                                 DROP ;
                                 DIG 3 ;
                                 DUP 7 ;
                                 CAR ;
                                 CAR ;
                                 CDR ;
                                 SUB ;
                                 ABS ;
                                 DIG 2 ;
                                 PAIR } ;
                            DUP ;
                            CAR ;
                            SWAP ;
                            CDR ;
                            DUP 4 ;
                            DUP 4 ;
                            DUP 4 ;
                            PAIR ;
                            PAIR ;
                            DUP 8 ;
                            CAR ;
                            CAR ;
                            CDR ;
                            DUP 7 ;
                            COMPARE ;
                            GT ;
                            IF { DIG 5 ;
                                 DROP 2 ;
                                 DUG 3 ;
                                 DUP ;
                                 DUG 4 ;
                                 PAIR ;
                                 PAIR ;
                                 DUP 5 ;
                                 CAR ;
                                 CAR ;
                                 CDR ;
                                 DUP 5 ;
                                 COMPARE ;
                                 GT ;
                                 IF { DIG 3 ;
                                      DROP ;
                                      DUP 5 ;
                                      CONTRACT unit ;
                                      IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                                      PUSH mutez 1 ;
                                      PUSH nat 2 ;
                                      DUP 6 ;
                                      CAR ;
                                      CAR ;
                                      CAR ;
                                      MUL ;
                                      MUL ;
                                      UNIT ;
                                      TRANSFER_TOKENS ;
                                      SWAP ;
                                      CAR ;
                                      CDR ;
                                      PUSH nat 1 ;
                                      DUP 5 ;
                                      CDR ;
                                      CAR ;
                                      PAIR ;
                                      DIG 4 ;
                                      CAR ;
                                      PAIR ;
                                      PAIR ;
                                      PAIR }
                                    { DIG 2 ;
                                      DROP ;
                                      DIG 2 ;
                                      DUP 4 ;
                                      CAR ;
                                      CAR ;
                                      CDR ;
                                      SUB ;
                                      ABS ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CDR ;
                                      SWAP ;
                                      DIG 2 ;
                                      CAR ;
                                      CAR ;
                                      PAIR ;
                                      PAIR } ;
                                 DUP ;
                                 CDR ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 CAR ;
                                 CDR ;
                                 DIG 2 ;
                                 CAR ;
                                 CAR ;
                                 PAIR ;
                                 PAIR }
                               { DIG 2 ;
                                 DIG 3 ;
                                 DIG 4 ;
                                 DIG 6 ;
                                 DROP 4 ;
                                 DIG 2 ;
                                 DUP 4 ;
                                 CAR ;
                                 CAR ;
                                 CDR ;
                                 SUB ;
                                 ABS ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 CDR ;
                                 SWAP ;
                                 DIG 2 ;
                                 CAR ;
                                 CAR ;
                                 PAIR ;
                                 PAIR } ;
                            DUP ;
                            CAR ;
                            CAR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            CAR ;
                            CDR ;
                            DUP 4 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            COMPARE ;
                            EQ ;
                            IF { DIG 2 ;
                                 DIG 3 ;
                                 DROP 3 ;
                                 DUP 3 ;
                                 CONTRACT unit ;
                                 IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                                 PUSH mutez 1 ;
                                 DUP 3 ;
                                 CAR ;
                                 CAR ;
                                 CAR ;
                                 MUL ;
                                 UNIT ;
                                 TRANSFER_TOKENS ;
                                 PUSH nat 2 ;
                                 DUP 3 ;
                                 CDR ;
                                 CAR ;
                                 PAIR ;
                                 DIG 2 ;
                                 CAR ;
                                 PAIR ;
                                 PAIR }
                               { DIG 3 ;
                                 SWAP ;
                                 COMPARE ;
                                 GT ;
                                 IF { SWAP ;
                                      DROP ;
                                      DUP 3 ;
                                      CONTRACT unit ;
                                      IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                                      PUSH mutez 1 ;
                                      PUSH nat 2 ;
                                      DUP 4 ;
                                      CAR ;
                                      CAR ;
                                      CAR ;
                                      MUL ;
                                      MUL ;
                                      UNIT ;
                                      TRANSFER_TOKENS ;
                                      PUSH nat 1 ;
                                      DUP 3 ;
                                      CDR ;
                                      CAR ;
                                      PAIR ;
                                      DIG 2 ;
                                      CAR ;
                                      PAIR ;
                                      PAIR }
                                    { SWAP ;
                                      CDR ;
                                      PUSH nat 3 ;
                                      DUP 3 ;
                                      CDR ;
                                      CAR ;
                                      PAIR ;
                                      DIG 2 ;
                                      CAR ;
                                      PAIR ;
                                      PAIR } } }
                          { DIG 2 ; DIG 3 ; DIG 4 ; DIG 5 ; DROP 4 ; PAIR } } } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CDR ;
             DUP 3 ;
             CAR ;
             DIG 5 ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             DUP 4 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 3 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             NIL operation ;
             DIG 2 ;
             CDR ;
             CONS ;
             PAIR } ;
         SWAP ;
         APPLY ;
         DIG 5 ;
         UNPAIR ;
         IF_LEFT
           { DIG 3 ;
             DIG 4 ;
             DROP 2 ;
             IF_LEFT
               { DIG 2 ;
                 DROP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     SWAP ;
                     PUSH string "Tezos.sender = self.creator" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DUP 3 ;
                     MEM ;
                     NOT ;
                     IF { DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CAR ;
                          CDR ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 4 ;
                          PUSH bool True ;
                          SWAP ;
                          UPDATE ;
                          PAIR ;
                          PAIR ;
                          PAIR }
                        { SWAP ; DROP ; PUSH string "user already banned" ; FAILWITH } ;
                     NIL operation ;
                     PAIR }
                   { DROP ;
                     PUSH string "banned user" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     MEM ;
                     NOT ;
                     PAIR ;
                     DUP 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH string "Tezos.amount < self.minBet" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CDR ;
                     PUSH mutez 1 ;
                     AMOUNT ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     COMPARE ;
                     GE ;
                     PAIR ;
                     DUP 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     SENDER ;
                     GET ;
                     IF_NONE { DIG 2 } { DIG 3 ; DROP } ;
                     PUSH string "_bj_game.state = 0n" ;
                     PUSH nat 0 ;
                     DIG 2 ;
                     CDR ;
                     CDR ;
                     COMPARE ;
                     NEQ ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PUSH nat 5 ;
                     PUSH nat 0 ;
                     EMPTY_MAP nat nat ;
                     PUSH nat 0 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SENDER ;
                     EMPTY_MAP nat nat ;
                     PUSH nat 0 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     PAIR ;
                     PUSH nat 0 ;
                     PUSH mutez 1 ;
                     AMOUNT ;
                     EDIV ;
                     IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     SOME ;
                     SENDER ;
                     UPDATE ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } }
               { IF_LEFT
                   { DIG 2 ; DIG 3 ; DIG 4 ; DROP 4 ; NIL operation ; PAIR }
                   { UNPAIR ;
                     DIG 2 ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 3 ;
                     GET ;
                     IF_NONE { DIG 5 } { DIG 6 ; DROP } ;
                     PUSH string "_bj_game.state =/= 0n" ;
                     PUSH nat 0 ;
                     DUP 3 ;
                     CDR ;
                     CDR ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     DUP 3 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     DIG 6 ;
                     DUP 5 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     SIZE ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     PUSH nat 1 ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     ADD ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PUSH bool False ;
                     DUP 4 ;
                     DUP 4 ;
                     CDR ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 4 ;
                     DIG 6 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     EXEC } } }
           { IF_LEFT
               { IF_LEFT
                   { DIG 3 ;
                     DIG 4 ;
                     DROP 2 ;
                     DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     DIG 3 ;
                     DIG 2 ;
                     UNPAIR ;
                     PUSH string "Tezos.sender = self.creator" ;
                     DUP 4 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 7 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH bool False ;
                     DUP 5 ;
                     DUP 5 ;
                     CDR ;
                     DUP 6 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     EMPTY_MAP nat nat ;
                     DIG 7 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     DIG 10 ;
                     SOME ;
                     PUSH nat 1 ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     DUP 8 ;
                     EMPTY_MAP nat nat ;
                     DIG 7 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     PAIR ;
                     PUSH nat 3 ;
                     DUP 8 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 10 ;
                     GET ;
                     IF_NONE { DIG 10 } { DIG 11 ; DROP } ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     DIG 6 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     EXEC }
                   { DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     DIG 3 ;
                     DIG 2 ;
                     UNPAIR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DUP 5 ;
                     GET ;
                     IF_NONE { DIG 9 } { DIG 10 ; DROP } ;
                     PUSH string "_bj_game.state =/= 0n" ;
                     PUSH nat 0 ;
                     DUP 3 ;
                     CDR ;
                     CDR ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 10 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     DIG 8 ;
                     SWAP ;
                     EXEC ;
                     CDR ;
                     PUSH nat 17 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LT ;
                     IF { SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          DUP 4 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          DUP 6 ;
                          DUP 6 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          SIZE ;
                          SWAP ;
                          SOME ;
                          SWAP ;
                          UPDATE ;
                          PAIR ;
                          DUP 4 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          PUSH nat 1 ;
                          DIG 5 ;
                          CAR ;
                          CAR ;
                          CDR ;
                          ADD ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          PUSH bool True ;
                          DIG 3 ;
                          PAIR ;
                          DUP 9 ;
                          SWAP ;
                          EXEC ;
                          DIG 2 ;
                          ADD ;
                          SWAP ;
                          PAIR }
                        { DIG 2 ; DROP ; SWAP ; PAIR } ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     PUSH nat 17 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LT ;
                     IF { SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          DUP 4 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          DUP 6 ;
                          DUP 6 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          SIZE ;
                          SWAP ;
                          SOME ;
                          SWAP ;
                          UPDATE ;
                          PAIR ;
                          DUP 4 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          PUSH nat 1 ;
                          DIG 5 ;
                          CAR ;
                          CAR ;
                          CDR ;
                          ADD ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          PUSH bool True ;
                          DIG 3 ;
                          PAIR ;
                          DUP 8 ;
                          SWAP ;
                          EXEC ;
                          DIG 2 ;
                          ADD ;
                          SWAP ;
                          PAIR }
                        { DIG 2 ; DROP ; SWAP ; PAIR } ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     PUSH nat 17 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     LT ;
                     IF { SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CDR ;
                          CDR ;
                          DUP 4 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          DUP 8 ;
                          DUP 6 ;
                          CAR ;
                          CDR ;
                          CAR ;
                          SIZE ;
                          SWAP ;
                          SOME ;
                          SWAP ;
                          UPDATE ;
                          PAIR ;
                          DUP 4 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          PUSH nat 1 ;
                          DIG 5 ;
                          CAR ;
                          CAR ;
                          CDR ;
                          ADD ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          PUSH bool True ;
                          DIG 5 ;
                          PAIR ;
                          DIG 6 ;
                          SWAP ;
                          EXEC ;
                          DIG 2 ;
                          ADD ;
                          SWAP ;
                          PAIR }
                        { DIG 4 ; DIG 6 ; DROP 2 ; SWAP ; PAIR } ;
                     PUSH bool True ;
                     DUP 4 ;
                     DUP 4 ;
                     CDR ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 4 ;
                     CAR ;
                     DIG 6 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DUP 5 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 4 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     EXEC } }
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 6 ;
                 DROP 4 ;
                 IF_LEFT
                   { SWAP ;
                     PUSH string "Tezos.sender = self.creator" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     DUP 3 ;
                     MEM ;
                     IF { DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CAR ;
                          CDR ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 4 ;
                          PUSH bool False ;
                          SWAP ;
                          UPDATE ;
                          PAIR ;
                          PAIR ;
                          PAIR }
                        { SWAP ; DROP ; PUSH string "user already unbanned" ; FAILWITH } ;
                     NIL operation ;
                     PAIR }
                   { DIG 2 ;
                     DROP 2 ;
                     DUP ;
                     CAR ;
                     CDR ;
                     CAR ;
                     CONTRACT unit ;
                     IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                     BALANCE ;
                     UNIT ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } } } } }
