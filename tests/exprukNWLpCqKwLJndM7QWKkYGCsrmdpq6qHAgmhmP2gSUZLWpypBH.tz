{ parameter
    (or (or (pair %add (nat %addAmount) (bytes %hashedSecret))
            (pair %initiate
               (pair (pair (bytes %hashedSecret) (address %participant))
                     (pair (nat %payoffAmount) (timestamp %refundTime)))
               (pair (address %tokenAddress) (nat %totalAmount))))
        (or (bytes %redeem) (bytes %refund))) ;
  storage
    (big_map
       bytes
       (pair (pair (pair (address %initiator) (address %participant))
                   (pair (nat %payoffAmount) (timestamp %refundTime)))
             (pair (address %tokenAddress) (nat %totalAmount)))) ;
  code { LAMBDA
           (pair bytes
                 (big_map
                    bytes
                    (pair (pair (pair address address) (pair nat timestamp)) (pair address nat))))
           (pair (pair (pair address address) (pair nat timestamp)) (pair address nat))
           { UNPAIR ;
             GET ;
             IF_NONE { PUSH string "no swap for such hash" ; FAILWITH } {} } ;
         LAMBDA
           address
           (contract (pair address (pair address nat)))
           { CONTRACT %transfer (pair address (pair address nat)) ;
             IF_NONE { PUSH string "expected transfer entrypoint" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair (contract (pair address (pair address nat))) address) (pair address nat))
           operation
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DIG 2 ;
             PUSH mutez 0 ;
             DIG 3 ;
             DIG 3 ;
             PAIR ;
             DIG 3 ;
             PAIR ;
             TRANSFER_TOKENS } ;
         DIG 3 ;
         UNPAIR ;
         AMOUNT ;
         PUSH mutez 0 ;
         COMPARE ;
         NEQ ;
         IF { PUSH string "this contract does not accept tez" ; FAILWITH } {} ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF { PUSH string "refund time has already come" ; FAILWITH } {} ;
                 DUG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 DUP 3 ;
                 CDR ;
                 CDR ;
                 ADD ;
                 DUP 3 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DUP 3 ;
                 CAR ;
                 PAIR ;
                 DUP 4 ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 CDR ;
                 CAR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 CAR ;
                 SELF_ADDRESS ;
                 PAIR ;
                 SENDER ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 4 ;
                 DROP ;
                 DUP ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "payoff amount exceeds the total" ; FAILWITH } {} ;
                 NOW ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 LE ;
                 IF { PUSH string "refund time has already come" ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SIZE ;
                 PUSH nat 32 ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "hash size doesn't equal 32 bytes" ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SOURCE ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH string "SOURCE cannot act as participant" ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF { PUSH string "SENDER cannot act as participant" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP 3 ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 GET ;
                 IF_NONE
                   { DIG 2 ; SWAP ; DUP 3 ; CAR ; CAR ; CAR ; SWAP ; SOME ; SWAP ; UPDATE }
                   { DROP 2 ; PUSH string "swap for this hash is already initiated" ; FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 CDR ;
                 CDR ;
                 SELF_ADDRESS ;
                 PAIR ;
                 SENDER ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } }
           { IF_LEFT
               { DUP ;
                 SIZE ;
                 PUSH nat 32 ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "secret size doesn't equal 32 bytes" ; FAILWITH } {} ;
                 SHA256 ;
                 SHA256 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF { PUSH string "refund time has already come" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CAR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DUP 3 ;
                 CDR ;
                 CDR ;
                 SUB ;
                 ABS ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 SELF_ADDRESS ;
                 DUP 3 ;
                 PAIR ;
                 PAIR ;
                 DUP 6 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 COMPARE ;
                 GT ;
                 IF { NIL operation ;
                      DIG 2 ;
                      SENDER ;
                      PAIR ;
                      SELF_ADDRESS ;
                      DIG 3 ;
                      PAIR ;
                      PAIR ;
                      DIG 5 ;
                      SWAP ;
                      EXEC ;
                      CONS }
                    { SWAP ; DIG 5 ; DROP 3 ; NIL operation } ;
                 DIG 3 ;
                 DIG 3 ;
                 NONE (pair (pair (pair address address) (pair nat timestamp)) (pair address nat)) ;
                 SWAP ;
                 UPDATE ;
                 SWAP ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "refund time hasn't come" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CAR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 SELF_ADDRESS ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DUG 2 ;
                 NONE (pair (pair (pair address address) (pair nat timestamp)) (pair address nat)) ;
                 SWAP ;
                 UPDATE ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } } }
