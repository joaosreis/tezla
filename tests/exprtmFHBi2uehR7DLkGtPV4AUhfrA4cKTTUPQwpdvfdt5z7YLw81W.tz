{ storage (list (pair (pair (pair (int %a) (int %b)) (int %c)) (int %d))) ;
  parameter (pair (pair (pair (int %a) (int %b)) (int %c)) (int %d)) ;
  code { LAMBDA
           (pair (int %a) (int %b))
           int
           { { PUSH int 1 ;
               SWAP ;
               DUP ;
               DUG 2 ;
               CDR ;
               PUSH int 0 ;
               DUP ;
               DIG 2 ;
               DUP ;
               DUG 3 ;
               COMPARE ;
               GT ;
               LOOP { DIG 2 ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      CAR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      MUL ;
                      SWAP ;
                      DROP ;
                      DUG 2 ;
                      PUSH int 1 ;
                      ADD ;
                      DUP ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      COMPARE ;
                      GT } ;
               DROP ;
               DROP ;
               SWAP ;
               DROP } } ;
         SWAP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         PUSH int 4374 ;
         PAIR ;
         EXEC ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         PUSH int 2401 ;
         PAIR ;
         EXEC ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CDR ;
         PUSH int 224 ;
         PAIR ;
         EXEC ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CAR ;
         CAR ;
         PUSH int 125 ;
         PAIR ;
         EXEC ;
         MUL ;
         MUL ;
         MUL ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         PUSH int 4375 ;
         PAIR ;
         EXEC ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CDR ;
         PUSH int 2400 ;
         PAIR ;
         EXEC ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CAR ;
         CDR ;
         PUSH int 225 ;
         PAIR ;
         EXEC ;
         DIG 6 ;
         DUP ;
         DUG 7 ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CAR ;
         CAR ;
         CAR ;
         PUSH int 126 ;
         PAIR ;
         EXEC ;
         MUL ;
         MUL ;
         MUL ;
         COMPARE ;
         EQ ;
         IF { {} }
            { { PUSH string
                     "WrongCondition: (((self.pow.call(sp.record(a = 126, b = params.a)) * self.pow.call(sp.record(a = 225, b = params.b))) * self.pow.call(sp.record(a = 2400, b = params.c))) * self.pow.call(sp.record(a = 4375, b = params.d))) == (((self.pow.call(sp.record(a = 125, b = params.a)) * self.pow.call(sp.record(a = 224, b = params.b))) * self.pow.call(sp.record(a = 2401, b = params.c))) * self.pow.call(sp.record(a = 4374, b = params.d)))" ;
                FAILWITH } } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CDR ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR ;
         PAIR ;
         CONS ;
         DUG 2 ;
         DROP ;
         DROP ;
         NIL operation ;
         PAIR ;
         SWAP ;
         DROP } }
