{ parameter
    (or (or (bytes %administrate)
            (or (pair %cancel_request (address %clientAddress) (nat %requestId))
                (pair %fulfill_request
                   (bool %force)
                   (pair (bytes %requestKey)
                         (map %result string (or (bytes %bytes) (or (int %int) (string %string))))))))
        (or (or (address %get_min_amount) (address %get_min_cancel_timeout))
            (or (pair %on_token_transfer
                   (nat %amount)
                   (pair (bytes %data) (pair (address %sender) (nat %tokenId))))
                (pair %withdraw_payment (nat %amount) (address %recipientAddress))))) ;
  storage
    (pair (pair %config
             (pair (bool %active) (address %adminAddress))
             (pair (int %minCancelTimeout) (pair (nat %minPayment) (address %tokenAddress))))
          (big_map %requests
             bytes
             (pair (nat %payment)
                   (pair %request
                      (address %callbackAddress)
                      (pair (timestamp %cancelTimeout)
                            (pair (address %clientAddress)
                                  (pair (nat %id)
                                        (pair (string %jobId)
                                              (pair (address %oracleAddress)
                                                    (map %parameters string (or (bytes %bytes) (or (int %int) (string %string))))))))))))) ;
  code { CAST (pair (or (or bytes
                            (or (pair address nat) (pair bool (pair bytes (map string (or bytes (or int string)))))))
                        (or (or address address) (or (pair nat (pair bytes (pair address nat))) (pair nat address))))
                    (pair (pair (pair bool address) (pair int (pair nat address)))
                          (big_map
                             bytes
                             (pair nat
                                   (pair address
                                         (pair timestamp
                                               (pair address
                                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))))))) ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {} { PUSH string "ORACLE_NotAdmin" ; FAILWITH } ;
                 DUP ;
                 UNPACK (list (or bool (or address address))) ;
                 { IF_NONE { PUSH string "ORACLE_AdministrationActionsInvalid" ; FAILWITH } {} } ;
                 ITER { IF_LEFT
                          { DIG 2 ; DUP ; CAR ; UNPAIR ; CDR ; DIG 3 ; PAIR ; PAIR ; UPDATE 1 ; SWAP }
                          { IF_LEFT
                              { DIG 2 ;
                                DUP ;
                                CAR ;
                                UNPAIR ;
                                CAR ;
                                DIG 3 ;
                                SWAP ;
                                PAIR ;
                                PAIR ;
                                UPDATE 1 ;
                                SWAP }
                              { DIG 2 ; DUP ; CAR ; DIG 2 ; UPDATE 6 ; UPDATE 1 ; SWAP } } } ;
                 DROP ;
                 NIL operation }
               { IF_LEFT
                   { NIL operation ;
                     DUP 3 ;
                     UNPAIR ;
                     SWAP ;
                     NONE (pair nat
                                (pair address
                                      (pair timestamp
                                            (pair address
                                                  (pair nat (pair string (pair address (map string (or bytes (or int string)))))))))) ;
                     DIG 4 ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     PAIR ;
                     PACK ;
                     SHA3 ;
                     GET_AND_UPDATE ;
                     SWAP ;
                     DUG 2 ;
                     DUP ;
                     { IF_NONE { PUSH string "ORACLE_RequestUnknown" ; FAILWITH } {} } ;
                     GET 5 ;
                     NOW ;
                     COMPARE ;
                     GE ;
                     IF {} { PUSH string "ORACLE_CannotCancelBeforeTimeout" ; FAILWITH } ;
                     DUP 5 ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH bool True }
                        { SWAP ; DUP ; DUG 2 ; CAR ; CDR ; SENDER ; COMPARE ; EQ } ;
                     IF {} { PUSH string "ORACLE_SenderIsNotRequesterOrAdmin" ; FAILWITH } ;
                     DIG 3 ;
                     DIG 5 ;
                     CAR ;
                     GET 6 ;
                     CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                     { IF_NONE { PUSH string "ORACLE_InvalidTokenInterface" ; FAILWITH } {} } ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     NIL (pair address (pair nat nat)) ;
                     DIG 5 ;
                     { IF_NONE { PUSH string "ORACLE_RequestUnknown" ; FAILWITH } {} } ;
                     CAR ;
                     PUSH nat 0 ;
                     DIG 9 ;
                     CAR ;
                     PAIR 3 ;
                     CONS ;
                     SELF_ADDRESS ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DUG 2 ;
                     PAIR ;
                     SWAP }
                   { NIL operation ;
                     DIG 2 ;
                     UNPAIR ;
                     DUP ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "ORACLE_NotAdmin" ; FAILWITH } ;
                     SWAP ;
                     NONE (pair nat
                                (pair address
                                      (pair timestamp
                                            (pair address
                                                  (pair nat (pair string (pair address (map string (or bytes (or int string)))))))))) ;
                     DUP 5 ;
                     GET 3 ;
                     GET_AND_UPDATE ;
                     SWAP ;
                     DUG 2 ;
                     DIG 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     { IF_NONE { PUSH string "ORACLE_RequestUnknown" ; FAILWITH } {} } ;
                     GET 3 ;
                     CONTRACT (pair address (pair (map string (or bytes (or int string))) nat)) ;
                     { IF_NONE { PUSH string "ORACLE_InvalidClientInterface" ; FAILWITH } {} } ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     { IF_NONE { PUSH string "ORACLE_RequestUnknown" ; FAILWITH } {} } ;
                     GET 9 ;
                     DIG 7 ;
                     GET 4 ;
                     DIG 5 ;
                     { IF_NONE { PUSH string "ORACLE_RequestUnknown" ; FAILWITH } {} } ;
                     GET 7 ;
                     PAIR 3 ;
                     TRANSFER_TOKENS ;
                     CONS ;
                     DUG 2 ;
                     PAIR ;
                     SWAP } } }
           { IF_LEFT
               { IF_LEFT
                   { CONTRACT nat ;
                     { IF_NONE { PUSH string "ORACLE_InvalidClientInterface" ; FAILWITH } {} } ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     CAR ;
                     GET 5 ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { CONTRACT int ;
                     { IF_NONE { PUSH string "ORACLE_InvalidClientInterface" ; FAILWITH } {} } ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DUP 4 ;
                     CAR ;
                     GET 3 ;
                     TRANSFER_TOKENS ;
                     CONS } }
               { IF_LEFT
                   { SWAP ;
                     UNPAIR ;
                     DUP ;
                     GET 6 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "ORACLE_SenderNotToken" ; FAILWITH } ;
                     DIG 2 ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     UNPACK
                       (pair address
                             (pair timestamp
                                   (pair address
                                         (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                     { IF_NONE { PUSH string "ORACLE_FailedToUnpackData" ; FAILWITH } {} } ;
                     GET 5 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "ORACLE_SenderNotMatch" ; FAILWITH } ;
                     DUP 5 ;
                     DUP 3 ;
                     UNPACK
                       (pair address
                             (pair timestamp
                                   (pair address
                                         (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                     { IF_NONE { PUSH string "ORACLE_FailedToUnpackData" ; FAILWITH } {} } ;
                     GET 7 ;
                     DUP 3 ;
                     PAIR ;
                     PACK ;
                     SHA3 ;
                     MEM ;
                     IF { PUSH string "ORACLE_RequestKeyAlreadyKnown" ; FAILWITH } {} ;
                     DIG 4 ;
                     DUP 3 ;
                     UNPACK
                       (pair address
                             (pair timestamp
                                   (pair address
                                         (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                     { IF_NONE { PUSH string "ORACLE_FailedToUnpackData" ; FAILWITH } {} } ;
                     DIG 4 ;
                     PAIR ;
                     SOME ;
                     DIG 3 ;
                     UNPACK
                       (pair address
                             (pair timestamp
                                   (pair address
                                         (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                     { IF_NONE { PUSH string "ORACLE_FailedToUnpackData" ; FAILWITH } {} } ;
                     GET 7 ;
                     DIG 3 ;
                     PAIR ;
                     PACK ;
                     SHA3 ;
                     UPDATE ;
                     SWAP ;
                     PAIR ;
                     NIL operation }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     IF {} { PUSH string "ORACLE_NotAdmin" ; FAILWITH } ;
                     NIL operation ;
                     DUP 3 ;
                     CAR ;
                     GET 6 ;
                     CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                     { IF_NONE { PUSH string "ORACLE_InvalidTokenInterface" ; FAILWITH } {} } ;
                     PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     NIL (pair address (pair nat nat)) ;
                     DUP 6 ;
                     CAR ;
                     PUSH nat 0 ;
                     DIG 7 ;
                     CDR ;
                     PAIR 3 ;
                     CONS ;
                     SELF_ADDRESS ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     CONS } } } ;
         PAIR } }
