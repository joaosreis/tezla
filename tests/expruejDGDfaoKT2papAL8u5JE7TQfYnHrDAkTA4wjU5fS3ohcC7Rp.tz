{ storage
    (pair (big_map %accessRequests
             (pair (pair (nat %datasourceId) (address %providerAddress))
                   (pair (address %requesterAddress) (string %scopeId)))
             (pair (pair (timestamp %createdAt) (pair (nat %datasourceId) (option %jwtToken string)))
                   (pair (pair (address %providerAddress) (address %requesterAddress))
                         (pair (string %scopeId) (string %status)))))
          (map %organizations
             address
             (pair (string %name) (pair (string %publicKey) (address %publicKeyHash))))) ;
  parameter
    (or (pair %grantAccess
           (pair %accessRequestKey
              (pair (nat %datasourceId) (address %providerAddress))
              (pair (address %requesterAddress) (string %scopeId)))
           (string %jwtToken))
        (pair %requestAccess
           (pair (nat %datasourceId) (address %providerAddress))
           (pair (address %requesterAddress) (string %scopeId)))) ;
  code { UNPAIR ;
         IF_LEFT
           { SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             SENDER ;
             MEM ;
             IF {}
                { PUSH string "WrongCondition: self.data.organizations.contains(sp.sender)" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             MEM ;
             IF {}
                { PUSH string
                       "WrongCondition: self.data.accessRequests.contains(params.accessRequestKey)" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 74 ; FAILWITH } {} ;
             GET 3 ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "WrongCondition: sp.sender == self.data.accessRequests[params.accessRequestKey].providerAddress" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 74 ; FAILWITH } {} ;
             GET 3 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CDR ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "WrongCondition: params.accessRequestKey.providerAddress == self.data.accessRequests[params.accessRequestKey].providerAddress" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 74 ; FAILWITH } {} ;
             GET 3 ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             GET 3 ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "WrongCondition: params.accessRequestKey.requesterAddress == self.data.accessRequests[params.accessRequestKey].requesterAddress" ;
                  FAILWITH } ;
             PUSH string "requested" ;
             DUP 3 ;
             CAR ;
             DUP 3 ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 74 ; FAILWITH } {} ;
             GET 6 ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string
                       "WrongCondition: self.data.accessRequests[params.accessRequestKey].status == 'requested'" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             CAR ;
             DUP ;
             DUP 4 ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 80 ; FAILWITH } {} ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             CAR ;
             DUP 7 ;
             CDR ;
             SOME ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 1 ;
             DUP ;
             CAR ;
             DUP ;
             DIG 3 ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 81 ; FAILWITH } {} ;
             PUSH string "granted" ;
             UPDATE 6 ;
             SOME ;
             SWAP ;
             UPDATE ;
             UPDATE 1 }
           { SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET 3 ;
             MEM ;
             IF {}
                { PUSH string
                       "WrongCondition: self.data.organizations.contains(params.requesterAddress)" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             MEM ;
             IF {}
                { PUSH string
                       "WrongCondition: self.data.organizations.contains(params.providerAddress)" ;
                  FAILWITH } ;
             DUP ;
             GET 3 ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: sp.sender == params.requesterAddress" ;
                  FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             MEM ;
             IF { PUSH string "WrongCondition: ~ (self.data.accessRequests.contains(params))" ;
                  FAILWITH }
                {} ;
             SWAP ;
             DUP ;
             CAR ;
             PUSH string "requested" ;
             DUP 4 ;
             GET 4 ;
             PAIR ;
             DIG 3 ;
             DUP ;
             GET 3 ;
             SWAP ;
             DUP ;
             DUG 5 ;
             CAR ;
             CDR ;
             PAIR ;
             PAIR ;
             NONE string ;
             DUP 5 ;
             CAR ;
             CAR ;
             PAIR ;
             NOW ;
             PAIR ;
             PAIR ;
             SOME ;
             DIG 3 ;
             UPDATE ;
             UPDATE 1 } ;
         NIL operation ;
         PAIR } }
