{ storage
    (pair (pair (pair (address %administrator) (set %all_tokens nat))
                (pair (big_map %initial_hodlers address nat)
                      (big_map %ledger (pair (address %owner) (nat %token_id)) nat)))
          (pair (pair (big_map %metadata string bytes)
                      (big_map %offer
                         nat
                         (pair (bool %is_for_sale) (pair (mutez %sale_value) (address %seller)))))
                (pair (bool %paused)
                      (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))))) ;
  parameter
    (or (map %mint string bytes) (or (address %set_administrator) (bool %set_pause))) ;
  code { UNPAIR ;
         IF_LEFT
           { SWAP ;
             DUP ;
             DUG 2 ;
             GET 5 ;
             IF { PUSH string "CONTRACT IS PAUSED" ; FAILWITH } {} ;
             PUSH nat 10000 ;
             DUP 3 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             COMPARE ;
             LT ;
             IF {} { PUSH string "CRYPTOBOT_CREATION_LIMIT_EXCEEDED" ; FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CAR ;
             SENDER ;
             MEM ;
             IF { PUSH nat 5 ;
                  DUP 3 ;
                  CAR ;
                  CDR ;
                  CAR ;
                  SENDER ;
                  GET ;
                  IF_NONE { PUSH int 92 ; FAILWITH } {} ;
                  COMPARE ;
                  LT ;
                  IF { SWAP ;
                       UNPAIR ;
                       UNPAIR ;
                       SWAP ;
                       UNPAIR ;
                       DUP ;
                       SENDER ;
                       DUP ;
                       DUG 2 ;
                       GET ;
                       IF_NONE { PUSH int 93 ; FAILWITH } {} ;
                       PUSH nat 1 ;
                       ADD ;
                       SOME ;
                       SWAP ;
                       UPDATE ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       PAIR ;
                       SWAP }
                     { PUSH string "CRYPTOBOT_CREATION_LIMIT_EXCEEDED" ; FAILWITH } }
                { SWAP ;
                  UNPAIR ;
                  UNPAIR ;
                  SWAP ;
                  UNPAIR ;
                  PUSH (option nat) (Some 1) ;
                  SENDER ;
                  UPDATE ;
                  PAIR ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  SWAP } ;
             SWAP ;
             DUP ;
             CAR ;
             CAR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             MEM ;
             IF { PUSH string "CRYPTOBOT_CANT_MINT_SAME_TOKEN_TWICE" ; FAILWITH } {} ;
             SWAP ;
             DUP ;
             DUG 2 ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             PUSH (option nat) (Some 1) ;
             DIG 6 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             SENDER ;
             PAIR %owner %token_id ;
             UPDATE ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             DUP ;
             DUG 2 ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             DIG 4 ;
             DUP 6 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             PAIR %token_id %token_info ;
             SOME ;
             DIG 5 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             UPDATE ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DUP ;
             UNPAIR ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             PUSH bool True ;
             DIG 5 ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             UPDATE ;
             SWAP ;
             PAIR ;
             PAIR ;
             PAIR }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 CDR ;
                 DIG 3 ;
                 PAIR ;
                 PAIR ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH string "WrongCondition: sp.sender == self.data.administrator" ;
                      FAILWITH } ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CDR ;
                 DIG 3 ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR } } ;
         NIL operation ;
         PAIR } }
