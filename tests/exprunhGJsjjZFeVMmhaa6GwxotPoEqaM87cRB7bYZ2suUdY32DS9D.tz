{ parameter nat ;
  storage string ;
  code { DUP ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         PUSH string "" ;
         PUSH nat 0 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "0" }
            { EMPTY_MAP nat string ;
              PUSH string "9" ;
              SOME ;
              PUSH nat 9 ;
              UPDATE ;
              PUSH string "8" ;
              SOME ;
              PUSH nat 8 ;
              UPDATE ;
              PUSH string "7" ;
              SOME ;
              PUSH nat 7 ;
              UPDATE ;
              PUSH string "6" ;
              SOME ;
              PUSH nat 6 ;
              UPDATE ;
              PUSH string "5" ;
              SOME ;
              PUSH nat 5 ;
              UPDATE ;
              PUSH string "4" ;
              SOME ;
              PUSH nat 4 ;
              UPDATE ;
              PUSH string "3" ;
              SOME ;
              PUSH nat 3 ;
              UPDATE ;
              PUSH string "2" ;
              SOME ;
              PUSH nat 2 ;
              UPDATE ;
              PUSH string "1" ;
              SOME ;
              PUSH nat 1 ;
              UPDATE ;
              PUSH string "0" ;
              SOME ;
              PUSH nat 0 ;
              UPDATE ;
              DIP { DIP { DUP } ; SWAP } ;
              SWAP ;
              PUSH unit Unit ;
              SWAP ;
              LAMBDA
                (pair nat unit)
                (pair bool unit)
                { DUP ;
                  CAR ;
                  SWAP ;
                  CDR ;
                  PUSH nat 0 ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  COMPARE ;
                  NEQ ;
                  IF { PUSH string "in_loop" ; FAILWITH } { DUP ; PUSH bool False ; PAIR } ;
                  DIP { DROP 2 } } ;
              SWAP ;
              APPLY ;
              SWAP ;
              PUSH bool True ;
              LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
              SWAP ;
              DROP ;
              PUSH string "end_loop" ;
              FAILWITH } ;
         DUP ;
         DIP { DROP 4 } ;
         DUP ;
         NIL operation ;
         PAIR ;
         DIP { DROP 2 } } }
