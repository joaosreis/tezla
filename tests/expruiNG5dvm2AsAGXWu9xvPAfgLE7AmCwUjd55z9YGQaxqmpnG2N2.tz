{ storage
    (pair (pair (nat %currentPlayer) (bool %isStarted))
          (pair (int %nextPlayer) (map %players address (pair nat (pair int int))))) ;
  parameter
    (or (or (unit %play_bottom) (or (unit %play_left) (unit %play_right)))
        (or (unit %play_top) (or (unit %register) (unit %start)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   CDR ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                   CAR ;
                   COMPARE ;
                   NEQ ;
                   IF { { PUSH string "Not your turn" ; FAILWITH } } { {} } ;
                   DROP } }
               { IF_LEFT
                   { { SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       SENDER ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                       CAR ;
                       COMPARE ;
                       NEQ ;
                       IF { { PUSH string "Not your turn" ; FAILWITH } } { {} } ;
                       DROP } }
                   { { SWAP ;
                       DUP ;
                       DUG 2 ;
                       CAR ;
                       CAR ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       SENDER ;
                       GET ;
                       IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                       CAR ;
                       COMPARE ;
                       NEQ ;
                       IF { { PUSH string "Not your turn" ; FAILWITH } } { {} } ;
                       DROP } } } }
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   CDR ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                   CAR ;
                   COMPARE ;
                   NEQ ;
                   IF { { PUSH string "Not your turn" ; FAILWITH } } { {} } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CDR ;
                   CDR ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                   CDR ;
                   CDR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CDR ;
                   CDR ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                   CDR ;
                   CAR ;
                   PAIR ;
                   DUP ;
                   CDR ;
                   PUSH int 1 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   SUB ;
                   PAIR ;
                   SWAP ;
                   DROP ;
                   DUP ;
                   CAR ;
                   PUSH int 0 ;
                   COMPARE ;
                   GT ;
                   IF { { PUSH string "Can' move outside of the board" ; FAILWITH } }
                      { {} } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   CDR ;
                   CDR ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH string "Get-item:-1" ; FAILWITH } } {} ;
                   CAR ;
                   PAIR ;
                   SOME ;
                   SENDER ;
                   UPDATE ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   DUG 3 ;
                   DIG 2 ;
                   DROP ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   PUSH nat 4 ;
                   PUSH nat 1 ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   CAR ;
                   CAR ;
                   ADD ;
                   EDIV ;
                   IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CDR } ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   ADD ;
                   PAIR ;
                   PAIR ;
                   DUG 3 ;
                   DROP 3 } }
               { IF_LEFT
                   { { PUSH nat 4 ;
                       PUSH nat 1 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       ADD ;
                       COMPARE ;
                       GT ;
                       IF { { PUSH string "Max" ; FAILWITH } } { {} } ;
                       PUSH bool False ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       CDR ;
                       SENDER ;
                       MEM ;
                       COMPARE ;
                       EQ ;
                       IF { {} }
                          { { PUSH string "WrongCondition: (self.data.players.contains(sp.sender)) == False" ;
                              FAILWITH } } ;
                       PUSH (pair int int) (Pair 0 0) ;
                       PUSH nat 0 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       INT ;
                       ISNAT ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       COMPARE ;
                       EQ ;
                       IF { { DROP ; PUSH (pair int int) (Pair 1 1) } } { {} } ;
                       PUSH nat 1 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       INT ;
                       ISNAT ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       COMPARE ;
                       EQ ;
                       IF { { DROP ; PUSH (pair int int) (Pair 1 3) } } { {} } ;
                       PUSH nat 2 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       INT ;
                       ISNAT ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       COMPARE ;
                       EQ ;
                       IF { { DROP ; PUSH (pair int int) (Pair 3 1) } } { {} } ;
                       PUSH nat 3 ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       INT ;
                       ISNAT ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       COMPARE ;
                       EQ ;
                       IF { { DROP ; PUSH (pair int int) (Pair 3 3) } } { {} } ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       CDR ;
                       CDR ;
                       SIZE ;
                       INT ;
                       ISNAT ;
                       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                       PAIR ;
                       SOME ;
                       SENDER ;
                       UPDATE ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       DUG 3 ;
                       DROP 3 } }
                   { { SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CAR ;
                       PUSH bool True ;
                       SWAP ;
                       PAIR ;
                       PAIR ;
                       DUG 2 ;
                       DROP 2 } } } } ;
         NIL operation ;
         PAIR } }
