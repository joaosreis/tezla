{ parameter
    (or (or (unit %accept_admin) (pair %set_param (string %igps) (int %ipower)))
        (or (pair %set_price (option %iprice int) (option %iprice_ref address))
            (address %transfer_admin))) ;
  storage
    (pair (pair (pair (address %admin) (address %admin_candidate))
                (pair (string %gps) (option %kwh_price int)))
          (pair (pair (int %power) (option %price_reference address)) (int %total_delivered))) ;
  code { DUP ;
         CDR ;
         DIP { DUP } ;
         SWAP ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DIP 2 { DUP } ;
                 DIG 2 ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 3 } }
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CDR ;
                 DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CDR } ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 5 } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIP { DUP } ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH bool False ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 IF_NONE
                   { PUSH bool True }
                   { DIP { DUP } ; SWAP ; DROP 2 ; PUSH bool False } ;
                 DIP { DROP ;
                       PUSH bool False ;
                       DIP 3 { DUP } ;
                       DIG 3 ;
                       CDR ;
                       IF_NONE
                         { PUSH bool False }
                         { DIP { DUP } ; SWAP ; DROP 2 ; PUSH bool True } ;
                       DIP { DROP } } ;
                 AND ;
                 DIP { PUSH bool False ;
                       DIP 3 { DUP } ;
                       DIG 3 ;
                       CAR ;
                       IF_NONE
                         { PUSH bool False }
                         { DIP { DUP } ; SWAP ; DROP 2 ; PUSH bool True } ;
                       DIP { DROP ;
                             PUSH bool False ;
                             DIP 3 { DUP } ;
                             DIG 3 ;
                             CDR ;
                             IF_NONE
                               { PUSH bool True }
                               { DIP { DUP } ; SWAP ; DROP 2 ; PUSH bool False } ;
                             DIP { DROP } } ;
                       AND } ;
                 OR ;
                 NOT ;
                 IF { PUSH string "require r1 failed" ; FAILWITH } { PUSH unit Unit } ;
                 DIP 2 { DUP } ;
                 DIG 2 ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CAR ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DIP 4 { DUP } ;
                 DIG 4 ;
                 CDR ;
                 DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 6 } }
               { DUP ;
                 DIP { DIP 2 { DUP } ; DIG 2 } ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 DIP { DUP } ;
                 SWAP ;
                 DIP 3 { DUP } ;
                 DIG 3 ;
                 CAR ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR ;
                 DIP { DROP 4 } } ;
             DIP { DROP } } ;
         DIP { DROP 2 } } }
