{ parameter
    (or (pair %mint (address %to) (int %amount))
        (pair %transfer (address %to) (int %amount))) ;
  storage (pair (map %balances address int) (pair (int %total_supply) (address %admin))) ;
  code { DUP ;
         CDR ;
         DUG 1 ;
         CAR ;
         LAMBDA
           (pair (bool %condition) (string %message))
           int
           { DIG 0 ;
             DUP ;
             DUG 1 ;
             GET 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             GET 2 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             NOT ;
             IF { DIG 0 ; DUP ; DUG 1 ; FAILWITH } {} ;
             PUSH int 0 ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } } ;
         DIG 1 ;
         IF_LEFT
           { NIL operation ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             GET 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             GET 2 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             PUSH string "Only admin can mint" ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             GET 4 ;
             SENDER ;
             COMPARE ;
             EQ ;
             PAIR 2 ;
             EXEC ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 8 ;
             DUP ;
             DUG 9 ;
             GET 3 ;
             ADD ;
             UPDATE 3 ;
             DIP 7 { DROP } ;
             DUG 6 ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             GET 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             MEM ;
             IF { DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  DUP ;
                  GET 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 9 ;
                  DUP ;
                  DUG 10 ;
                  GET 1 ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  GET ;
                  IF_NONE { PUSH string "Key does not exist" ; FAILWITH } {} ;
                  ADD ;
                  SOME ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  UPDATE ;
                  UPDATE 1 ;
                  DIP 7 { DROP } ;
                  DUG 6 }
                { DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  DUP ;
                  GET 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  SOME ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  UPDATE ;
                  UPDATE 1 ;
                  DIP 7 { DROP } ;
                  DUG 6 } ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } }
           { NIL operation ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             GET 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             GET 2 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             PUSH string "You need to transfer a positive amount of tokens" ;
             PUSH int 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             COMPARE ;
             GT ;
             PAIR 2 ;
             EXEC ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             PUSH string "Insufficient sender balance" ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 9 ;
             DUP ;
             DUG 10 ;
             GET 1 ;
             SENDER ;
             GET ;
             IF_NONE { PUSH string "Key does not exist" ; FAILWITH } {} ;
             COMPARE ;
             GE ;
             PAIR 2 ;
             EXEC ;
             DIP 1 { DROP } ;
             DUG 0 ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             DUP ;
             GET 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 9 ;
             DUP ;
             DUG 10 ;
             GET 1 ;
             SENDER ;
             GET ;
             IF_NONE { PUSH string "Key does not exist" ; FAILWITH } {} ;
             SUB ;
             SOME ;
             SENDER ;
             UPDATE ;
             UPDATE 1 ;
             DIP 7 { DROP } ;
             DUG 6 ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             GET 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             MEM ;
             IF { DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  DUP ;
                  GET 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 9 ;
                  DUP ;
                  DUG 10 ;
                  GET 1 ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  GET ;
                  IF_NONE { PUSH string "Key does not exist" ; FAILWITH } {} ;
                  ADD ;
                  SOME ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  UPDATE ;
                  UPDATE 1 ;
                  DIP 7 { DROP } ;
                  DUG 6 }
                { DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  DUP ;
                  GET 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  SOME ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  UPDATE ;
                  UPDATE 1 ;
                  DIP 7 { DROP } ;
                  DUG 6 } ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } ;
             DIP 1 { DROP } } } }
