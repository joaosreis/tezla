{ parameter
    (or (or (pair %approveApplication (address %applicant) (string %gigId))
            (pair %fund (int %deadline) (string %gigId)))
        (string %refund)) ;
  storage
    (pair (map %gigs
             string
             (pair (pair (mutez %balance) (int %deadline)) (pair (string %gigId) (address %issuer))))
          (address %owner)) ;
  code { LAMBDA
           address
           (contract unit)
           { CONTRACT unit ;
             IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} } ;
         LAMBDA
           (pair (pair string address)
                 (pair (map string (pair (pair mutez int) (pair string address))) address))
           (pair (pair mutez int) (pair string address))
           { { { DUP ; CAR ; DIP { CDR } } } ;
             { { DUP ; CAR ; DIP { CDR } } } ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CAR ;
             SWAP ;
             GET ;
             IF_NONE
               { DROP 2 ; PUSH string "Can't find gig" ; FAILWITH }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 DIG 3 ;
                 CDR ;
                 COMPARE ;
                 NEQ ;
                 DUG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 COMPARE ;
                 NEQ ;
                 AND ;
                 IF { DROP ; PUSH string "Wrong sender" ; FAILWITH } {} } } ;
         DIG 2 ;
         { { DUP ; CAR ; DIP { CDR } } } ;
         IF_LEFT
           { IF_LEFT
               { DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 SENDER ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 PAIR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 { DIP 2 { DUP } ; DIG 3 } ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 NONE (pair (pair mutez int) (pair string address)) ;
                 DIG 4 ;
                 UPDATE ;
                 PAIR ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 SWAP ;
                 SOURCE ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 DIG 2 ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 PUSH mutez 0 ;
                 AMOUNT ;
                 COMPARE ;
                 LE ;
                 IF { DROP 4 ; PUSH string "Amount needs to be positive" ; FAILWITH }
                    { SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      { DIP 3 { DUP } ; DIG 4 } ;
                      GET ;
                      IF_NONE
                        { { DIP 2 { DUP } ; DIG 3 } ;
                          PAIR ;
                          DIG 3 ;
                          AMOUNT ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DIG 2 ;
                          CAR ;
                          DIG 2 ;
                          SOME ;
                          DIG 3 ;
                          UPDATE ;
                          PAIR ;
                          NIL operation ;
                          PAIR }
                        { DROP 5 ; PUSH string "Gig already exists" ; FAILWITH } } } }
           { SWAP ;
             DUP ;
             DUG 2 ;
             SENDER ;
             { DIP 2 { DUP } ; DIG 3 } ;
             PAIR ;
             PAIR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DUP ;
             CDR ;
             CDR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             SWAP ;
             CAR ;
             CAR ;
             UNIT ;
             TRANSFER_TOKENS ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CDR ;
             DIG 3 ;
             CAR ;
             NONE (pair (pair mutez int) (pair string address)) ;
             DIG 4 ;
             UPDATE ;
             PAIR ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             PAIR } } }
