{ parameter
    (or (or (address %getResult)
            (or (pair %register
                   (address %address)
                   (map %proofs
                      string
                      (pair (map %meta string string) (pair (timestamp %register_date) (bool %verified)))))
                (unit %resolve)))
        (or (pair %send (mutez %amount) (address %receiverAddress))
            (or (unit %signup) (int %vote)))) ;
  storage
    (pair (pair (pair (address %admin) (pair (mutez %cost) (timestamp %end)))
                (pair (pair (nat %maxParticipants) (string %name))
                      (pair (map %participants address int) (string %question))))
          (pair (pair (pair (nat %requiredMajority) (list %requiredProofs string))
                      (pair (string %resolve) (bool %resolved)))
                (pair (pair (map %signups address bool) (timestamp %start))
                      (pair (address %tezid) (int %ynid))))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { CONTRACT (pair string bool) ;
                 IF_NONE { PUSH int 105 ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 DUP ;
                 GET 3 ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 5 ;
                 GET 3 ;
                 GET 3 ;
                 PAIR ;
                 TRANSFER_TOKENS ;
                 CONS }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 7 ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "Only TezID can register" ; FAILWITH } {} ;
                     PUSH bool False ;
                     DUP 3 ;
                     GET 5 ;
                     CAR ;
                     DUP 3 ;
                     CAR ;
                     MEM ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "Address has not signed up" ; FAILWITH } {} ;
                     NIL string ;
                     DUP 3 ;
                     GET 3 ;
                     CAR ;
                     CDR ;
                     ITER { DUP 3 ;
                            CDR ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            MEM ;
                            IF { DUP 3 ;
                                 CDR ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 GET ;
                                 IF_NONE { PUSH int 39 ; FAILWITH } {} ;
                                 GET 4 ;
                                 IF { CONS } { DROP } }
                               { DROP } } ;
                     SIZE ;
                     DUP 3 ;
                     GET 3 ;
                     CAR ;
                     CDR ;
                     SIZE ;
                     COMPARE ;
                     EQ ;
                     IF { SWAP ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          PUSH (option int) (Some -1) ;
                          DUP 7 ;
                          CAR ;
                          UPDATE ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP }
                        {} ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     NONE bool ;
                     DIG 6 ;
                     CAR ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR }
                   { DROP ;
                     DUP ;
                     GET 3 ;
                     GET 4 ;
                     IF { PUSH string "Vote already resolved" ; FAILWITH } {} ;
                     DUP ;
                     CAR ;
                     CAR ;
                     GET 4 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Vote has not yet ended" ; FAILWITH } {} ;
                     PUSH nat 0 ;
                     PUSH nat 0 ;
                     DUP 3 ;
                     CAR ;
                     GET 5 ;
                     ITER { CDR ;
                            DUP ;
                            PUSH int 1 ;
                            COMPARE ;
                            EQ ;
                            IF { PUSH nat 1 ; DIG 3 ; ADD ; DUG 2 } {} ;
                            PUSH int 0 ;
                            COMPARE ;
                            EQ ;
                            IF { PUSH nat 1 ; ADD } {} } ;
                     DUP ;
                     DUP 3 ;
                     ADD ;
                     PUSH nat 2 ;
                     DIG 2 ;
                     DUP 4 ;
                     ADD ;
                     EDIV ;
                     IF_NONE { PUSH int 87 ; FAILWITH } { CAR } ;
                     DIG 2 ;
                     PUSH nat 100 ;
                     MUL ;
                     ADD ;
                     EDIV ;
                     IF_NONE { PUSH int 87 ; FAILWITH } { CAR } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     COMPARE ;
                     GE ;
                     IF { UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          CDR ;
                          PUSH string "yay" ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          PAIR }
                        { UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          CDR ;
                          PUSH string "nay" ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          PAIR } ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     SWAP ;
                     CAR ;
                     PUSH bool True ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR } ;
                 NIL operation } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "Only admin can send" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CONTRACT unit ;
                 IF_NONE { PUSH int 101 ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 DIG 2 ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS }
               { IF_LEFT
                   { DROP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     PUSH (option bool) (Some True) ;
                     SENDER ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     GET 3 ;
                     CAR ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF { DUP ;
                          CAR ;
                          GET 3 ;
                          CAR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          GET 5 ;
                          SIZE ;
                          COMPARE ;
                          GE ;
                          IF { PUSH string "Maximum number of participants already registered" ; FAILWITH }
                             {} }
                        {} ;
                     DUP ;
                     GET 7 ;
                     CONTRACT %getProofs (pair address address) ;
                     IF_NONE { PUSH int 52 ; FAILWITH } {} ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     SELF %register ;
                     ADDRESS ;
                     SENDER ;
                     PAIR ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 4 ;
                     IF { PUSH string "Vote already resolved" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     GET 3 ;
                     AMOUNT ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Amount too low" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 5 ;
                     CDR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Vote not yet started" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     GET 4 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "Vote has ended" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 5 ;
                     SENDER ;
                     MEM ;
                     IF { DUP ;
                          PUSH int 0 ;
                          COMPARE ;
                          GT ;
                          IF { PUSH string "Invalid vote" ; FAILWITH } {} ;
                          DUP ;
                          PUSH int 1 ;
                          COMPARE ;
                          LT ;
                          IF { PUSH string "Invalid vote" ; FAILWITH } {} ;
                          SWAP ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          DIG 5 ;
                          SOME ;
                          SENDER ;
                          UPDATE ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR }
                        { DROP } ;
                     NIL operation } } } ;
         PAIR } }
