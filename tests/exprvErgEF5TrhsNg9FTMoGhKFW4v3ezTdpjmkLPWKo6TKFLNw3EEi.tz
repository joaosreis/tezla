{ parameter
    (or (or (pair %register
               (address %address)
               (map %proofs string (pair (timestamp %register_date) (bool %verified))))
            (unit %resolve))
        (or (pair %send (mutez %amount) (address %receiverAddress))
            (or (unit %signup) (int %vote)))) ;
  storage
    (pair (pair (pair (pair (address %admin) (mutez %cost))
                      (pair (timestamp %end) (nat %maxParticipants)))
                (pair (pair (string %name) (nat %nays))
                      (pair (map %participants address int) (string %question))))
          (pair (pair (pair (nat %requiredMajority) (list %requiredProofs string))
                      (pair (string %resolve) (bool %resolved)))
                (pair (pair (timestamp %start) (address %tezid)) (pair (nat %yayPercent) (nat %yays))))) ;
  code { UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 5 ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "Only TezID can register" ; FAILWITH } {} ;
                 NIL string ;
                 DUP 3 ;
                 GET 3 ;
                 CAR ;
                 CDR ;
                 ITER { DUP 3 ;
                        CDR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        MEM ;
                        IF { DUP 3 ;
                             CDR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             GET ;
                             IF_NONE { PUSH int 128 ; FAILWITH } {} ;
                             CDR ;
                             IF { CONS } { DROP } }
                           { DROP } } ;
                 SIZE ;
                 DUP 3 ;
                 GET 3 ;
                 CAR ;
                 CDR ;
                 SIZE ;
                 COMPARE ;
                 EQ ;
                 IF { SWAP ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      PUSH (option int) (Some -1) ;
                      DIG 6 ;
                      CAR ;
                      UPDATE ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR }
                    { DROP } }
               { DROP ;
                 DUP ;
                 GET 3 ;
                 GET 4 ;
                 IF { PUSH string "Vote already resolved" ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 CAR ;
                 GET 3 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH string "Vote has not yet ended" ; FAILWITH } {} ;
                 PUSH nat 0 ;
                 PUSH nat 0 ;
                 DUP 3 ;
                 CAR ;
                 GET 5 ;
                 ITER { CDR ;
                        DUP ;
                        PUSH int 1 ;
                        COMPARE ;
                        EQ ;
                        IF { PUSH nat 1 ; DIG 3 ; ADD ; DUG 2 } {} ;
                        PUSH int 0 ;
                        COMPARE ;
                        EQ ;
                        IF { PUSH nat 1 ; ADD } {} } ;
                 DUP ;
                 DUP 3 ;
                 ADD ;
                 PUSH nat 2 ;
                 DUP 3 ;
                 DUP 5 ;
                 ADD ;
                 EDIV ;
                 IF_NONE { PUSH int 173 ; FAILWITH } { CAR } ;
                 DUP 4 ;
                 PUSH nat 100 ;
                 MUL ;
                 ADD ;
                 EDIV ;
                 IF_NONE { PUSH int 173 ; FAILWITH } { CAR } ;
                 DIG 3 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 UPDATE 7 ;
                 DIG 3 ;
                 UPDATE 8 ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 CAR ;
                 DIG 5 ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 COMPARE ;
                 GE ;
                 IF { UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      CDR ;
                      PUSH string "yay" ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      PAIR }
                    { UNPAIR ;
                      SWAP ;
                      UNPAIR ;
                      UNPAIR ;
                      SWAP ;
                      CDR ;
                      PUSH string "nay" ;
                      PAIR ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      PAIR } ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 PUSH bool True ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR } ;
             NIL operation }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "Only admin can send" ; FAILWITH } {} ;
                 DUP ;
                 CDR ;
                 CONTRACT unit ;
                 IF_NONE { PUSH int 190 ; FAILWITH } {} ;
                 NIL operation ;
                 SWAP ;
                 DIG 2 ;
                 CAR ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS }
               { IF_LEFT
                   { DROP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     GET 4 ;
                     PUSH nat 0 ;
                     COMPARE ;
                     LT ;
                     IF { DUP ;
                          CAR ;
                          CAR ;
                          GET 4 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          GET 5 ;
                          SIZE ;
                          COMPARE ;
                          GE ;
                          IF { PUSH string "Maximum number of participants already registered" ; FAILWITH }
                             {} }
                        {} ;
                     DUP ;
                     GET 5 ;
                     CDR ;
                     CONTRACT %getProofs (pair address (pair address string)) ;
                     IF_NONE { PUSH int 138 ; FAILWITH } {} ;
                     NIL operation ;
                     SWAP ;
                     PUSH mutez 0 ;
                     PUSH string "register" ;
                     SELF_ADDRESS ;
                     SENDER ;
                     PAIR 3 ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 3 ;
                     GET 4 ;
                     IF { PUSH string "Vote already resolved" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     AMOUNT ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Amount too low" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     GET 5 ;
                     CAR ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { PUSH string "Vote not yet started" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     GET 3 ;
                     NOW ;
                     COMPARE ;
                     GT ;
                     IF { PUSH string "Vote has ended" ; FAILWITH } {} ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     GET 5 ;
                     SENDER ;
                     MEM ;
                     IF { DUP ;
                          PUSH int 0 ;
                          COMPARE ;
                          GT ;
                          IF { PUSH string "Invalid vote" ; FAILWITH } {} ;
                          DUP ;
                          PUSH int 1 ;
                          COMPARE ;
                          LT ;
                          IF { PUSH string "Invalid vote" ; FAILWITH } {} ;
                          SWAP ;
                          UNPAIR ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          SWAP ;
                          UNPAIR ;
                          DIG 5 ;
                          SOME ;
                          SENDER ;
                          UPDATE ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          PAIR }
                        { DROP } ;
                     NIL operation } } } ;
         PAIR } }
