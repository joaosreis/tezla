{ parameter (pair (nat %den) (int %num)) ;
  storage (pair (nat %den) (int %num)) ;
  code { DUP ;
         CAR ;
         PUSH int 25469 ;
         PUSH nat 36744 ;
         PAIR ;
         DUP ;
         CAR ;
         INT ;
         DIP { DIP { DUP } ; SWAP ; CDR } ;
         MUL ;
         DIP { DUP } ;
         SWAP ;
         CDR ;
         ABS ;
         DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
         MUL ;
         DIP { DUP } ;
         SWAP ;
         DIP { DUP } ;
         EDIV ;
         IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
         CDR ;
         DIP { DIP { DUP } ;
               SWAP ;
               DIP { DUP ; INT } ;
               EDIV ;
               IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
               CAR } ;
         PAIR ;
         DUP ;
         CAR ;
         PUSH nat 2 ;
         MUL ;
         DIP { DIP { DUP } ; SWAP } ;
         COMPARE ;
         LE ;
         IF { DUP ;
              CDR ;
              DIP { DIP 3 { DUP } ;
                    DIG 3 ;
                    CAR ;
                    DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                    MUL ;
                    DIP { DUP ; CAR ; INT } ;
                    PAIR } ;
              PAIR }
            { DUP ;
              CDR ;
              PUSH int 1 ;
              ADD ;
              DIP { DIP 3 { DUP } ;
                    DIG 3 ;
                    CAR ;
                    DIP { DIP 4 { DUP } ; DIG 4 ; CAR } ;
                    MUL ;
                    DIP { DUP ; CAR ; INT ; DIP { DIP { DUP } ; SWAP ; INT } ; SUB } ;
                    PAIR } ;
              PAIR } ;
         DUP ;
         CAR ;
         DIP { DUP } ;
         SWAP ;
         CDR ;
         PUSH nat 1 ;
         PUSH nat 2 ;
         PAIR ;
         DIP { DIP { DUP } ; SWAP ; ABS } ;
         PAIR ;
         LEFT nat ;
         LOOP_LEFT
           { DUP ;
             DUP ;
             CAR ;
             CAR ;
             DIP { DUP } ;
             SWAP ;
             CAR ;
             CDR ;
             DIP 2 { DUP } ;
             DIG 2 ;
             CDR ;
             DUP ;
             PUSH nat 0 ;
             SWAP ;
             COMPARE ;
             GT ;
             IF { DUP ;
                  PUSH nat 2 ;
                  SWAP ;
                  EDIV ;
                  IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                  CDR ;
                  PUSH nat 1 ;
                  SWAP ;
                  COMPARE ;
                  EQ ;
                  IF { DIP 2 { DUP } ;
                       DIG 2 ;
                       DIP { DIP 2 { DUP } ; DIG 2 } ;
                       MUL ;
                       DIP { DIP { DUP } ; SWAP ; DIP { DIP 2 { DUP } ; DIG 2 } ; MUL } ;
                       PAIR ;
                       DIP { DUP ;
                             PUSH nat 2 ;
                             SWAP ;
                             EDIV ;
                             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                             CAR } ;
                       PAIR ;
                       LEFT nat }
                     { DIP 2 { DUP } ;
                       DIG 2 ;
                       DIP { DIP 2 { DUP } ; DIG 2 } ;
                       MUL ;
                       DIP { DIP { DUP } ; SWAP } ;
                       PAIR ;
                       DIP { DUP ;
                             PUSH nat 2 ;
                             SWAP ;
                             EDIV ;
                             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
                             CAR } ;
                       PAIR ;
                       LEFT nat } }
                { DIP { DUP } ; SWAP ; RIGHT (pair (pair (nat %0) (nat %1)) (nat %2)) } ;
             DIP { DROP 5 } } ;
         DIP 2 { DUP } ;
         DIG 2 ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         GT ;
         IF { DUP ; INT ; PUSH nat 1 ; PAIR } { DUP ; PUSH int 1 ; SWAP ; PAIR } ;
         DIP 2 { DUP } ;
         DIG 2 ;
         CDR ;
         DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
         MUL ;
         DIP { DIP 2 { DUP } ;
               DIG 2 ;
               CAR ;
               PUSH nat 12 ;
               MUL ;
               DIP { DIP 2 { DUP } ; DIG 2 ; CAR } ;
               MUL ;
               INT } ;
         ADD ;
         DIP 3 { DUP } ;
         DIG 3 ;
         CDR ;
         PUSH int 6 ;
         MUL ;
         DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; INT } ;
         MUL ;
         DIP { DUP } ;
         SWAP ;
         DIP { DUP } ;
         ADD ;
         DIP { DIP 2 { DUP } ; DIG 2 ; CDR } ;
         MUL ;
         DIP 2 { DUP } ;
         DIG 2 ;
         DIP { DIP { DUP } ; SWAP } ;
         SUB ;
         DIP { DIP 3 { DUP } ; DIG 3 ; CAR ; INT } ;
         MUL ;
         DUP ;
         PUSH int 0 ;
         SWAP ;
         COMPARE ;
         LT ;
         IF { DUP ; ABS ; DIP { DIP { DUP } ; SWAP ; NEG } ; PAIR }
            { DUP ; ABS ; DIP { DIP { DUP } ; SWAP } ; PAIR } ;
         DIP { DROP 14 } ;
         DUP ;
         NIL operation ;
         PAIR ;
         DIP { DROP 2 } } }
