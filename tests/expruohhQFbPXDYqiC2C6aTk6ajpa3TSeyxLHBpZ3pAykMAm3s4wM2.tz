{ storage nat ;
  parameter
    (or (or (pair %add (nat %x) (nat %y)) (or (unit %empty) (nat %factorial)))
        (or (or (nat %log2) (pair %multiply (nat %x) (nat %y)))
            (or (nat %square) (nat %squareRoot)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SWAP ; DROP ; DUP ; CDR ; SWAP ; CAR ; ADD } }
               { IF_LEFT
                   { { DROP 2 ; PUSH nat 0 } }
                   { { SWAP ;
                       DROP ;
                       PUSH nat 1 ;
                       SWAP ;
                       DUP ;
                       PUSH nat 1 ;
                       ADD ;
                       PUSH nat 1 ;
                       DUP ;
                       DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       COMPARE ;
                       GT ;
                       LOOP { DUP ;
                              DIG 4 ;
                              MUL ;
                              DUG 3 ;
                              PUSH nat 1 ;
                              ADD ;
                              DUP ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              COMPARE ;
                              GT } ;
                       DROP 3 } } } }
           { IF_LEFT
               { IF_LEFT
                   { { SWAP ;
                       DROP ;
                       PUSH nat 0 ;
                       SWAP ;
                       DUP ;
                       DUP ;
                       PUSH nat 1 ;
                       COMPARE ;
                       LT ;
                       LOOP { PUSH nat 1 ;
                              DIG 3 ;
                              ADD ;
                              DUG 2 ;
                              DUP ;
                              PUSH nat 2 ;
                              SWAP ;
                              EDIV ;
                              IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                              SWAP ;
                              DROP ;
                              DUP ;
                              PUSH nat 1 ;
                              COMPARE ;
                              LT } ;
                       DROP 2 } }
                   { { SWAP ; DROP ; DUP ; CDR ; SWAP ; CAR ; MUL } } }
               { IF_LEFT
                   { { SWAP ; DROP ; DUP ; MUL } }
                   { { DUP ;
                       PUSH nat 0 ;
                       SWAP ;
                       COMPARE ;
                       GE ;
                       IF { {} } { { PUSH string "WrongCondition: params >= 0" ; FAILWITH } } ;
                       DUP ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       MUL ;
                       COMPARE ;
                       GT ;
                       LOOP { DUP ;
                              PUSH nat 2 ;
                              SWAP ;
                              DUP ;
                              DIG 4 ;
                              DUP ;
                              DUG 5 ;
                              EDIV ;
                              IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                              ADD ;
                              EDIV ;
                              IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                              SWAP ;
                              DROP ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              DUP ;
                              MUL ;
                              COMPARE ;
                              GT } ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       MUL ;
                       COMPARE ;
                       LE ;
                       IF { { DUP ;
                              PUSH nat 1 ;
                              ADD ;
                              PUSH nat 1 ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              ADD ;
                              MUL ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              COMPARE ;
                              LT } }
                          { PUSH bool False } ;
                       IF { {} }
                          { { PUSH string
                                   "WrongCondition: ((y.value * y.value) <= params) & (params < ((y.value + 1) * (y.value + 1)))" ;
                              FAILWITH } } ;
                       DIG 2 ;
                       DROP ;
                       SWAP ;
                       DROP } } } } ;
         NIL operation ;
         PAIR } }
