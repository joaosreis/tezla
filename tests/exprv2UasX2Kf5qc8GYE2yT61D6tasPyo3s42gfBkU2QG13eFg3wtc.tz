{ parameter (or (bytes %load_lambda) (unit %run_lambda)) ;
  storage
    (pair (address %owner)
          (or (address %originated)
              (pair %loading
                 bytes
                 (pair (pair (pair (big_map string bytes) (big_map address (pair (pair nat nat) (pair nat nat))))
                             (big_map (pair address nat) nat))
                       (pair (pair (big_map string bytes) (big_map (pair address address) unit))
                             (big_map
                                bytes
                                (pair (pair (pair (pair nat (map string bytes)) (pair nat address))
                                            (pair (pair nat nat) (pair timestamp nat)))
                                      (list (pair (pair nat bool) address))))))))) ;
  code { DUP ;
         CAR ;
         DIP { CDR } ;
         DIP { DUP ;
               CAR ;
               DIP { CDR } ;
               SWAP ;
               IF_LEFT
                 { FAILWITH }
                 { SWAP ;
                   DUP ;
                   SENDER ;
                   COMPARE ;
                   EQ ;
                   IF { SWAP ; DUP ; CAR ; DIP { CDR } }
                      { PUSH string "sender is not originator owner" ; FAILWITH } } } ;
         IF_LEFT
           { CONCAT ; PAIR ; RIGHT address ; NIL operation }
           { DROP ;
             UNPACK
               (lambda
                  (pair (pair (pair (big_map string bytes) (big_map address (pair (pair nat nat) (pair nat nat))))
                              (big_map (pair address nat) nat))
                        (pair (pair (big_map string bytes) (big_map (pair address address) unit))
                              (big_map
                                 bytes
                                 (pair (pair (pair (pair nat (map string bytes)) (pair nat address))
                                             (pair (pair nat nat) (pair timestamp nat)))
                                       (list (pair (pair nat bool) address))))))
                  (pair address (list operation))) ;
             IF_NONE
               { PUSH string "failed to unpack lambda" ; FAILWITH }
               { SWAP ;
                 EXEC ;
                 DUP ;
                 CAR ;
                 DIP { CDR } ;
                 LEFT (pair bytes
                            (pair (pair (pair (big_map string bytes) (big_map address (pair (pair nat nat) (pair nat nat))))
                                        (big_map (pair address nat) nat))
                                  (pair (pair (big_map string bytes) (big_map (pair address address) unit))
                                        (big_map
                                           bytes
                                           (pair (pair (pair (pair nat (map string bytes)) (pair nat address))
                                                       (pair (pair nat nat) (pair timestamp nat)))
                                                 (list (pair (pair nat bool) address))))))) ;
                 SWAP } } ;
         DIP { SWAP ; PAIR } ;
         PAIR } }
