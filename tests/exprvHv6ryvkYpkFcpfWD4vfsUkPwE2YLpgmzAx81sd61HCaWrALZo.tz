{ storage
    (pair (pair (string %last_acc) (bool %last_operator))
          (pair (nat %last_sum) (bool %operator_support))) ;
  parameter
    (or (or (list %receive_balances
               (pair (nat %balance) (pair %request (address %owner) (nat %token_id))))
            (pair %receive_is_operator
               (bool %is_operator)
               (pair %operator (address %owner) (address %operator))))
        (or (list %receive_metadata
               (pair (nat %token_id)
                     (pair (string %symbol)
                           (pair (string %name) (pair (nat %decimals) (map %extras string string))))))
            (or (pair %receive_permissions_descriptor
                   (or %operator
                      (unit %no_transfer)
                      (or (unit %owner_transfer) (unit %owner_or_operator_transfer)))
                   (pair (or %receiver
                            (unit %owner_no_op)
                            (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                         (pair (or %sender
                                  (unit %owner_no_op)
                                  (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                               (option %custom (pair (option %config_api address) (string %tag))))))
                (list %receive_total_supplies (pair (nat %token_id) (nat %total_supply)))))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CDR ;
                   PUSH nat 0 ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          CDR ;
                          DIG 2 ;
                          CAR ;
                          DIG 4 ;
                          CDR ;
                          CAR ;
                          ADD ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP } ;
                   DROP } }
               { { SWAP ; DUP ; CDR ; SWAP ; CAR ; CAR ; DIG 2 ; CAR ; SWAP ; PAIR ; PAIR } } }
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   PUSH string "" ;
                   PAIR ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          CAR ;
                          CDR ;
                          DIG 2 ;
                          CDR ;
                          CAR ;
                          DIG 4 ;
                          CAR ;
                          CAR ;
                          CONCAT ;
                          PAIR ;
                          PAIR ;
                          SWAP } ;
                   DROP } }
               { IF_LEFT
                   { { DUP ;
                       CAR ;
                       IF_LEFT
                         { { DROP ; PUSH bool False } }
                         { IF_LEFT
                             { { DROP ; PUSH bool False } }
                             { { DROP ; PUSH bool True } } } ;
                       IF { { SWAP ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              CAR ;
                              PUSH bool True ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              SWAP } }
                          { { SWAP ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              CAR ;
                              PUSH bool False ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              SWAP } } ;
                       DROP } }
                   { { SWAP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CDR ;
                       PUSH nat 0 ;
                       PAIR ;
                       SWAP ;
                       PAIR ;
                       SWAP ;
                       DUP ;
                       ITER { DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              DUP ;
                              CAR ;
                              SWAP ;
                              CDR ;
                              CDR ;
                              DIG 2 ;
                              CDR ;
                              DIG 4 ;
                              CDR ;
                              CAR ;
                              ADD ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              SWAP } ;
                       DROP } } } } ;
         NIL operation ;
         PAIR } }
