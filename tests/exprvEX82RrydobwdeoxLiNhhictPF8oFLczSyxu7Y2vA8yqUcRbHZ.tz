{ storage
    (pair (string %last_acc)
          (pair (list %last_nonces (pair (nat %nonce) (address %owner))) (nat %last_sum))) ;
  parameter
    (or (or (list %receive_balances
               (pair (nat %balance) (pair %request (address %owner) (nat %token_id))))
            (list %receive_metadata
               (pair (nat %token_id)
                     (pair (string %symbol)
                           (pair (string %name) (pair (nat %decimals) (map %extras string string)))))))
        (or (list %receive_nonce (pair (nat %nonce) (address %owner)))
            (list %receive_total_supplies (pair (nat %token_id) (nat %total_supply))))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   PUSH nat 0 ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          CAR ;
                          DIG 2 ;
                          CAR ;
                          DIG 4 ;
                          CDR ;
                          CDR ;
                          ADD ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP } ;
                   DROP } }
               { { SWAP ;
                   CDR ;
                   PUSH string "" ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          CDR ;
                          SWAP ;
                          CDR ;
                          CAR ;
                          DIG 3 ;
                          CAR ;
                          CONCAT ;
                          PAIR ;
                          SWAP } ;
                   DROP } } }
           { IF_LEFT
               { { SWAP ;
                   CDR ;
                   PUSH string "" ;
                   PAIR ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CDR ;
                   DIG 2 ;
                   PAIR ;
                   SWAP ;
                   PAIR } }
               { { SWAP ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   PUSH nat 0 ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   ITER { DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          CAR ;
                          DIG 2 ;
                          CDR ;
                          DIG 4 ;
                          CDR ;
                          CDR ;
                          ADD ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          SWAP } ;
                   DROP } } } ;
         NIL operation ;
         PAIR } }
