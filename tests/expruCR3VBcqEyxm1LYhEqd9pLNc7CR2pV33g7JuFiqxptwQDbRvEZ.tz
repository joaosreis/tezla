{ parameter (or (or (unit %collect) (unit %interrupt)) (unit %start)) ;
  storage
    (pair (pair (pair (timestamp %interruption) (address %owner))
                (pair (pair %rate int int) (int %read_interval)))
          (option %user address)) ;
  code { LAMBDA
           (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
           (pair int int)
           { DUP ;
             CAR ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CDR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     MUL ;
                     PAIR ;
                     DIP { DROP } }
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     MUL ;
                     SUB ;
                     PAIR ;
                     DIP { DROP } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     DIG 5 ;
                     DUP ;
                     DUG 6 ;
                     CAR ;
                     MUL ;
                     PAIR ;
                     DIP { DROP } }
                   { DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CAR ;
                     MUL ;
                     DIG 4 ;
                     DUP ;
                     DUG 5 ;
                     CDR ;
                     DIG 6 ;
                     DUP ;
                     DUG 7 ;
                     CAR ;
                     MUL ;
                     ADD ;
                     PAIR ;
                     DIP { DROP } } ;
                 DIP { DROP } } ;
             DUP ;
             DIP { DROP 4 } } ;
         DUP ;
         LAMBDA
           (pair (pair int int) mutez)
           mutez
           { DUP ;
             CAR ;
             DUP ;
             CDR ;
             ABS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             ABS ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DUP ;
             DIP { DROP 3 } } ;
         SWAP ;
         LAMBDA
           (pair (pair int int) int)
           int
           { DUP ;
             CAR ;
             DUP ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP 2 } } ;
         SWAP ;
         LAMBDA int int { DUP ; ABS ; INT ; DIP { DROP } } ;
         SWAP ;
         LAMBDA
           (pair (pair (pair (pair timestamp address) (pair (pair int int) int)) (option address))
                 mutez)
           int
           { PUSH mutez 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             PAIR ;
             DUP ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             INT ;
             DUP ;
             DIP { DROP 2 } ;
             DUP ;
             DIP { DROP 2 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (pair (pair timestamp address) (pair (pair int int) int)) (option address)) int)
           int
           { PUSH int 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DUP ;
             DIP { DROP 2 } } ;
         DUP ;
         DIP { PAIR } ;
         SWAP ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (pair timestamp address) (pair (pair int int) int)) (option address)) int)
                          int)
                       (pair (lambda
                                (pair (pair (pair (pair timestamp address) (pair (pair int int) int)) (option address))
                                      mutez)
                                int)
                             (lambda
                                (pair (pair (or (or unit unit) (or unit unit)) (pair int int)) (pair int int))
                                (pair int int))))
                 (pair (pair (pair timestamp address) (pair (pair int int) int)) (option address)))
           (pair int int)
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } ;
             PUSH int 1 ;
             PUSH mutez 1000000 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             SWAP ;
             EXEC ;
             PAIR ;
             PUSH int 1 ;
             PUSH int 3600 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             PAIR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             SWAP ;
             EXEC ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CDR ;
             CAR ;
             UNIT ;
             LEFT unit ;
             RIGHT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             SWAP ;
             EXEC ;
             UNIT ;
             LEFT unit ;
             LEFT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             SWAP ;
             EXEC ;
             DUP ;
             DIP { DROP 5 } } ;
         SWAP ;
         APPLY ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CDR ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { NIL operation ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 NOT ;
                 IF { PUSH string "invalid caller" ; FAILWITH } { PUSH unit Unit } ;
                 PUSH mutez 0 ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 IF { PUSH mutez 1000000 ;
                      PUSH int 1 ;
                      NOW ;
                      DIG 8 ;
                      DUP ;
                      DUG 9 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      SUB ;
                      DIG 12 ;
                      DUP ;
                      DUG 13 ;
                      SWAP ;
                      EXEC ;
                      DIG 8 ;
                      DUP ;
                      DUG 9 ;
                      DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      SWAP ;
                      EXEC ;
                      PUSH int 1 ;
                      PUSH int 1 ;
                      PAIR ;
                      UNIT ;
                      LEFT unit ;
                      LEFT (or unit unit) ;
                      PAIR ;
                      PAIR ;
                      DIG 16 ;
                      DUP ;
                      DUG 17 ;
                      SWAP ;
                      EXEC ;
                      PAIR ;
                      DIG 13 ;
                      DUP ;
                      DUG 14 ;
                      SWAP ;
                      EXEC ;
                      DIG 8 ;
                      DUP ;
                      DUG 9 ;
                      PAIR ;
                      DIG 10 ;
                      DUP ;
                      DUG 11 ;
                      SWAP ;
                      EXEC ;
                      PAIR ;
                      PAIR ;
                      DIG 12 ;
                      DUP ;
                      DUG 13 ;
                      SWAP ;
                      EXEC ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DROP 2 } }
                    { DUP } ;
                 PUSH mutez 0 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 BALANCE ;
                 SUB ;
                 COMPARE ;
                 GT ;
                 IF { DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      CONTRACT unit ;
                      IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      BALANCE ;
                      SUB ;
                      UNIT ;
                      TRANSFER_TOKENS ;
                      CONS ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DROP 2 } }
                    { DIG 3 ; DUP ; DUG 4 } ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DIP { DROP 6 } }
               { NIL operation ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 PUSH address "tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg" ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CDR ;
                 IF_NONE
                   { PUSH string "getopt_address: argument is none" ; FAILWITH }
                   { DIG 1 ; DUP ; DUG 2 ; DIG 1 ; DUP ; DUG 2 ; DIP { DROP 2 } } ;
                 DUP ;
                 DIP { DROP 2 } ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 AND ;
                 NOT ;
                 IF { PUSH string "require r2 failed" ; FAILWITH } { PUSH unit Unit } ;
                 NOW ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 SUB ;
                 DIG 9 ;
                 DUP ;
                 DUG 10 ;
                 SWAP ;
                 EXEC ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 SWAP ;
                 EXEC ;
                 PUSH int 1 ;
                 PUSH int 1 ;
                 PAIR ;
                 UNIT ;
                 LEFT unit ;
                 LEFT (or unit unit) ;
                 PAIR ;
                 PAIR ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 SWAP ;
                 EXEC ;
                 PAIR ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 SWAP ;
                 EXEC ;
                 DIG 5 ;
                 DUP ;
                 DUG 6 ;
                 PAIR ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 SENDER ;
                 CONTRACT unit ;
                 IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
                 PUSH mutez 1000000 ;
                 PUSH int 1 ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 PAIR ;
                 PAIR ;
                 DIG 14 ;
                 DUP ;
                 DUG 15 ;
                 SWAP ;
                 EXEC ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 NOW ;
                 SUB ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DIP { DROP 6 } } ;
             DIP { DROP } }
           { DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             NOW ;
             COMPARE ;
             GT ;
             NOT ;
             IF { PUSH string "require r1 failed" ; FAILWITH } { PUSH unit Unit } ;
             PUSH int 1 ;
             AMOUNT ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             PAIR ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             SWAP ;
             EXEC ;
             PAIR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             SWAP ;
             EXEC ;
             UNIT ;
             LEFT unit ;
             RIGHT (or unit unit) ;
             PAIR ;
             PAIR ;
             DIG 10 ;
             DUP ;
             DUG 11 ;
             SWAP ;
             EXEC ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             PAIR ;
             PUSH int 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             PAIR ;
             DIG 9 ;
             DUP ;
             DUG 10 ;
             SWAP ;
             EXEC ;
             DUP ;
             DIP { DROP 2 } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             IF { DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CAR ;
                  CDR ;
                  CDR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  NOW ;
                  ADD ;
                  ADD ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                  PAIR ;
                  PAIR ;
                  PAIR ;
                  DUP ;
                  SENDER ;
                  SOME ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  DIP { DROP } ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIP { DROP 3 } }
                { DIG 3 ; DUP ; DUG 4 } ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 4 } } ;
         DIP { DROP 9 } } }
