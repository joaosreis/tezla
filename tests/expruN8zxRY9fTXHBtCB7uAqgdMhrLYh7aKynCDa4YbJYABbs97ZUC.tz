{ parameter (pair (bytes %nonce) (bytes %solution)) ;
  storage
    (pair (pair (pair (pair (int %blocksMined) (bytes %challenge))
                      (pair (timestamp %lastAdjustment)
                            (pair %lastReward (pair (timestamp %blockTime) (address %miner)) (nat %reward))))
                (pair (pair (pair %params
                               (pair (int %blocksPerAdjustment) (int %maxTarget))
                               (pair (int %minTarget) (int %secPerBlock)))
                            (int %rewardEra))
                      (pair (nat %rewardEraSupply) (big_map %solutions bytes bytes))))
          (pair (pair (int %target) (address %tokenContract))
                (pair (nat %totalMineable) (nat %totalMined)))) ;
  code { LAMBDA
           (pair int int)
           int
           { PUSH int 1 ;
             PUSH int 0 ;
             PAIR ;
             DIP { DUP } ;
             SWAP ;
             LAMBDA
               (pair (pair int int) (pair int int))
               (pair bool (pair int int))
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LT ;
                 IF { DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      MUL ;
                      PUSH int 1 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      ADD ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      SWAP ;
                      CDR ;
                      SWAP ;
                      PAIR ;
                      DIP { DROP 2 } ;
                      PUSH bool True ;
                      PAIR }
                    { DIG 1 ; DUP ; DUG 2 ; PUSH bool False ; PAIR } ;
                 DIP { DROP 3 } } ;
             SWAP ;
             APPLY ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
             SWAP ;
             DROP ;
             DUP ;
             CDR ;
             DIP { DROP 2 } } ;
         DUP ;
         LAMBDA
           bytes
           int
           { PUSH int 0 ;
             PUSH bytes 0x00 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 0 } { DUP } ;
             PUSH bytes 0x01 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 1 } { DUP } ;
             PUSH bytes 0x02 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 2 } { DUP } ;
             PUSH bytes 0x03 ;
             DIG 5 ;
             DUP ;
             DUG 6 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 3 } { DUP } ;
             PUSH bytes 0x04 ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 4 } { DUP } ;
             PUSH bytes 0x05 ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 5 } { DUP } ;
             PUSH bytes 0x06 ;
             DIG 8 ;
             DUP ;
             DUG 9 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 6 } { DUP } ;
             PUSH bytes 0x07 ;
             DIG 9 ;
             DUP ;
             DUG 10 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 7 } { DUP } ;
             PUSH bytes 0x08 ;
             DIG 10 ;
             DUP ;
             DUG 11 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 8 } { DUP } ;
             PUSH bytes 0x09 ;
             DIG 11 ;
             DUP ;
             DUG 12 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 9 } { DUP } ;
             PUSH bytes 0x0a ;
             DIG 12 ;
             DUP ;
             DUG 13 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 10 } { DUP } ;
             PUSH bytes 0x0b ;
             DIG 13 ;
             DUP ;
             DUG 14 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 11 } { DUP } ;
             PUSH bytes 0x0c ;
             DIG 14 ;
             DUP ;
             DUG 15 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 12 } { DUP } ;
             PUSH bytes 0x0d ;
             DIG 15 ;
             DUP ;
             DUG 16 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 13 } { DUP } ;
             PUSH bytes 0x0e ;
             DIG 16 ;
             DUP ;
             DUG 17 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 14 } { DUP } ;
             PUSH bytes 0x0f ;
             DIG 17 ;
             DUP ;
             DUG 18 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 15 } { DUP } ;
             PUSH bytes 0x10 ;
             DIG 18 ;
             DUP ;
             DUG 19 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 16 } { DUP } ;
             PUSH bytes 0x11 ;
             DIG 19 ;
             DUP ;
             DUG 20 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 17 } { DUP } ;
             PUSH bytes 0x12 ;
             DIG 20 ;
             DUP ;
             DUG 21 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 18 } { DUP } ;
             PUSH bytes 0x13 ;
             DIG 21 ;
             DUP ;
             DUG 22 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 19 } { DUP } ;
             PUSH bytes 0x14 ;
             DIG 22 ;
             DUP ;
             DUG 23 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 20 } { DUP } ;
             PUSH bytes 0x15 ;
             DIG 23 ;
             DUP ;
             DUG 24 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 21 } { DUP } ;
             PUSH bytes 0x16 ;
             DIG 24 ;
             DUP ;
             DUG 25 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 22 } { DUP } ;
             PUSH bytes 0x17 ;
             DIG 25 ;
             DUP ;
             DUG 26 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 23 } { DUP } ;
             PUSH bytes 0x18 ;
             DIG 26 ;
             DUP ;
             DUG 27 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 24 } { DUP } ;
             PUSH bytes 0x19 ;
             DIG 27 ;
             DUP ;
             DUG 28 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 25 } { DUP } ;
             PUSH bytes 0x1a ;
             DIG 28 ;
             DUP ;
             DUG 29 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 26 } { DUP } ;
             PUSH bytes 0x1b ;
             DIG 29 ;
             DUP ;
             DUG 30 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 27 } { DUP } ;
             PUSH bytes 0x1c ;
             DIG 30 ;
             DUP ;
             DUG 31 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 28 } { DUP } ;
             PUSH bytes 0x1d ;
             DIG 31 ;
             DUP ;
             DUG 32 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 29 } { DUP } ;
             PUSH bytes 0x1e ;
             DIG 32 ;
             DUP ;
             DUG 33 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 30 } { DUP } ;
             PUSH bytes 0x1f ;
             DIG 33 ;
             DUP ;
             DUG 34 ;
             COMPARE ;
             EQ ;
             IF { PUSH int 31 } { DUP } ;
             DIP { DROP 33 } } ;
         SWAP ;
         NIL operation ;
         SWAP ;
         LAMBDA
           (pair (lambda (pair int int) int)
                 (pair (pair (pair (pair int bytes) (pair timestamp (pair (pair timestamp address) nat)))
                             (pair (pair (pair (pair int int) (pair int int)) int) (pair nat (big_map bytes bytes))))
                       (pair (pair int address) (pair nat nat))))
           nat
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DUP ;
             CAR ;
             CDR ;
             CAR ;
             CDR ;
             PUSH int 2 ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SWAP ;
             EXEC ;
             ABS ;
             PUSH nat 5000000000 ;
             EDIV ;
             IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
             CAR ;
             DIP { DROP 2 } } ;
         SWAP ;
         APPLY ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CDR ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CDR ;
         PUSH bool False ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         DIG 9 ;
         DUP ;
         DUG 10 ;
         CAR ;
         CAR ;
         PAIR ;
         PAIR ;
         DUP ;
         CAR ;
         CDR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         DUP ;
         CDR ;
         CAR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         SIZE ;
         PUSH int 2 ;
         PUSH int 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         SUB ;
         MUL ;
         PUSH int 0 ;
         PUSH nat 0 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         PAIR ;
         PAIR ;
         DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DIP { DUP } ; DUP ; DIP { PAIR } ; SWAP } ; SWAP } ;
                                                                     SWAP } ;
                                                               DUP ;
                                                               DIP { PAIR } ;
                                                               SWAP } ;
                                                         SWAP } ;
                                                   SWAP } ;
                                             SWAP } ;
                                       SWAP } ;
                                 SWAP } ;
                           SWAP } ;
                     DUP ;
                     DIP { PAIR } ;
                     SWAP } ;
               SWAP } ;
         SWAP ;
         LAMBDA
           (pair (pair nat (pair bytes (pair (lambda bytes int) (lambda (pair int int) int))))
                 (pair (pair int nat) int))
           (pair bool (pair (pair int nat) int))
           { DUP ;
             CAR ;
             SWAP ;
             CDR ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DIP { DUP ; CDR ; SWAP ; CAR ; DIP { DUP ; CDR ; SWAP ; CAR } } } ;
             DUP ;
             CAR ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LT ;
             IF { DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  PUSH int 16 ;
                  PAIR ;
                  DIG 7 ;
                  DUP ;
                  DUG 8 ;
                  SWAP ;
                  EXEC ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  PUSH nat 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  SLICE ;
                  IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                  PUSH int 0 ;
                  PUSH bytes 0x1f ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0x00 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       SWAP ;
                       EXEC ;
                       DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIP { DROP 2 } }
                     { DUP } ;
                  PUSH bytes 0x3f ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0x20 ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       SWAP ;
                       EXEC ;
                       DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIG 1 ;
                       DUP ;
                       DUG 2 ;
                       DIP { DROP 2 } }
                     { DUP } ;
                  PUSH bytes 0x5f ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0x40 ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0x40 ;
                       DIG 6 ;
                       DUP ;
                       DUG 7 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 64 } { DUP } ;
                       PUSH bytes 0x41 ;
                       DIG 7 ;
                       DUP ;
                       DUG 8 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 65 } { DUP } ;
                       PUSH bytes 0x42 ;
                       DIG 8 ;
                       DUP ;
                       DUG 9 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 66 } { DUP } ;
                       PUSH bytes 0x43 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 67 } { DUP } ;
                       PUSH bytes 0x44 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 68 } { DUP } ;
                       PUSH bytes 0x45 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 69 } { DUP } ;
                       PUSH bytes 0x46 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 70 } { DUP } ;
                       PUSH bytes 0x47 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 71 } { DUP } ;
                       PUSH bytes 0x48 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 72 } { DUP } ;
                       PUSH bytes 0x49 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 73 } { DUP } ;
                       PUSH bytes 0x4a ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 74 } { DUP } ;
                       PUSH bytes 0x4b ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 75 } { DUP } ;
                       PUSH bytes 0x4c ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 76 } { DUP } ;
                       PUSH bytes 0x4d ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 77 } { DUP } ;
                       PUSH bytes 0x4e ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 78 } { DUP } ;
                       PUSH bytes 0x4f ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 79 } { DUP } ;
                       DIP { DROP 17 } }
                     { DUP } ;
                  PUSH bytes 0x7f ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0x60 ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0x60 ;
                       DIG 7 ;
                       DUP ;
                       DUG 8 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 96 } { DUP } ;
                       PUSH bytes 0x61 ;
                       DIG 8 ;
                       DUP ;
                       DUG 9 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 97 } { DUP } ;
                       PUSH bytes 0x62 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 98 } { DUP } ;
                       PUSH bytes 0x63 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 99 } { DUP } ;
                       PUSH bytes 0x64 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 100 } { DUP } ;
                       PUSH bytes 0x65 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 101 } { DUP } ;
                       PUSH bytes 0x66 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 102 } { DUP } ;
                       PUSH bytes 0x67 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 103 } { DUP } ;
                       PUSH bytes 0x68 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 104 } { DUP } ;
                       PUSH bytes 0x69 ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 105 } { DUP } ;
                       PUSH bytes 0x6a ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 106 } { DUP } ;
                       PUSH bytes 0x6b ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 107 } { DUP } ;
                       PUSH bytes 0x6c ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 108 } { DUP } ;
                       PUSH bytes 0x6d ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 109 } { DUP } ;
                       PUSH bytes 0x6e ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 110 } { DUP } ;
                       PUSH bytes 0x6f ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 111 } { DUP } ;
                       DIP { DROP 17 } }
                     { DUP } ;
                  PUSH bytes 0x9f ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0x80 ;
                  DIG 7 ;
                  DUP ;
                  DUG 8 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0x80 ;
                       DIG 8 ;
                       DUP ;
                       DUG 9 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 128 } { DUP } ;
                       PUSH bytes 0x81 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 129 } { DUP } ;
                       PUSH bytes 0x82 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 130 } { DUP } ;
                       PUSH bytes 0x83 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 131 } { DUP } ;
                       PUSH bytes 0x84 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 132 } { DUP } ;
                       PUSH bytes 0x85 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 133 } { DUP } ;
                       PUSH bytes 0x86 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 134 } { DUP } ;
                       PUSH bytes 0x87 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 135 } { DUP } ;
                       PUSH bytes 0x88 ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 136 } { DUP } ;
                       PUSH bytes 0x89 ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 137 } { DUP } ;
                       PUSH bytes 0x8a ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 138 } { DUP } ;
                       PUSH bytes 0x8b ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 139 } { DUP } ;
                       PUSH bytes 0x8c ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 140 } { DUP } ;
                       PUSH bytes 0x8d ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 141 } { DUP } ;
                       PUSH bytes 0x8e ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 142 } { DUP } ;
                       PUSH bytes 0x8f ;
                       DIG 23 ;
                       DUP ;
                       DUG 24 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 143 } { DUP } ;
                       DIP { DROP 17 } }
                     { DUP } ;
                  PUSH bytes 0xbf ;
                  DIG 7 ;
                  DUP ;
                  DUG 8 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0xa0 ;
                  DIG 8 ;
                  DUP ;
                  DUG 9 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0xa0 ;
                       DIG 9 ;
                       DUP ;
                       DUG 10 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 160 } { DUP } ;
                       PUSH bytes 0xa1 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 161 } { DUP } ;
                       PUSH bytes 0xa2 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 162 } { DUP } ;
                       PUSH bytes 0xa3 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 163 } { DUP } ;
                       PUSH bytes 0xa4 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 164 } { DUP } ;
                       PUSH bytes 0xa5 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 165 } { DUP } ;
                       PUSH bytes 0xa6 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 166 } { DUP } ;
                       PUSH bytes 0xa7 ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 167 } { DUP } ;
                       PUSH bytes 0xa8 ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 168 } { DUP } ;
                       PUSH bytes 0xa9 ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 169 } { DUP } ;
                       PUSH bytes 0xaa ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 170 } { DUP } ;
                       PUSH bytes 0xab ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 171 } { DUP } ;
                       PUSH bytes 0xac ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 172 } { DUP } ;
                       PUSH bytes 0xad ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 173 } { DUP } ;
                       PUSH bytes 0xae ;
                       DIG 23 ;
                       DUP ;
                       DUG 24 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 174 } { DUP } ;
                       PUSH bytes 0xaf ;
                       DIG 24 ;
                       DUP ;
                       DUG 25 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 175 } { DUP } ;
                       PUSH bytes 0xb0 ;
                       DIG 25 ;
                       DUP ;
                       DUG 26 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 176 } { DUP } ;
                       PUSH bytes 0xb1 ;
                       DIG 26 ;
                       DUP ;
                       DUG 27 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 177 } { DUP } ;
                       PUSH bytes 0xb2 ;
                       DIG 27 ;
                       DUP ;
                       DUG 28 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 178 } { DUP } ;
                       PUSH bytes 0xb3 ;
                       DIG 28 ;
                       DUP ;
                       DUG 29 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 179 } { DUP } ;
                       PUSH bytes 0xb4 ;
                       DIG 29 ;
                       DUP ;
                       DUG 30 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 180 } { DUP } ;
                       PUSH bytes 0xb5 ;
                       DIG 30 ;
                       DUP ;
                       DUG 31 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 181 } { DUP } ;
                       PUSH bytes 0xb6 ;
                       DIG 31 ;
                       DUP ;
                       DUG 32 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 182 } { DUP } ;
                       PUSH bytes 0xb7 ;
                       DIG 32 ;
                       DUP ;
                       DUG 33 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 183 } { DUP } ;
                       PUSH bytes 0xb8 ;
                       DIG 33 ;
                       DUP ;
                       DUG 34 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 184 } { DUP } ;
                       PUSH bytes 0xb9 ;
                       DIG 34 ;
                       DUP ;
                       DUG 35 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 185 } { DUP } ;
                       PUSH bytes 0xba ;
                       DIG 35 ;
                       DUP ;
                       DUG 36 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 186 } { DUP } ;
                       PUSH bytes 0xbb ;
                       DIG 36 ;
                       DUP ;
                       DUG 37 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 187 } { DUP } ;
                       PUSH bytes 0xbc ;
                       DIG 37 ;
                       DUP ;
                       DUG 38 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 188 } { DUP } ;
                       PUSH bytes 0xbd ;
                       DIG 38 ;
                       DUP ;
                       DUG 39 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 189 } { DUP } ;
                       PUSH bytes 0xbe ;
                       DIG 39 ;
                       DUP ;
                       DUG 40 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 190 } { DUP } ;
                       PUSH bytes 0xbf ;
                       DIG 40 ;
                       DUP ;
                       DUG 41 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 191 } { DUP } ;
                       DIP { DROP 33 } }
                     { DUP } ;
                  PUSH bytes 0xdf ;
                  DIG 8 ;
                  DUP ;
                  DUG 9 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0xc0 ;
                  DIG 9 ;
                  DUP ;
                  DUG 10 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0xc0 ;
                       DIG 10 ;
                       DUP ;
                       DUG 11 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 192 } { DUP } ;
                       PUSH bytes 0xc1 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 193 } { DUP } ;
                       PUSH bytes 0xc2 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 194 } { DUP } ;
                       PUSH bytes 0xc3 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 195 } { DUP } ;
                       PUSH bytes 0xc4 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 196 } { DUP } ;
                       PUSH bytes 0xc5 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 197 } { DUP } ;
                       PUSH bytes 0xc6 ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 198 } { DUP } ;
                       PUSH bytes 0xc7 ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 199 } { DUP } ;
                       PUSH bytes 0xc8 ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 200 } { DUP } ;
                       PUSH bytes 0xc9 ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 201 } { DUP } ;
                       PUSH bytes 0xca ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 202 } { DUP } ;
                       PUSH bytes 0xcb ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 203 } { DUP } ;
                       PUSH bytes 0xcc ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 204 } { DUP } ;
                       PUSH bytes 0xcd ;
                       DIG 23 ;
                       DUP ;
                       DUG 24 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 205 } { DUP } ;
                       PUSH bytes 0xce ;
                       DIG 24 ;
                       DUP ;
                       DUG 25 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 206 } { DUP } ;
                       PUSH bytes 0xcf ;
                       DIG 25 ;
                       DUP ;
                       DUG 26 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 207 } { DUP } ;
                       DIP { DROP 17 } }
                     { DUP } ;
                  PUSH bytes 0xff ;
                  DIG 9 ;
                  DUP ;
                  DUG 10 ;
                  COMPARE ;
                  LE ;
                  PUSH bytes 0xe0 ;
                  DIG 10 ;
                  DUP ;
                  DUG 11 ;
                  COMPARE ;
                  GE ;
                  AND ;
                  IF { DUP ;
                       PUSH int 0 ;
                       PUSH bytes 0xe0 ;
                       DIG 11 ;
                       DUP ;
                       DUG 12 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 224 } { DUP } ;
                       PUSH bytes 0xe1 ;
                       DIG 12 ;
                       DUP ;
                       DUG 13 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 225 } { DUP } ;
                       PUSH bytes 0xe2 ;
                       DIG 13 ;
                       DUP ;
                       DUG 14 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 226 } { DUP } ;
                       PUSH bytes 0xe3 ;
                       DIG 14 ;
                       DUP ;
                       DUG 15 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 227 } { DUP } ;
                       PUSH bytes 0xe4 ;
                       DIG 15 ;
                       DUP ;
                       DUG 16 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 228 } { DUP } ;
                       PUSH bytes 0xe5 ;
                       DIG 16 ;
                       DUP ;
                       DUG 17 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 229 } { DUP } ;
                       PUSH bytes 0xe6 ;
                       DIG 17 ;
                       DUP ;
                       DUG 18 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 230 } { DUP } ;
                       PUSH bytes 0xe7 ;
                       DIG 18 ;
                       DUP ;
                       DUG 19 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 231 } { DUP } ;
                       PUSH bytes 0xe8 ;
                       DIG 19 ;
                       DUP ;
                       DUG 20 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 232 } { DUP } ;
                       PUSH bytes 0xe9 ;
                       DIG 20 ;
                       DUP ;
                       DUG 21 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 233 } { DUP } ;
                       PUSH bytes 0xea ;
                       DIG 21 ;
                       DUP ;
                       DUG 22 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 234 } { DUP } ;
                       PUSH bytes 0xeb ;
                       DIG 22 ;
                       DUP ;
                       DUG 23 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 235 } { DUP } ;
                       PUSH bytes 0xec ;
                       DIG 23 ;
                       DUP ;
                       DUG 24 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 236 } { DUP } ;
                       PUSH bytes 0xed ;
                       DIG 24 ;
                       DUP ;
                       DUG 25 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 237 } { DUP } ;
                       PUSH bytes 0xee ;
                       DIG 25 ;
                       DUP ;
                       DUG 26 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 238 } { DUP } ;
                       PUSH bytes 0xef ;
                       DIG 26 ;
                       DUP ;
                       DUG 27 ;
                       COMPARE ;
                       EQ ;
                       IF { PUSH int 239 } { DUP } ;
                       DIP { DROP 17 } }
                     { DUP } ;
                  DIP { DROP 9 } ;
                  MUL ;
                  DUP ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CDR ;
                  ADD ;
                  PUSH nat 1 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  ADD ;
                  PUSH int 2 ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  SUB ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  SWAP ;
                  CAR ;
                  PAIR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                  SWAP ;
                  PAIR ;
                  PAIR ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                  PAIR ;
                  PAIR ;
                  DIP { DROP 4 } ;
                  PUSH bool True ;
                  PAIR }
                { DIG 2 ; DUP ; DUG 3 ; PUSH bool False ; PAIR } ;
             DIP { DROP 7 } } ;
         SWAP ;
         APPLY ;
         SWAP ;
         PUSH bool True ;
         LOOP { DIP { DUP } ; EXEC ; DUP ; CDR ; SWAP ; CAR } ;
         SWAP ;
         DROP ;
         DUP ;
         CDR ;
         DIP { DROP 3 } ;
         COMPARE ;
         LE ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         CAR ;
         CAR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         CONCAT ;
         BLAKE2B ;
         COMPARE ;
         EQ ;
         AND ;
         DIP { DROP 3 } ;
         COMPARE ;
         EQ ;
         IF { PUSH string "Invalid" ; FAILWITH } { PUSH unit Unit } ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CDR ;
         CDR ;
         CDR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         GET ;
         IF_NONE { PUSH unit Unit } { PUSH string "Solved" ; FAILWITH } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         SWAP ;
         EXEC ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         CAR ;
         CDR ;
         CONTRACT %mint (pair address nat) ;
         IF_NONE
           { PUSH string "bad address for get_entrypoint (%mint)" ; FAILWITH }
           {} ;
         DUP ;
         PUSH mutez 0 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         SENDER ;
         PAIR ;
         TRANSFER_TOKENS ;
         NIL operation ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CONS ;
         DIG 6 ;
         DUP ;
         DUG 7 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         DIG 8 ;
         DUP ;
         DUG 9 ;
         CDR ;
         CDR ;
         CDR ;
         ADD ;
         DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; CAR } ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         DUP ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         CAR ;
         SENDER ;
         SWAP ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         DIG 6 ;
         DUP ;
         DUG 7 ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CAR } ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CAR ;
         SWAP ;
         CDR ;
         DUP ;
         CDR ;
         SWAP ;
         CAR ;
         CDR ;
         NOW ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CDR ;
         CDR ;
         CDR ;
         DIG 12 ;
         DUP ;
         DUG 13 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         CAR ;
         CAR ;
         CDR ;
         SWAP ;
         SOME ;
         SWAP ;
         UPDATE ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CAR } ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         DIG 13 ;
         DUP ;
         DUG 14 ;
         SWAP ;
         EXEC ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CDR ;
         CDR ;
         CDR ;
         ADD ;
         PUSH int 39 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         CDR ;
         COMPARE ;
         LT ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CDR ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         COMPARE ;
         GT ;
         AND ;
         IF { DIG 1 ;
              DUP ;
              DUG 2 ;
              PUSH int 1 ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CDR ;
              CAR ;
              CDR ;
              ADD ;
              DIP { DUP ;
                    CDR ;
                    SWAP ;
                    CAR ;
                    DUP ;
                    CAR ;
                    SWAP ;
                    CDR ;
                    DUP ;
                    CDR ;
                    SWAP ;
                    CAR ;
                    CAR } ;
              SWAP ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              DIP { DROP 2 } }
            { DIG 1 ; DUP ; DUG 2 } ;
         DUP ;
         PUSH int 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CDR ;
         CAR ;
         CDR ;
         ADD ;
         PUSH int 2 ;
         PAIR ;
         DIG 19 ;
         DUP ;
         DUG 20 ;
         SWAP ;
         EXEC ;
         ABS ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CDR ;
         CAR ;
         EDIV ;
         IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
         CAR ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         CDR ;
         CAR ;
         SUB ;
         ABS ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               DUP ;
               CAR ;
               SWAP ;
               CDR ;
               CDR } ;
         PAIR ;
         SWAP ;
         PAIR ;
         SWAP ;
         PAIR ;
         PAIR ;
         DUP ;
         PUSH int 1 ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         ADD ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               CDR } ;
         PAIR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DUP ;
         CAR ;
         CDR ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         CAR ;
         CAR ;
         CAR ;
         CAR ;
         EDIV ;
         IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
         CDR ;
         PUSH nat 0 ;
         DIG 1 ;
         DUP ;
         DUG 2 ;
         COMPARE ;
         EQ ;
         IF { DIG 1 ;
              DUP ;
              DUG 2 ;
              CDR ;
              CAR ;
              CAR ;
              PUSH int 1000000 ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CAR ;
              CDR ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              CAR ;
              CAR ;
              CDR ;
              CAR ;
              NOW ;
              SUB ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CDR ;
              CDR ;
              DIG 4 ;
              DUP ;
              DUG 5 ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CAR ;
              CAR ;
              MUL ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DIG 3 ;
              DUP ;
              DUG 4 ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              PUSH int 1000000 ;
              DIG 6 ;
              DUP ;
              DUG 7 ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CAR ;
              CDR ;
              MUL ;
              EDIV ;
              IF_NONE { PUSH string "DIV by 0" ; FAILWITH } {} ;
              CAR ;
              DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
              PAIR ;
              PAIR ;
              SWAP ;
              PAIR ;
              DUP ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CAR ;
              CDR ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              CDR ;
              CAR ;
              CAR ;
              COMPARE ;
              GT ;
              IF { DUP ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CDR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                   PAIR ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   DIP { DROP } }
                 { DUP } ;
              DUP ;
              CAR ;
              CDR ;
              CAR ;
              CAR ;
              CDR ;
              CAR ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              CDR ;
              CAR ;
              CAR ;
              COMPARE ;
              LT ;
              IF { DUP ;
                   DIG 1 ;
                   DUP ;
                   DUG 2 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CDR ;
                   CAR ;
                   CAR ;
                   CDR ;
                   CAR ;
                   DIP { DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
                   PAIR ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   DIP { DROP } }
                 { DUP } ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CDR ;
              SWAP ;
              CAR ;
              DUP ;
              CAR ;
              SWAP ;
              CDR ;
              CDR ;
              NOW ;
              PAIR ;
              SWAP ;
              PAIR ;
              PAIR ;
              PAIR ;
              DUP ;
              DIP { DROP 5 } ;
              DIG 2 ;
              DUP ;
              DUG 3 ;
              DIG 1 ;
              DUP ;
              DUG 2 ;
              DIP { DROP 2 } }
            { DIG 1 ; DUP ; DUG 2 } ;
         DUP ;
         DIG 18 ;
         DUP ;
         DUG 19 ;
         BLAKE2B ;
         DIP { DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               DUP ;
               CDR ;
               SWAP ;
               CAR ;
               CAR } ;
         SWAP ;
         PAIR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DIG 11 ;
         DUP ;
         DUG 12 ;
         PAIR ;
         DIP { DROP 23 } } }
