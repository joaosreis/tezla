{ parameter
    (or (or (list %administrate (or (address %changeAdmin) (address %changeToken)))
            (pair %cancel_request (bool %force) (nat %requestId)))
        (or (pair %fulfill_request
               (address %clientAddress)
               (pair (map %parameters string (or (bytes %bytes) (or (int %int) (string %string))))
                     (nat %requestId)))
            (pair %on_token_transfer
               (nat %amount)
               (pair (bytes %data) (pair (address %sender) (nat %tokenId)))))) ;
  storage
    (pair (address %adminAddress)
          (pair (big_map %locked
                   (pair address nat)
                   (pair (pair (address %callbackAddress) (timestamp %cancelTimeout))
                         (pair (address %clientAddress) (pair (address %oracleAddress) (nat %payment)))))
                (address %tokenAddress))) ;
  code { CAST (pair (or (or (list (or address address)) (pair bool nat))
                        (or (pair address (pair (map string (or bytes (or int string))) nat))
                            (pair nat (pair bytes (pair address nat)))))
                    (pair address
                          (pair (big_map
                                   (pair address nat)
                                   (pair (pair address timestamp) (pair address (pair address nat))))
                                address))) ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify" (Pair 151 (Pair "sp.sender == self.data.adminAddress" "ESCROW_NotAdmin"))) ;
                      FAILWITH } ;
                 DUP ;
                 ITER { IF_LEFT
                          { DIG 2 ; SWAP ; UPDATE 1 ; SWAP }
                          { DIG 2 ; SWAP ; UPDATE 4 ; SWAP } } ;
                 DROP ;
                 NIL operation }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 NONE (pair (pair address timestamp) (pair address (pair address nat))) ;
                 DUP 3 ;
                 CDR ;
                 SENDER ;
                 PAIR ;
                 GET_AND_UPDATE ;
                 DIG 3 ;
                 DIG 2 ;
                 UPDATE 3 ;
                 DUG 2 ;
                 DUP ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 103
                                        (Pair "match_pair_102_fst.open_some(message = 'ESCROW_RequestIdUnknownForClient')"
                                              "ESCROW_RequestIdUnknownForClient"))) ;
                       FAILWITH }
                     {} } ;
                 CAR ;
                 CDR ;
                 NOW ;
                 COMPARE ;
                 GE ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 107
                                       (Pair "sp.now >= match_pair_102_fst.open_some(message = 'ESCROW_RequestIdUnknownForClient').cancelTimeout"
                                             "ESCROW_CannotCancelBeforeTimeout"))) ;
                      FAILWITH } ;
                 NIL operation ;
                 DUP 4 ;
                 GET 4 ;
                 CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 161
                                        (Pair "sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout((\"to_\", (\"token_id\", \"amount\"))))).layout((\"from_\", \"txs\"))), self.data.tokenAddress, entry_point='transfer').open_some(message = 'ESCROW_TokenTransferInvalid')"
                                              "ESCROW_TokenTransferInvalid"))) ;
                       FAILWITH }
                     {} } ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 NIL (pair address (pair nat nat)) ;
                 DUP 6 ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 103
                                        (Pair "match_pair_102_fst.open_some(message = 'ESCROW_RequestIdUnknownForClient')"
                                              "ESCROW_RequestIdUnknownForClient"))) ;
                       FAILWITH }
                     {} } ;
                 GET 6 ;
                 PUSH nat 0 ;
                 SENDER ;
                 PAIR 3 ;
                 CONS ;
                 SELF_ADDRESS ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 DUP 3 ;
                 CAR ;
                 IF { SWAP ; DROP ; SWAP ; DROP }
                    { SWAP ;
                      { IF_NONE
                          { PUSH (pair string (pair int (pair string string)))
                                 (Pair "OpenVariant"
                                       (Pair 103
                                             (Pair "match_pair_102_fst.open_some(message = 'ESCROW_RequestIdUnknownForClient')"
                                                   "ESCROW_RequestIdUnknownForClient"))) ;
                            FAILWITH }
                          {} } ;
                      GET 5 ;
                      CONTRACT %cancel_request (pair address nat) ;
                      { IF_NONE
                          { PUSH (pair string (pair int (pair string string)))
                                 (Pair "OpenVariant"
                                       (Pair 117
                                             (Pair "sp.contract(sp.TRecord(clientAddress = sp.TAddress, requestId = sp.TNat).layout((\"clientAddress\", \"requestId\")), match_pair_102_fst.open_some(message = 'ESCROW_RequestIdUnknownForClient').oracleAddress, entry_point='cancel_request').open_some(message = 'ESCROW_OracleNotFound')"
                                                   "ESCROW_OracleNotFound"))) ;
                            FAILWITH }
                          {} } ;
                      PUSH mutez 0 ;
                      DIG 3 ;
                      CDR ;
                      SENDER ;
                      PAIR ;
                      TRANSFER_TOKENS ;
                      CONS } } }
           { IF_LEFT
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 SWAP ;
                 DUP ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 PAIR ;
                 MEM ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 125
                                       (Pair "self.data.locked.contains((params.clientAddress, params.requestId))"
                                             "ESCROW_RequestUnknown"))) ;
                      FAILWITH } ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 3 ;
                 NONE (pair (pair address timestamp) (pair address (pair address nat))) ;
                 DIG 2 ;
                 DUP ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 PAIR ;
                 GET_AND_UPDATE ;
                 DIG 3 ;
                 DUP 3 ;
                 UPDATE 3 ;
                 DUG 3 ;
                 DUP ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string int)))
                            (Pair "OpenVariant" (Pair 130 (Pair "match_pair_128_fst.open_some()" 130))) ;
                       FAILWITH }
                     {} } ;
                 GET 5 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 133
                                       (Pair "sp.sender == match_pair_128_fst.open_some().oracleAddress"
                                             "ESCROW_SenderNotOracle"))) ;
                      FAILWITH } ;
                 NIL operation ;
                 DUP 5 ;
                 GET 4 ;
                 CONTRACT %transfer (list (pair address (list (pair address (pair nat nat))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 161
                                        (Pair "sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout((\"to_\", (\"token_id\", \"amount\"))))).layout((\"from_\", \"txs\"))), self.data.tokenAddress, entry_point='transfer').open_some(message = 'ESCROW_TokenTransferInvalid')"
                                              "ESCROW_TokenTransferInvalid"))) ;
                       FAILWITH }
                     {} } ;
                 PUSH mutez 0 ;
                 NIL (pair address (list (pair address (pair nat nat)))) ;
                 NIL (pair address (pair nat nat)) ;
                 DUP 6 ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string int)))
                            (Pair "OpenVariant" (Pair 130 (Pair "match_pair_128_fst.open_some()" 130))) ;
                       FAILWITH }
                     {} } ;
                 GET 6 ;
                 PUSH nat 0 ;
                 DUP 8 ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string int)))
                            (Pair "OpenVariant" (Pair 130 (Pair "match_pair_128_fst.open_some()" 130))) ;
                       FAILWITH }
                     {} } ;
                 GET 5 ;
                 PAIR 3 ;
                 CONS ;
                 SELF_ADDRESS ;
                 PAIR ;
                 CONS ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 DUP ;
                 DUP 3 ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string int)))
                            (Pair "OpenVariant" (Pair 130 (Pair "match_pair_128_fst.open_some()" 130))) ;
                       FAILWITH }
                     {} } ;
                 CAR ;
                 CAR ;
                 CONTRACT (pair address (pair address (pair (map string (or bytes (or int string))) nat))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 147
                                        (Pair "sp.contract(sp.TRecord(clientAddress = sp.TAddress, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\")))), requestId = sp.TNat).layout((\"clientAddress\", (\"oracleAddress\", (\"parameters\", \"requestId\")))), match_pair_128_fst.open_some().callbackAddress).open_some(message = 'ESCROW_CallbackInvalid')"
                                              "ESCROW_CallbackInvalid"))) ;
                       FAILWITH }
                     {} } ;
                 PUSH mutez 0 ;
                 DIG 6 ;
                 DUP ;
                 GET 4 ;
                 SWAP ;
                 DUP ;
                 DUG 8 ;
                 GET 3 ;
                 SENDER ;
                 DUP 10 ;
                 CAR ;
                 PAIR 4 ;
                 DIG 4 ;
                 DROP ;
                 DIG 4 ;
                 DROP ;
                 DIG 4 ;
                 DROP ;
                 DIG 4 ;
                 DROP ;
                 TRANSFER_TOKENS ;
                 CONS }
               { SWAP ;
                 DUP ;
                 DUG 2 ;
                 GET 4 ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 67 (Pair "sp.sender == self.data.tokenAddress" "ESCROW_SenderNotToken"))) ;
                      FAILWITH } ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 SWAP ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 5 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 EQ ;
                 IF {}
                    { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 75
                                       (Pair "sender_69 == sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData').clientAddress"
                                             "ESCROW_SenderNotClient"))) ;
                      FAILWITH } ;
                 DUP 4 ;
                 GET 3 ;
                 DUP 3 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 7 ;
                 DUP 3 ;
                 PAIR ;
                 MEM ;
                 IF { PUSH (pair string (pair int (pair string string)))
                           (Pair "verify"
                                 (Pair 81
                                       (Pair "~ (self.data.locked.contains((sender_69, sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData').id)))"
                                             "ESCROW_RequestIdAlreadyKnownForClient"))) ;
                      FAILWITH }
                    {} ;
                 DIG 3 ;
                 DUP ;
                 GET 3 ;
                 DUP 5 ;
                 DUP 5 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 11 ;
                 PAIR ;
                 DUP 5 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 5 ;
                 PAIR ;
                 DUP 5 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 3 ;
                 DUP 6 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 SOME ;
                 DUP 5 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 7 ;
                 DIG 4 ;
                 PAIR ;
                 UPDATE ;
                 UPDATE 3 ;
                 DUG 2 ;
                 DUP ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 GET 11 ;
                 CONTRACT %create_request
                   (pair nat
                         (pair address
                               (pair timestamp
                                     (pair address
                                           (pair nat (pair string (pair address (map string (or bytes (or int string)))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 96
                                        (Pair "sp.contract(sp.TRecord(payment = sp.TNat, request = sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).layout((\"payment\", \"request\")), sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData').oracleAddress, entry_point='create_request').open_some(message = 'ESCROW_OracleNotFound')"
                                              "ESCROW_OracleNotFound"))) ;
                       FAILWITH }
                     {} } ;
                 NIL operation ;
                 SWAP ;
                 PUSH mutez 0 ;
                 DIG 3 ;
                 UNPACK
                   (pair address
                         (pair timestamp
                               (pair address
                                     (pair nat (pair string (pair address (map string (or bytes (or int string))))))))) ;
                 { IF_NONE
                     { PUSH (pair string (pair int (pair string string)))
                            (Pair "OpenVariant"
                                  (Pair 72
                                        (Pair "sp.unpack(data_69, sp.TRecord(callbackAddress = sp.TAddress, cancelTimeout = sp.TTimestamp, clientAddress = sp.TAddress, id = sp.TNat, jobId = sp.TString, oracleAddress = sp.TAddress, parameters = sp.TMap(sp.TString, sp.TVariant(bytes = sp.TBytes, int = sp.TInt, string = sp.TString).layout((\"bytes\", (\"int\", \"string\"))))).layout((\"callbackAddress\", (\"cancelTimeout\", (\"clientAddress\", (\"id\", (\"jobId\", (\"oracleAddress\", \"parameters\")))))))).open_some(message = 'ESCROW_FailedToUnpackData')"
                                              "ESCROW_FailedToUnpackData"))) ;
                       FAILWITH }
                     {} } ;
                 DIG 4 ;
                 PAIR ;
                 TRANSFER_TOKENS ;
                 CONS } } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         PAIR } }
