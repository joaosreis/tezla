{ parameter
    (or (unit %default)
        (pair %mainParameter
           (pair nat
                 (or (pair (or (or (or (list address) unit) (or unit unit))
                               (or (or (or (or (or (pair (address :from) (pair (address :to) (nat :value)))
                                                   (pair (address :spender) (nat :value)))
                                               (or (pair (address :spender) (pair (nat :value) (nat :expected)))
                                                   (pair (pair (address :owner) (address :spender)) (contract nat))))
                                           (or (or (pair (address :owner) (contract nat)) (pair unit (contract nat)))
                                               (or bool (pair unit (lambda bool bool)))))
                                       (or (or (or (address :newAdmin) (pair unit (contract address)))
                                               (or nat (pair unit (lambda nat nat))))
                                           (or (or (pair unit (lambda nat nat)) (pair (address :to) (nat :value)))
                                               (or (list (pair (address :to) (nat :value))) (or (pair (address :from) (nat :value)) unit)))))
                                   (or (or address address)
                                       (or (pair address (lambda bool bool)) (or (list address) (list address))))))
                           address)
                     (pair nat (list key))))
           (list (option signature)))) ;
  storage (pair nat (pair nat (list key))) ;
  code { CAST (pair (or unit
                        (pair (pair nat
                                    (or (pair (or (or (or (list address) unit) (or unit unit))
                                                  (or (or (or (or (or (pair address (pair address nat)) (pair address nat))
                                                                  (or (pair address (pair nat nat)) (pair (pair address address) (contract nat))))
                                                              (or (or (pair address (contract nat)) (pair unit (contract nat)))
                                                                  (or bool (pair unit (lambda bool bool)))))
                                                          (or (or (or address (pair unit (contract address))) (or nat (pair unit (lambda nat nat))))
                                                              (or (or (pair unit (lambda nat nat)) (pair address nat))
                                                                  (or (list (pair address nat)) (or (pair address nat) unit)))))
                                                      (or (or address address)
                                                          (or (pair address (lambda bool bool)) (or (list address) (list address))))))
                                              address)
                                        (pair nat (list key))))
                              (list (option signature))))
                    (pair nat (pair nat (list key)))) ;
         DUP ;
         CAR ;
         DIP { CDR } ;
         IF_LEFT
           { DROP ; NIL operation ; PAIR }
           { PUSH mutez 0 ;
             AMOUNT ;
             COMPARE ;
             EQ ;
             IF {} { UNIT ; FAILWITH } ;
             SWAP ;
             DUP ;
             DIP { SWAP } ;
             DIP { DUP ;
                   CAR ;
                   DIP { CDR } ;
                   DUP ;
                   SELF ;
                   ADDRESS ;
                   PAIR ;
                   PACK ;
                   DIP { DUP ; CAR ; DIP { CDR } ; DIP { SWAP } } ;
                   SWAP } ;
             DUP ;
             CAR ;
             DIP { CDR } ;
             DIP { SWAP } ;
             COMPARE ;
             EQ ;
             IF {} { UNIT ; FAILWITH } ;
             DIP { SWAP } ;
             DUP ;
             CAR ;
             DIP { CDR } ;
             DIP { PUSH nat 0 ;
                   SWAP ;
                   ITER { DIP { SWAP } ;
                          SWAP ;
                          IF_CONS
                            { IF_NONE
                                { SWAP ; DROP }
                                { SWAP ;
                                  DIP { SWAP ;
                                        DIP { DIP { DIP { DUP } ; SWAP } } ;
                                        DIP 2 { DUP } ;
                                        DIG 2 ;
                                        DIP { CHECK_SIGNATURE } ;
                                        SWAP ;
                                        IF { DROP } { UNIT ; FAILWITH } ;
                                        PUSH nat 1 ;
                                        ADD } } }
                            { UNIT ; FAILWITH } ;
                          SWAP } } ;
             COMPARE ;
             LE ;
             IF {} { UNIT ; FAILWITH } ;
             IF_CONS { UNIT ; FAILWITH } {} ;
             DROP ;
             DIP { DUP ; CAR ; DIP { CDR } ; PUSH nat 1 ; ADD ; PAIR } ;
             IF_LEFT
               { SWAP ;
                 DIP { DUP ;
                       CAR ;
                       DIP { CDR } ;
                       DIP { DIP { NIL operation } ; PUSH mutez 0 } ;
                       DIP { DIP { CONTRACT
                                     (or (or (or (list address) unit) (or unit unit))
                                         (or (or (or (or (or (pair address (pair address nat)) (pair address nat))
                                                         (or (pair address (pair nat nat)) (pair (pair address address) (contract nat))))
                                                     (or (or (pair address (contract nat)) (pair unit (contract nat)))
                                                         (or bool (pair unit (lambda bool bool)))))
                                                 (or (or (or address (pair unit (contract address))) (or nat (pair unit (lambda nat nat))))
                                                     (or (or (pair unit (lambda nat nat)) (pair address nat))
                                                         (or (list (pair address nat)) (or (pair address nat) unit)))))
                                             (or (or address address)
                                                 (or (pair address (lambda bool bool)) (or (list address) (list address)))))) ;
                                   IF_NONE { UNIT ; FAILWITH } {} } } ;
                       TRANSFER_TOKENS ;
                       CONS } ;
                 SWAP }
               { DUP ;
                 DUP ;
                 CAR ;
                 PUSH nat 0 ;
                 COMPARE ;
                 EQ ;
                 IF { UNIT ; FAILWITH } {} ;
                 DUP ;
                 CAR ;
                 DIP { CDR } ;
                 DIP { SIZE } ;
                 COMPARE ;
                 GT ;
                 IF { UNIT ; FAILWITH } {} ;
                 DIP { CAR } ;
                 SWAP ;
                 PAIR ;
                 NIL operation } ;
             PAIR } } }
