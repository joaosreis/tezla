{ storage
    (pair (address %owner)
          (pair (timestamp %dateofstop)
                (pair (timestamp %dateofstart)
                      (pair (pair %rate int nat)
                            (pair (int %time_unit)
                                  (pair (mutez %tez_unit) (pair (option %user address) (int %read_interval)))))))) ;
  parameter
    (or (unit %start)
        (or (unit %interrupt) (or (unit %collect) (pair %setunits (int %dunit) (mutez %tunit))))) ;
  code { LAMBDA
           (pair (pair int nat) (pair mutez int))
           (pair int nat)
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             PUSH unit Unit ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             PUSH mutez 1 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             EDIV ;
             IF_NONE { PUSH string "DivByZero" ; FAILWITH } { DUP ; CAR ; SWAP ; DROP } ;
             PUSH nat 1 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             INT ;
             PAIR ;
             PUSH nat 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             PAIR ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             PAIR ;
             UNPAIR ;
             DIP { UNPAIR } ;
             UNPAIR ;
             DIP { SWAP } ;
             MUL ;
             DIP { MUL } ;
             PAIR ;
             PAIR ;
             UNPAIR ;
             DIP { UNPAIR } ;
             UNPAIR ;
             DIG 3 ;
             PUSH int 0 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             COMPARE ;
             GE ;
             IF { INT } { NEG } ;
             MUL ;
             DIP { MUL ; ABS } ;
             PAIR ;
             DIP { DIG 2 ; DROP } ;
             DUG 2 ;
             DROP 2 ;
             DUG 3 ;
             DROP 3 } ;
         LAMBDA
           (pair timestamp
                 (pair (pair int nat)
                       (pair mutez (pair int (lambda (pair (pair int nat) (pair mutez int)) (pair int nat))))))
           mutez
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             PUSH unit Unit ;
             NOW ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             SUB ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             PAIR ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             PAIR ;
             EXEC ;
             PUSH nat 1 ;
             PUSH nat 1 ;
             INT ;
             PAIR ;
             PAIR ;
             UNPAIR ;
             DIP { UNPAIR } ;
             UNPAIR ;
             DIG 3 ;
             PUSH int 0 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             COMPARE ;
             GE ;
             IF { INT } { NEG } ;
             MUL ;
             DIP { MUL ; ABS } ;
             PAIR ;
             PAIR ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DivByZero" ; FAILWITH } {} ;
             CAR ;
             PUSH mutez 1 ;
             PUSH nat 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             UNPAIR ;
             UNPAIR ;
             ABS ;
             DIG 2 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DivByZero" ; FAILWITH } {} ;
             CAR ;
             DIP { DIG 1 ; DROP } ;
             DUG 1 ;
             DROP ;
             DUG 5 ;
             DROP 5 } ;
         NIL operation ;
         DIG 3 ;
         UNPAIR ;
         DIP { UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP ;
               UNPAIR ;
               SWAP } ;
         IF_LEFT
           { DROP ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             NOW ;
             COMPARE ;
             GT ;
             NOT ;
             IF { PUSH string "InvalidCondition: r1" ; FAILWITH } {} ;
             PUSH mutez 1 ;
             AMOUNT ;
             EDIV ;
             IF_NONE { PUSH string "DivByZero" ; FAILWITH } { DUP ; CAR ; SWAP ; DROP } ;
             PUSH int 1 ;
             PUSH nat 1 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             INT ;
             PAIR ;
             DIG 13 ;
             DUP ;
             DUG 14 ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             DIG 7 ;
             DUP ;
             DUG 8 ;
             PAIR ;
             DIG 9 ;
             DUP ;
             DUG 10 ;
             PAIR ;
             EXEC ;
             PAIR ;
             UNPAIR ;
             DIP { UNPAIR } ;
             UNPAIR ;
             DIP { SWAP } ;
             MUL ;
             DIP { MUL } ;
             PAIR ;
             PAIR ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             MUL ;
             EDIV ;
             IF_NONE { PUSH string "DivByZero" ; FAILWITH } {} ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             IF { DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  NOW ;
                  ADD ;
                  ADD ;
                  DIP { DIG 8 ; DROP } ;
                  DUG 8 ;
                  NOW ;
                  DIP { DIG 7 ; DROP } ;
                  DUG 7 ;
                  SENDER ;
                  SOME ;
                  DIP { DIG 3 ; DROP } ;
                  DUG 3 }
                {} ;
             DROP 2 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             DIG 1 ;
             PAIR }
           { IF_LEFT
               { DROP ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 NOW ;
                 COMPARE ;
                 LT ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 IF_NONE { PUSH string "NoneValue" ; FAILWITH } {} ;
                 SENDER ;
                 COMPARE ;
                 EQ ;
                 AND ;
                 NOT ;
                 IF { PUSH string "InvalidCondition: r2" ; FAILWITH } {} ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 SENDER ;
                 CONTRACT unit ;
                 IF_NONE { PUSH string "BadContract" ; FAILWITH } {} ;
                 DIG 11 ;
                 DUP ;
                 DUG 12 ;
                 DIG 13 ;
                 DUP ;
                 DUG 14 ;
                 DIG 7 ;
                 DUP ;
                 DUG 8 ;
                 PAIR ;
                 DIG 6 ;
                 DUP ;
                 DUG 7 ;
                 PAIR ;
                 DIG 8 ;
                 DUP ;
                 DUG 9 ;
                 PAIR ;
                 DIG 10 ;
                 DUP ;
                 DUG 11 ;
                 PAIR ;
                 EXEC ;
                 UNIT ;
                 TRANSFER_TOKENS ;
                 CONS ;
                 DIP { DIG 8 ; DROP } ;
                 DUG 8 ;
                 DUP ;
                 NOW ;
                 SUB ;
                 DIP { DIG 6 ; DROP } ;
                 DUG 6 ;
                 DUP ;
                 NOW ;
                 SUB ;
                 DIP { DIG 5 ; DROP } ;
                 DUG 5 ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 DIG 1 ;
                 PAIR }
               { IF_LEFT
                   { DROP ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     NOT ;
                     IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DIG 7 ;
                     DUP ;
                     DUG 8 ;
                     NOW ;
                     COMPARE ;
                     LT ;
                     IF { DIG 10 ;
                          DUP ;
                          DUG 11 ;
                          DIG 12 ;
                          DUP ;
                          DUG 13 ;
                          DIG 6 ;
                          DUP ;
                          DUG 7 ;
                          PAIR ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          PAIR ;
                          DIG 7 ;
                          DUP ;
                          DUG 8 ;
                          PAIR ;
                          DIG 9 ;
                          DUP ;
                          DUG 10 ;
                          PAIR ;
                          EXEC ;
                          SWAP ;
                          DROP }
                        {} ;
                     PUSH mutez 0 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     BALANCE ;
                     SUB ;
                     COMPARE ;
                     GT ;
                     IF { DIG 9 ;
                          DUP ;
                          DUG 10 ;
                          DIG 9 ;
                          DUP ;
                          DUG 10 ;
                          CONTRACT unit ;
                          IF_NONE { PUSH string "BadContract" ; FAILWITH } {} ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          BALANCE ;
                          SUB ;
                          UNIT ;
                          TRANSFER_TOKENS ;
                          CONS ;
                          DIP { DIG 9 ; DROP } ;
                          DUG 9 }
                        {} ;
                     DROP ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIG 1 ;
                     PAIR }
                   { UNPAIR ;
                     SWAP ;
                     DIG 9 ;
                     DUP ;
                     DUG 10 ;
                     SENDER ;
                     COMPARE ;
                     EQ ;
                     NOT ;
                     IF { PUSH string "InvalidCaller" ; FAILWITH } {} ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIP { DIG 5 ; DROP } ;
                     DUG 5 ;
                     DUP ;
                     DIP { DIG 4 ; DROP } ;
                     DUG 4 ;
                     DROP 2 ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     DIG 1 ;
                     PAIR } } } ;
         DIP { DROP 2 } } }
