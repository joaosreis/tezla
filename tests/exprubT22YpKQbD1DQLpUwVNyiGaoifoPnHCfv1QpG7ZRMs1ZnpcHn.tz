{ storage
    (pair (address %admin)
          (pair (map %ads
                   nat
                   (pair (pair (pair (nat %height) (string %image)) (pair (string %link) (bool %nsfw)))
                         (pair (pair (address %owner) (string %title)) (pair (nat %width) (pair (nat %x) (nat %y))))))
                (map %grid (pair nat nat) bool))) ;
  parameter
    (or (pair %buy (pair (nat %height) (nat %width)) (pair (nat %x) (nat %y)))
        (pair %update_metadata
           (pair (nat %ad_id) (string %image))
           (pair (string %link) (pair (bool %nsfw) (string %title))))) ;
  code { UNPAIR ;
         IF_LEFT
           { PUSH mutez 0 ;
             PUSH mutez 1 ;
             PUSH nat 100 ;
             DIG 3 ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 5 ;
             CAR ;
             CDR ;
             MUL ;
             MUL ;
             MUL ;
             COMPARE ;
             GT ;
             IF {}
                { PUSH string
                       "WrongCondition: sp.mutez((params.width * params.height) * 100) > sp.tez(0)" ;
                  FAILWITH } ;
             PUSH mutez 1 ;
             PUSH nat 100 ;
             DIG 2 ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             MUL ;
             MUL ;
             MUL ;
             AMOUNT ;
             COMPARE ;
             GE ;
             IF {}
                { PUSH string
                       "WrongCondition: sp.amount >= sp.mutez((params.width * params.height) * 100)" ;
                  FAILWITH } ;
             DUP ;
             CAR ;
             CDR ;
             PUSH nat 0 ;
             DUP ;
             DUP 3 ;
             COMPARE ;
             GT ;
             LOOP { DUP 3 ;
                    CAR ;
                    CAR ;
                    PUSH nat 0 ;
                    DUP ;
                    DUP 3 ;
                    COMPARE ;
                    GT ;
                    LOOP { DUP 6 ;
                           GET 4 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           DUP 7 ;
                           GET 4 ;
                           ADD ;
                           DUP 5 ;
                           DUP 8 ;
                           GET 3 ;
                           ADD ;
                           PAIR ;
                           MEM ;
                           IF { DUP ;
                                DUP 6 ;
                                GET 4 ;
                                ADD ;
                                INT ;
                                DUP 4 ;
                                DUP 7 ;
                                GET 3 ;
                                ADD ;
                                INT ;
                                PAIR ;
                                PUSH string "contains pixel that has been bought already" ;
                                PAIR ;
                                FAILWITH }
                              {} ;
                           DIG 5 ;
                           UNPAIR ;
                           SWAP ;
                           UNPAIR ;
                           SWAP ;
                           PUSH (option bool) (Some True) ;
                           DUP 5 ;
                           DUP 10 ;
                           GET 4 ;
                           ADD ;
                           DUP 8 ;
                           DUP 11 ;
                           GET 3 ;
                           ADD ;
                           PAIR ;
                           UPDATE ;
                           SWAP ;
                           PAIR ;
                           SWAP ;
                           PAIR ;
                           DUG 5 ;
                           PUSH nat 1 ;
                           ADD ;
                           DUP ;
                           DUP 3 ;
                           COMPARE ;
                           GT } ;
                    DROP 2 ;
                    PUSH nat 1 ;
                    ADD ;
                    DUP ;
                    DUP 3 ;
                    COMPARE ;
                    GT } ;
             DROP 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             DIG 3 ;
             DUP ;
             GET 4 ;
             SWAP ;
             DUP ;
             DUG 5 ;
             GET 3 ;
             PAIR %x %y ;
             DUP 5 ;
             CAR ;
             CDR ;
             PAIR %width ;
             PUSH string "" ;
             SENDER ;
             PAIR %owner %title ;
             PAIR ;
             PUSH (pair (string %link) (bool %nsfw)) (Pair "" False) ;
             PUSH string "" ;
             DIG 6 ;
             CAR ;
             CAR ;
             PAIR %height %image ;
             PAIR ;
             PAIR ;
             SOME ;
             DIG 4 ;
             GET 3 ;
             SIZE ;
             UPDATE ;
             PAIR ;
             SWAP ;
             PAIR }
           { SENDER ;
             DUP 3 ;
             GET 3 ;
             DUP 3 ;
             CAR ;
             CAR ;
             GET ;
             IF_NONE { PUSH int 68 ; FAILWITH } {} ;
             GET 3 ;
             CAR ;
             COMPARE ;
             EQ ;
             IF {}
                { PUSH string "WrongCondition: self.data.ads[params.ad_id].owner == sp.sender" ;
                  FAILWITH } ;
             SWAP ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             DUP ;
             DUP 5 ;
             CAR ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 71 ; FAILWITH } {} ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             CDR ;
             DUP 8 ;
             GET 3 ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             SOME ;
             SWAP ;
             UPDATE ;
             DUP ;
             DUP 5 ;
             CAR ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 72 ; FAILWITH } {} ;
             UNPAIR ;
             UNPAIR ;
             CAR ;
             DUP 8 ;
             CAR ;
             CDR ;
             SWAP ;
             PAIR ;
             PAIR ;
             PAIR ;
             SOME ;
             SWAP ;
             UPDATE ;
             DUP ;
             DUP 5 ;
             CAR ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 73 ; FAILWITH } {} ;
             UNPAIR ;
             SWAP ;
             UNPAIR ;
             CAR ;
             DUP 8 ;
             GET 6 ;
             SWAP ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR ;
             SOME ;
             SWAP ;
             UPDATE ;
             DUP ;
             DUP 5 ;
             CAR ;
             CAR ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH int 74 ; FAILWITH } {} ;
             UNPAIR ;
             UNPAIR ;
             SWAP ;
             CAR ;
             DIG 7 ;
             GET 5 ;
             SWAP ;
             PAIR ;
             SWAP ;
             PAIR ;
             PAIR ;
             SOME ;
             SWAP ;
             UPDATE ;
             PAIR ;
             SWAP ;
             PAIR } ;
         NIL operation ;
         PAIR } }
