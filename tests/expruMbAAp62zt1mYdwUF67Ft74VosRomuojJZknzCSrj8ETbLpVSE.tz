{ parameter
    (or (or (or (pair %bet (nat %betType) (nat %number)) (unit %cashOut))
            (or (unit %fund) (unit %initGame)))
        (nat %startRoulette)) ;
  storage
    (pair (pair (pair (mutez %betAmount)
                      (map %bets nat (pair (pair (nat %betType) (nat %number)) (address %player))))
                (pair (address %gameCreator) (bool %gameState)))
          (pair (pair (map %numberRange nat nat) (map %payouts nat nat))
                (pair (mutez %requiredBalance) (map %winnings address mutez)))) ;
  code { LAMBDA
           (pair bool string)
           unit
           { { { DUP ; CAR ; DIP { CDR } } } ;
             IF { DROP } { FAILWITH } ;
             UNIT } ;
         LAMBDA
           (pair (pair (pair mutez (map nat (pair (pair nat nat) address))) (pair address bool))
                 (pair (pair (map nat nat) (map nat nat)) (pair mutez (map address mutez))))
           (pair (list operation)
                 (pair (pair (pair mutez (map nat (pair (pair nat nat) address))) (pair address bool))
                       (pair (pair (map nat nat) (map nat nat)) (pair mutez (map address mutez)))))
           { SENDER ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE { PUSH mutez 0 } {} ;
             PUSH mutez 0 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GT ;
             IF {} { PUSH string "failed assertion" ; FAILWITH } ;
             BALANCE ;
             SWAP ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             LE ;
             IF {} { PUSH string "failed assertion" ; FAILWITH } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CONTRACT unit ;
             IF_NONE { PUSH string "bad address for get_contract" ; FAILWITH } {} ;
             SWAP ;
             UNIT ;
             TRANSFER_TOKENS ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CDR ;
             CDR ;
             CDR ;
             PUSH mutez 0 ;
             DIG 3 ;
             SWAP ;
             SOME ;
             SWAP ;
             UPDATE ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CDR ;
             CDR ;
             CAR ;
             PAIR ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             CAR ;
             PAIR ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             PAIR } ;
         DIG 2 ;
         { { DUP ; CAR ; DIP { CDR } } } ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { DIG 2 ;
                     DROP ;
                     DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     DIG 2 ;
                     PUSH string "Tezos.amount = self.betAmount" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     AMOUNT ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH string "(betType >= 0n) and (betType <= 5n)" ;
                     PUSH nat 5 ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     COMPARE ;
                     LE ;
                     PUSH nat 0 ;
                     { DIP 5 { DUP } ; DIG 6 } ;
                     COMPARE ;
                     GE ;
                     AND ;
                     PAIR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     PUSH string "Out of range" ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     GET ;
                     IF_NONE { PUSH nat 0 } {} ;
                     { DIP 3 { DUP } ; DIG 4 } ;
                     COMPARE ;
                     LE ;
                     PUSH nat 0 ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     COMPARE ;
                     GE ;
                     AND ;
                     PAIR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     AMOUNT ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CAR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     GET ;
                     IF_NONE { PUSH nat 0 } {} ;
                     MUL ;
                     DUP ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CDR ;
                     CDR ;
                     CAR ;
                     ADD ;
                     PUSH string "provisionalBalance < Tezos.balance" ;
                     BALANCE ;
                     DIG 2 ;
                     COMPARE ;
                     LT ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CDR ;
                     CDR ;
                     CAR ;
                     ADD ;
                     PAIR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SENDER ;
                     DIG 5 ;
                     DIG 6 ;
                     PAIR ;
                     PAIR ;
                     { DIP 4 { DUP } ; DIG 5 } ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SIZE ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR }
                   { DIG 3 ; DROP 2 ; EXEC } }
               { DIG 2 ;
                 DROP ;
                 IF_LEFT
                   { DIG 2 ; DROP 2 ; NIL operation ; PAIR }
                   { DROP ;
                     PUSH string "gameCreator already exist" ;
                     PUSH bool False ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CAR ;
                     CDR ;
                     CDR ;
                     COMPARE ;
                     EQ ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     CDR ;
                     PUSH bool True ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CAR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     SENDER ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     CDR ;
                     PUSH mutez 0 ;
                     PAIR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     EMPTY_MAP nat nat ;
                     PUSH nat 20 ;
                     SOME ;
                     PUSH nat 1 ;
                     UPDATE ;
                     PUSH nat 2 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     { DIP 2 { DUP } ; DIG 3 } ;
                     CDR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     CDR ;
                     EMPTY_MAP nat nat ;
                     PUSH nat 36 ;
                     SOME ;
                     PUSH nat 1 ;
                     UPDATE ;
                     PUSH nat 1 ;
                     SOME ;
                     PUSH nat 0 ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     PUSH mutez 1000000 ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } } }
           { SWAP ;
             PUSH string "Tezos.sender = self.gameCreator" ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             CAR ;
             SENDER ;
             COMPARE ;
             EQ ;
             PAIR ;
             { DIP 4 { DUP } ; DIG 5 } ;
             SWAP ;
             EXEC ;
             DROP ;
             PUSH string "size(self.bets) > 0n" ;
             PUSH nat 0 ;
             { DIP 2 { DUP } ; DIG 3 } ;
             CAR ;
             CAR ;
             CDR ;
             SIZE ;
             COMPARE ;
             GT ;
             PAIR ;
             DIG 4 ;
             SWAP ;
             EXEC ;
             DROP ;
             PUSH int 0 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             PAIR ;
             DUG 2 ;
             PAIR ;
             LAMBDA
               (pair (pair (pair (pair (pair mutez (map nat (pair (pair nat nat) address))) (pair address bool))
                                 (pair (pair (map nat nat) (map nat nat)) (pair mutez (map address mutez))))
                           nat)
                     (pair (pair (pair (pair mutez (map nat (pair (pair nat nat) address))) (pair address bool))
                                 (pair (pair (map nat nat) (map nat nat)) (pair mutez (map address mutez))))
                           int))
               (pair bool
                     (pair (pair (pair (pair mutez (map nat (pair (pair nat nat) address))) (pair address bool))
                                 (pair (pair (map nat nat) (map nat nat)) (pair mutez (map address mutez))))
                           int))
               { { { DUP ; CAR ; DIP { CDR } } } ;
                 { { DUP ; CAR ; DIP { CDR } } } ;
                 DIG 2 ;
                 DUP ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SIZE ;
                 INT ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 COMPARE ;
                 LE ;
                 IF { SWAP ;
                      CAR ;
                      PUSH bool False ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      { DIP 3 { DUP } ; DIG 4 } ;
                      ABS ;
                      GET ;
                      IF_NONE
                        { PUSH address "tz1ZDcc6MGxidty2jivtWBjnuo1mcSXf4Mmr" ;
                          PUSH nat 0 ;
                          PUSH nat 0 ;
                          PAIR ;
                          PAIR }
                        {} ;
                      PUSH nat 0 ;
                      { DIP 5 { DUP } ; DIG 6 } ;
                      COMPARE ;
                      EQ ;
                      IF { SWAP ;
                           DIG 4 ;
                           DROP 2 ;
                           PUSH nat 0 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CAR ;
                           CDR ;
                           COMPARE ;
                           EQ ;
                           PUSH nat 1 ;
                           { DIP 2 { DUP } ; DIG 3 } ;
                           CAR ;
                           CAR ;
                           COMPARE ;
                           EQ ;
                           AND }
                         { PUSH nat 1 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CAR ;
                           CAR ;
                           COMPARE ;
                           EQ ;
                           IF { SWAP ; DROP ; DIG 3 ; SWAP ; DUP ; DUG 2 ; CAR ; CDR ; COMPARE ; EQ }
                              { PUSH nat 0 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CAR ;
                                CAR ;
                                COMPARE ;
                                EQ ;
                                IF { PUSH nat 0 ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     CAR ;
                                     CDR ;
                                     COMPARE ;
                                     EQ ;
                                     IF { SWAP ;
                                          DROP ;
                                          PUSH nat 0 ;
                                          PUSH nat 2 ;
                                          { DIP 5 { DUP } ; DIG 6 } ;
                                          EDIV ;
                                          IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                                          CDR ;
                                          COMPARE ;
                                          EQ }
                                        { SWAP } ;
                                     PUSH nat 1 ;
                                     { DIP 2 { DUP } ; DIG 3 } ;
                                     CAR ;
                                     CDR ;
                                     COMPARE ;
                                     EQ ;
                                     IF { DROP ;
                                          PUSH nat 1 ;
                                          PUSH nat 2 ;
                                          DIG 5 ;
                                          EDIV ;
                                          IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                                          CDR ;
                                          COMPARE ;
                                          EQ }
                                        { DIG 4 ; DROP } }
                                   { DIG 4 ; DROP ; SWAP } } } ;
                      IF { SWAP ;
                           DUP ;
                           DUG 2 ;
                           CDR ;
                           CDR ;
                           CDR ;
                           { DIP 2 { DUP } ; DIG 3 } ;
                           CDR ;
                           CAR ;
                           CDR ;
                           { DIP 2 { DUP } ; DIG 3 } ;
                           CAR ;
                           CAR ;
                           GET ;
                           IF_NONE { PUSH nat 0 } {} ;
                           { DIP 3 { DUP } ; DIG 4 } ;
                           CAR ;
                           CAR ;
                           CAR ;
                           MUL ;
                           { DIP 3 { DUP } ; DIG 4 } ;
                           CDR ;
                           CDR ;
                           CDR ;
                           { DIP 3 { DUP } ; DIG 4 } ;
                           CDR ;
                           GET ;
                           IF_NONE { PUSH mutez 0 } {} ;
                           ADD ;
                           DIG 2 ;
                           CDR ;
                           SWAP ;
                           SOME ;
                           SWAP ;
                           UPDATE ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CDR ;
                           CDR ;
                           CAR ;
                           PAIR ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CDR ;
                           CAR ;
                           PAIR ;
                           SWAP ;
                           CAR ;
                           PAIR }
                         { DROP } ;
                      PUSH int 1 ;
                      DIG 2 ;
                      ADD ;
                      SWAP ;
                      PAIR ;
                      PUSH bool True ;
                      PAIR }
                    { DIG 2 ; DROP 2 ; PUSH bool False ; PAIR } } ;
             SWAP ;
             APPLY ;
             SWAP ;
             PUSH bool True ;
             LOOP { DIP { DUP } ; EXEC ; { { DUP ; CAR ; DIP { CDR } } } } ;
             SWAP ;
             DROP ;
             CAR ;
             DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             EMPTY_MAP nat (pair (pair nat nat) address) ;
             DIG 3 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             PAIR ;
             DUP ;
             CDR ;
             CDR ;
             CDR ;
             PUSH mutez 0 ;
             PAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             PAIR ;
             SWAP ;
             CAR ;
             PAIR ;
             EXEC } } }
