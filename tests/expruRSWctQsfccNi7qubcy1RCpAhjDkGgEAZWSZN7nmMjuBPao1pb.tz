{ storage (pair (list %deck (list int)) (pair (bool %flag) (nat %storedValue))) ;
  parameter
    (or (or (nat %divide) (unit %double))
        (or (nat %factorial) (or (unit %reverseFlag) (nat %set)))) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { { DUP ;
                   PUSH nat 0 ;
                   COMPARE ;
                   LT ;
                   IF { {} }
                      { { PUSH string "WrongCondition: params.op > 0" ; FAILWITH } } ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CDR ;
                   CDR ;
                   EDIV ;
                   IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                   DIG 4 ;
                   DROP ;
                   DIG 3 ;
                   DROP ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR } }
               { { DROP ;
                   DUP ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   PUSH nat 2 ;
                   DIG 3 ;
                   CDR ;
                   CDR ;
                   MUL ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR } } }
           { IF_LEFT
               { { SWAP ;
                   DUP ;
                   CAR ;
                   SWAP ;
                   CDR ;
                   CAR ;
                   PUSH nat 1 ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   PAIR ;
                   SWAP ;
                   DUP ;
                   PUSH nat 1 ;
                   ADD ;
                   PUSH nat 1 ;
                   DUP ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   COMPARE ;
                   GT ;
                   LOOP { DIG 3 ;
                          DUP ;
                          DUG 4 ;
                          DUP ;
                          CAR ;
                          SWAP ;
                          CDR ;
                          CAR ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          DIG 6 ;
                          CDR ;
                          CDR ;
                          MUL ;
                          SWAP ;
                          PAIR ;
                          SWAP ;
                          PAIR ;
                          DUG 3 ;
                          PUSH nat 1 ;
                          ADD ;
                          DUP ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          COMPARE ;
                          GT } ;
                   DROP 3 } }
               { IF_LEFT
                   { { DROP ;
                       DUP ;
                       DUP ;
                       CAR ;
                       SWAP ;
                       CDR ;
                       CDR ;
                       DIG 2 ;
                       CDR ;
                       CAR ;
                       NOT ;
                       PAIR ;
                       SWAP ;
                       PAIR } }
                   { { SWAP ; DUP ; CAR ; SWAP ; CDR ; CAR ; DIG 2 ; SWAP ; PAIR ; SWAP ; PAIR } } } } ;
         NIL operation ;
         PAIR } }
