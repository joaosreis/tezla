{ parameter
    (or (or (or %admin (or (unit %confirm_admin) (bool %pause)) (address %set_admin))
            (or %assets
               (or (pair %balance_of
                      (list %requests (pair (address %owner) (nat %token_id)))
                      (contract %callback
                         (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                   (list %transfer
                      (pair (address %from_)
                            (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))))
               (list %update_operators
                  (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                      (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id)))))))
        (list %mint
           (pair (pair %metadata (nat %token_id) (map %token_info string bytes))
                 (address %owner)))) ;
  storage
    (pair (pair %admin
             (pair (address %admin) (big_map %metadata string bytes))
             (pair (bool %paused) (option %pending_admin address)))
          (pair %assets
             (pair (pair (big_map %ledger nat address) (nat %next_token_id))
                   (pair (big_map %operators (pair address (pair address nat)) unit)
                         (pair %permissions_descriptor
                            (or %operator
                               (unit %no_transfer)
                               (or (unit %owner_transfer) (unit %owner_or_operator_transfer)))
                            (pair (or %receiver
                                     (unit %owner_no_hook)
                                     (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                                  (pair (or %sender
                                           (unit %owner_no_hook)
                                           (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                                        (option %custom (pair (string %tag) (option %config_api address))))))))
             (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))) ;
  code { PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair (pair (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
                       (lambda
                          (pair (option address) (list (pair (option address) (pair nat nat))))
                          (list (option address))))
                 (pair (lambda
                          address
                          (or (contract
                                 (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                              string))
                       bool))
           (list (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)))
           { DUP ;
             CAR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             EMPTY_SET address ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CDR ;
                    SWAP ;
                    EXEC ;
                    SWAP ;
                    CAR ;
                    SWAP ;
                    ITER { IF_NONE {} { PUSH bool True ; SWAP ; UPDATE } } } ;
             SWAP ;
             DROP ;
             NIL (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) ;
             SWAP ;
             ITER { DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CDR ;
                    CAR ;
                    SWAP ;
                    EXEC ;
                    IF_LEFT
                      { CONS }
                      { DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        CDR ;
                        CDR ;
                        IF { SWAP ; DROP ; FAILWITH } { DROP } } } ;
             SWAP ;
             DROP } ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
                                (lambda
                                   (pair (option address) (list (pair (option address) (pair nat nat))))
                                   (list (option address))))
                          (pair (lambda
                                   address
                                   (or (contract
                                          (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                       string))
                                bool))
                    (list (contract
                             (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))))
                 (pair (pair (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
                             (or unit (or unit unit)))
                       (pair (lambda
                                (pair (option address) (list (pair (option address) (pair nat nat))))
                                (list (option address)))
                             (lambda
                                address
                                (or (contract
                                       (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                    string)))))
           (list (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             DUP ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             DIG 3 ;
             CAR ;
             CDR ;
             IF_LEFT
               { DROP 5 ;
                 NIL (contract
                        (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) }
               { IF_LEFT
                   { DROP ; PUSH bool False ; DIG 3 ; PAIR ; DUG 2 ; PAIR ; PAIR ; EXEC }
                   { DROP ; PUSH bool True ; DIG 3 ; PAIR ; DUG 2 ; PAIR ; PAIR ; EXEC } } } ;
         SWAP ;
         APPLY ;
         PAIR ;
         LAMBDA
           (pair (pair (lambda
                          (pair (pair (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
                                      (or unit (or unit unit)))
                                (pair (lambda
                                         (pair (option address) (list (pair (option address) (pair nat nat))))
                                         (list (option address)))
                                      (lambda
                                         address
                                         (or (contract
                                                (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                             string))))
                          (list (contract
                                   (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))))
                       string)
                 (pair (pair (list (pair (option address) (list (pair (option address) (pair nat nat)))))
                             (lambda
                                (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                                unit))
                       (pair (pair (pair (big_map nat address) nat)
                                   (pair (big_map (pair address (pair address nat)) unit)
                                         (pair (or unit (or unit unit))
                                               (pair (or unit (or unit unit))
                                                     (pair (or unit (or unit unit)) (option (pair string (option address))))))))
                             (big_map nat (pair nat (map string bytes))))))
           (pair (list operation)
                 (pair (pair (pair (big_map nat address) nat)
                             (pair (big_map (pair address (pair address nat)) unit)
                                   (pair (or unit (or unit unit))
                                         (pair (or unit (or unit unit))
                                               (pair (or unit (or unit unit)) (option (pair string (option address))))))))
                       (big_map nat (pair nat (map string bytes)))))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DIG 2 ;
             DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 3 ;
             CAR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DUP ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             ITER { DUP ;
                    DUG 2 ;
                    CDR ;
                    ITER { DIG 2 ;
                           DUP ;
                           DUG 3 ;
                           CAR ;
                           IF_NONE
                             { UNIT }
                             { DIG 4 ;
                               DUP ;
                               DUG 5 ;
                               CDR ;
                               CAR ;
                               DIG 2 ;
                               DUP ;
                               DUG 3 ;
                               CDR ;
                               CAR ;
                               PAIR ;
                               SENDER ;
                               DIG 2 ;
                               PAIR ;
                               PAIR ;
                               DIG 4 ;
                               DUP ;
                               DUG 5 ;
                               CAR ;
                               CDR ;
                               SWAP ;
                               EXEC } ;
                           DROP ;
                           PUSH nat 1 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CDR ;
                           CDR ;
                           COMPARE ;
                           GT ;
                           IF { DROP 2 ; DIG 5 ; DUP ; DUG 6 ; FAILWITH }
                              { PUSH nat 0 ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                CDR ;
                                COMPARE ;
                                EQ ;
                                IF { DROP }
                                   { DUP ;
                                     DUG 2 ;
                                     CDR ;
                                     CAR ;
                                     DIG 3 ;
                                     DUP ;
                                     DUG 4 ;
                                     CAR ;
                                     PAIR ;
                                     PAIR ;
                                     DUP ;
                                     CDR ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     CAR ;
                                     CDR ;
                                     DIG 2 ;
                                     CAR ;
                                     CAR ;
                                     IF_NONE
                                       { DROP }
                                       { DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         GET ;
                                         IF_NONE
                                           { DROP 3 ; DIG 6 ; DUP ; DUG 7 ; FAILWITH }
                                           { COMPARE ;
                                             EQ ;
                                             IF { NONE address ; SWAP ; UPDATE }
                                                { DROP 2 ; DIG 6 ; DUP ; DUG 7 ; FAILWITH } } } ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     CDR ;
                                     CAR ;
                                     DIG 2 ;
                                     CAR ;
                                     PAIR ;
                                     PAIR ;
                                     DUP ;
                                     CDR ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     CAR ;
                                     CAR ;
                                     IF_NONE
                                       { SWAP ; DROP }
                                       { DIG 2 ; CAR ; CDR ; SWAP ; SOME ; SWAP ; UPDATE } } } } ;
                    SWAP ;
                    DROP } ;
             SWAP ;
             DROP ;
             DIG 4 ;
             DROP ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 2 ;
             PAIR ;
             SENDER ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             PAIR ;
             SWAP ;
             CDR ;
             CAR ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             LAMBDA
               address
               (or (contract
                      (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                   string)
               { CONTRACT %tokens_sent
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_SENDER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract
                          (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (option address) (pair nat nat))))
               (list (option address))
               { NIL (option address) ; SWAP ; CAR ; CONS } ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CDR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             SWAP ;
             EXEC ;
             LAMBDA
               address
               (or (contract
                      (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                   string)
               { CONTRACT %tokens_received
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_RECEIVER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract
                          (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (option address) (pair nat nat))))
               (list (option address))
               { CDR ; MAP { CAR } } ;
             PAIR ;
             DIG 3 ;
             CDR ;
             CAR ;
             DIG 3 ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             ITER { CONS } ;
             DUP ;
             IF_CONS
               { DROP 2 ;
                 MAP { PUSH mutez 0 ; DIG 2 ; DUP ; DUG 3 ; TRANSFER_TOKENS } ;
                 SWAP ;
                 DROP }
               { DROP 2 ; NIL operation } ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             DIG 4 ;
             CAR ;
             CAR ;
             CDR ;
             DIG 4 ;
             PAIR ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair address (big_map string bytes)) (pair bool (option address)))
           unit
           { CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 3 ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DROP ;
                         DIG 2 ;
                         DROP ;
                         DUP ;
                         CDR ;
                         CDR ;
                         IF_NONE
                           { DROP ; PUSH string "NO_PENDING_ADMIN" ; FAILWITH }
                           { SENDER ;
                             COMPARE ;
                             EQ ;
                             IF { NONE address ;
                                  SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  CDR ;
                                  CAR ;
                                  PAIR ;
                                  SWAP ;
                                  CAR ;
                                  CDR ;
                                  SENDER ;
                                  PAIR ;
                                  PAIR }
                                { DROP ; PUSH string "NOT_A_PENDING_ADMIN" ; FAILWITH } } ;
                         NIL operation ;
                         PAIR }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         CDR ;
                         DIG 2 ;
                         CAR ;
                         PAIR ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         NIL operation ;
                         PAIR } }
                   { SWAP ;
                     DUP ;
                     DUG 2 ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     SOME ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 DIG 2 ;
                 PAIR ;
                 SWAP ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 IF { PUSH string "PAUSED" ; FAILWITH } {} ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 3 ;
                         DROP ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         MAP { DIG 2 ;
                               DUP ;
                               DUG 3 ;
                               CDR ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CDR ;
                               GET ;
                               IF_NONE
                                 { DROP ; PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH }
                                 { SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   SWAP ;
                                   COMPARE ;
                                   EQ ;
                                   IF { PUSH nat 1 } { PUSH nat 0 } ;
                                   SWAP ;
                                   PAIR } } ;
                         DIG 2 ;
                         DROP ;
                         SWAP ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 2 ;
                         TRANSFER_TOKENS ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { MAP { DUP ;
                               CDR ;
                               MAP { DUP ;
                                     CDR ;
                                     CDR ;
                                     SWAP ;
                                     DUP ;
                                     DUG 2 ;
                                     CDR ;
                                     CAR ;
                                     PAIR ;
                                     SWAP ;
                                     CAR ;
                                     SOME ;
                                     PAIR } ;
                               SWAP ;
                               CAR ;
                               SOME ;
                               PAIR } ;
                         SWAP ;
                         LAMBDA
                           (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                           unit
                           { DUP ;
                             CAR ;
                             CAR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             CDR ;
                             DUP ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             COMPARE ;
                             EQ ;
                             IF { DROP 3 ; UNIT }
                                { DIG 2 ;
                                  DUP ;
                                  DUG 3 ;
                                  CDR ;
                                  CDR ;
                                  DIG 3 ;
                                  CDR ;
                                  CAR ;
                                  DIG 2 ;
                                  PAIR ;
                                  DIG 2 ;
                                  PAIR ;
                                  MEM ;
                                  IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } ;
                         DIG 2 ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC } }
                   { DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     CAR ;
                     SWAP ;
                     PAIR ;
                     SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     CAR ;
                     ITER { SWAP ;
                            PAIR ;
                            DUP ;
                            CDR ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            SWAP ;
                            DUP ;
                            DUG 2 ;
                            IF_LEFT {} {} ;
                            CAR ;
                            COMPARE ;
                            EQ ;
                            IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                            SWAP ;
                            CAR ;
                            SWAP ;
                            IF_LEFT
                              { SWAP ;
                                UNIT ;
                                SOME ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                CDR ;
                                CDR ;
                                DIG 3 ;
                                DUP ;
                                DUG 4 ;
                                CDR ;
                                CAR ;
                                PAIR ;
                                DIG 3 ;
                                CAR ;
                                PAIR ;
                                UPDATE }
                              { DUP ;
                                DUG 2 ;
                                CDR ;
                                CDR ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                CDR ;
                                CAR ;
                                PAIR ;
                                DIG 2 ;
                                CAR ;
                                PAIR ;
                                NONE unit ;
                                SWAP ;
                                UPDATE } } ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     DIG 2 ;
                     PAIR ;
                     DIG 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 SWAP ;
                 DIG 2 ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 PAIR } }
           { SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             SWAP ;
             PAIR ;
             DUP ;
             CDR ;
             NIL (pair (option address) (pair nat nat)) ;
             PAIR ;
             SWAP ;
             CAR ;
             ITER { SWAP ;
                    DUP ;
                    DUG 2 ;
                    CDR ;
                    CAR ;
                    CAR ;
                    CDR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CDR ;
                    CDR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CAR ;
                    CDR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    PAIR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    SWAP ;
                    SOME ;
                    SWAP ;
                    UPDATE ;
                    DIG 3 ;
                    DUP ;
                    DUG 4 ;
                    CDR ;
                    CAR ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    SWAP ;
                    DUP ;
                    DUG 2 ;
                    CAR ;
                    CDR ;
                    PUSH nat 1 ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    ADD ;
                    DIG 3 ;
                    CAR ;
                    CAR ;
                    CAR ;
                    PAIR ;
                    PAIR ;
                    PAIR ;
                    DIG 3 ;
                    CAR ;
                    PUSH nat 1 ;
                    DIG 3 ;
                    PAIR ;
                    DIG 3 ;
                    CDR ;
                    SOME ;
                    PAIR ;
                    CONS ;
                    PAIR } ;
             DUP ;
             CDR ;
             LAMBDA
               (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
               unit
               { DROP ; UNIT } ;
             NIL (pair (option address) (list (pair (option address) (pair nat nat)))) ;
             DIG 3 ;
             CAR ;
             NONE address ;
             PAIR ;
             CONS ;
             PAIR ;
             PAIR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             DIG 2 ;
             CAR ;
             PAIR ;
             SWAP ;
             PAIR } } }
