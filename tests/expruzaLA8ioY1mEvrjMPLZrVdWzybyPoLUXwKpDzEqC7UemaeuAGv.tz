{ storage (pair (pair (option %fff (lambda nat nat)) (option %ggg int)) (nat %value)) ;
  parameter (or (or (or (unit %f) (unit %h)) (nat %hh)) (unit %i)) ;
  code { DUP ;
         CDR ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { { LAMBDA
                         (pair nat nat)
                         nat
                         { { DUP ; CDR ; SWAP ; DUP ; DUG 2 ; CAR ; ADD ; SWAP ; DROP } } ;
                       DUP ;
                       PUSH nat 5 ;
                       APPLY ;
                       DIG 3 ;
                       DUP ;
                       DUG 4 ;
                       CAR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       PUSH nat 8 ;
                       EXEC ;
                       SWAP ;
                       PAIR ;
                       DUG 4 ;
                       DROP ;
                       DROP ;
                       DROP ;
                       DROP } }
                   { { SWAP ;
                       DUP ;
                       DUG 2 ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CDR ;
                       LAMBDA
                         nat
                         nat
                         { { DUP ;
                             PUSH nat 0 ;
                             SWAP ;
                             COMPARE ;
                             GE ;
                             IF { {} }
                                { { PUSH string "WrongCondition: lparams_1 >= 0" ; FAILWITH } } ;
                             DUP ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             DUP ;
                             MUL ;
                             COMPARE ;
                             GT ;
                             LOOP { DUP ;
                                    PUSH nat 2 ;
                                    SWAP ;
                                    DUP ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    EDIV ;
                                    IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                                    ADD ;
                                    EDIV ;
                                    IF_NONE { { PUSH string "division by zero" ; FAILWITH } } { CAR } ;
                                    SWAP ;
                                    DROP ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    DUP ;
                                    MUL ;
                                    COMPARE ;
                                    GT } ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             DUP ;
                             MUL ;
                             COMPARE ;
                             LE ;
                             IF { { DUP ;
                                    PUSH nat 1 ;
                                    ADD ;
                                    PUSH nat 1 ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    ADD ;
                                    MUL ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    COMPARE ;
                                    LT } }
                                { PUSH bool False } ;
                             IF { {} }
                                { { PUSH string
                                         "WrongCondition: ((y.value * y.value) <= lparams_1) & (lparams_1 < ((y.value + 1) * (y.value + 1)))" ;
                                    FAILWITH } } ;
                             SWAP ;
                             DROP } } ;
                       SOME ;
                       PAIR ;
                       PAIR ;
                       DUG 2 ;
                       DROP ;
                       DROP } } }
               { { SWAP ;
                   DUP ;
                   DUG 2 ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   CAR ;
                   CAR ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   EXEC ;
                   SWAP ;
                   PAIR ;
                   DUG 2 ;
                   DROP ;
                   DROP } } }
           { { LAMBDA
                 int
                 unit
                 { { DUP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     GE ;
                     IF { {} }
                        { { PUSH string "WrongCondition: lparams_2 >= 0" ; FAILWITH } } ;
                     DROP ;
                     PUSH unit Unit } } ;
               LAMBDA
                 int
                 int
                 { { DUP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     GE ;
                     IF { {} }
                        { { PUSH string "WrongCondition: lparams_3 >= 0" ; FAILWITH } } ;
                     DUP ;
                     PUSH int 2 ;
                     SWAP ;
                     SUB ;
                     SWAP ;
                     DROP } } ;
               LAMBDA
                 int
                 bool
                 { { DUP ;
                     PUSH int 0 ;
                     SWAP ;
                     COMPARE ;
                     GE ;
                     IF { {} }
                        { { PUSH string "WrongCondition: lparams_4 >= 0" ; FAILWITH } } ;
                     DROP ;
                     PUSH bool True } } ;
               LAMBDA
                 nat
                 nat
                 { { LAMBDA
                       int
                       bool
                       { { DUP ;
                           PUSH int 0 ;
                           SWAP ;
                           COMPARE ;
                           GE ;
                           IF { {} }
                              { { PUSH string "WrongCondition: lparams_6 >= 0" ; FAILWITH } } ;
                           DROP ;
                           PUSH bool False } } ;
                     PUSH nat 0 ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     COMPARE ;
                     GE ;
                     IF { {} }
                        { { PUSH string "WrongCondition: lparams_5 >= 0" ; FAILWITH } } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     PUSH nat 3 ;
                     MUL ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP } } ;
               DIG 5 ;
               DUP ;
               DUG 6 ;
               CAR ;
               SWAP ;
               DUP ;
               DUG 2 ;
               PUSH nat 12 ;
               EXEC ;
               SWAP ;
               PAIR ;
               DUG 6 ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP ;
               DROP } } ;
         NIL operation ;
         PAIR } }
