open Core
open Adt
open Stack_data
module Stack_data = Stack_data

exception Type_error
exception Cast_error
exception Runtime_error of string

type 'a or_failed = Ok of 'a | Failed
type e_t = E : 'a t -> e_t
type env = e_t Var.Map.t or_failed

type ('param, 'storage) context = {
  ctx_param : 'param t;
  ctx_storage : 'storage t;
  ctx_self_address : t_address;
  ctx_now : t_timestamp t;
  ctx_amount : t_mutez t;
  ctx_balance : t_mutez t;
  ctx_source : t_address t;
  ctx_sender : t_address t;
  ctx_chain_id : t_chain_id t;
}

type comp = Eq | Lt | Gt

let bigint_of_comp = function
  | Eq -> Bigint.zero
  | Gt -> Bigint.one
  | Lt -> Bigint.of_int (-1)

let rec compare : type a b. a t -> b t -> comp =
 fun d_1 d_2 ->
  match (d_1, d_2) with
  | SD_int (Int n_1), SD_int (Int n_2) | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
      Bigint.(if n_1 > n_2 then Gt else if n_1 < n_2 then Lt else Eq)
  | SD_mutez (Mutez n_1), SD_mutez (Mutez n_2) ->
      Int64.(if n_1 > n_2 then Gt else if n_1 < n_2 then Lt else Eq)
  | SD_string (String s_1), SD_string (String s_2) ->
      String.(if s_1 > s_2 then Gt else if s_1 < s_2 then Lt else Eq)
  | SD_pair (Pair (d_1, d_2)), SD_pair (Pair (d_3, d_4)) -> (
      match compare d_1 d_3 with Eq -> compare d_2 d_4 | r -> r)
  | SD_bool (Bool b_1), SD_bool (Bool b_2) -> (
      match (b_1, b_2) with
      | false, false | true, true -> Eq
      | false, true -> Lt
      | true, false -> Gt)
  | SD_option d_1, SD_option d_2 -> (
      match (d_1, d_2) with
      | O_none, O_none -> Eq
      | O_none, O_some _ -> Lt
      | O_some _, O_none -> Gt
      | O_some d_1, O_some d_2 -> compare d_1 d_2)
  | SD_or d_1, SD_or d_2 -> (
      match (d_1, d_2) with
      | Or_left _, Or_right _ -> Lt
      | Or_right _, Or_left _ -> Gt
      | Or_left d_1, Or_left d_2 -> compare d_1 d_2
      | Or_right d_1, Or_right d_2 -> compare d_1 d_2)
  | SD_unit, SD_unit -> Eq
  | _ -> raise Type_error

exception Not_implemented

let find_t : type a. e_t Var.Map.t -> a typ -> var -> a t =
 fun m t v ->
  let (E d) = Var.Map.find_exn m v in
  cast t d

let find_e_t : e_t Var.Map.t -> var -> e_t = Var.Map.find_exn

let rec expr ctx env e =
  let module Map = Var.Map in
  let open Stack_data in
  let find = Var.Map.find_exn env in
  match e.Adt.Node.value with
  | E_var v | E_dup v -> Ok (find v)
  | E_push d ->
      let (E_T t) = typ_from_adt_typ t in
      Ok (E (from_adt_data t d))
  | E_unit -> Ok (E SD_unit)
  | E_self -> Ok (E (SD_contract (Contract_addr ctx.ctx_self_address)))
  | E_now -> Ok (E ctx.ctx_now)
  | E_amount -> Ok (E ctx.ctx_amount)
  | E_balance -> Ok (E ctx.ctx_balance)
  | E_source -> Ok (E ctx.ctx_source)
  | E_sender -> Ok (E ctx.ctx_sender)
  | E_chain_id -> Ok (E ctx.ctx_chain_id)
  | E_car v -> (
      let (E d) = find v in
      match d with SD_pair (Pair (d', _)) -> Ok (E d') | _ -> raise Type_error)
  | E_cdr v -> (
      let (E d) = find v in
      match d with SD_pair (Pair (_, d')) -> Ok (E d') | _ -> raise Type_error)
  | E_abs v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_nat (Nat Bigint.(abs n))))
      | _ -> raise Type_error)
  | E_neg v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) | SD_nat (Nat n) -> Ok (E (SD_int (Int Bigint.(neg n))))
      | _ -> raise Type_error)
  | E_not v -> (
      let (E d) = find v in
      match d with
      | SD_bool (Bool b) -> Ok (E (SD_bool (Bool (not b))))
      | SD_int (Int n) | SD_nat (Nat n) -> Ok (E (SD_int (Int Bigint.(lnot n))))
      | _ -> raise Type_error)
  | E_add (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
            E (SD_nat (Nat Bigint.(n_1 + n_2)))
        | SD_nat (Nat n_1), SD_int (Int n_2)
        | SD_int (Int n_1), SD_nat (Nat n_2)
        | SD_int (Int n_1), SD_int (Int n_2) ->
            E (SD_int (Int Bigint.(n_1 + n_2)))
        | SD_timestamp (Timestamp n_1), SD_int (Int n_2)
        | SD_int (Int n_1), SD_timestamp (Timestamp n_2) ->
            E (SD_timestamp (Timestamp Bigint.(n_1 + n_2)))
        | SD_mutez (Mutez n_1), SD_mutez (Mutez n_2) ->
            if Int64.(n_1 > max_value - n_2) then
              raise (Runtime_error "mutez overflow")
            else E (SD_mutez (Mutez Int64.(n_1 + n_2)))
        | _ -> raise Type_error
      in
      Ok res
  | E_sub (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_nat (Nat n_1), SD_nat (Nat n_2)
        | SD_nat (Nat n_1), SD_int (Int n_2)
        | SD_int (Int n_1), SD_nat (Nat n_2)
        | SD_int (Int n_1), SD_int (Int n_2) ->
            E (SD_int (Int Bigint.(n_1 - n_2)))
        | SD_timestamp (Timestamp n_1), SD_int (Int n_2) ->
            E (SD_timestamp (Timestamp Bigint.(n_1 - n_2)))
        | SD_timestamp (Timestamp n_1), SD_timestamp (Timestamp n_2) ->
            E (SD_timestamp (Timestamp Bigint.(n_1 - n_2)))
        | SD_mutez (Mutez n_1), SD_mutez (Mutez n_2) ->
            let res = Int64.(n_1 - n_2) in
            if Int64.(res < zero) then raise (Runtime_error "negative mutez")
            else E (SD_mutez (Mutez Int64.(n_1 + n_2)))
        | _ -> raise Type_error
      in
      Ok res
  | E_mul (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
            E (SD_nat (Nat Bigint.(n_1 * n_2)))
        | SD_nat (Nat n_1), SD_int (Int n_2)
        | SD_int (Int n_1), SD_nat (Nat n_2)
        | SD_int (Int n_1), SD_int (Int n_2) ->
            E (SD_int (Int Bigint.(n_1 * n_2)))
        | SD_mutez (Mutez n_1), SD_nat (Nat n_2) ->
            let n_1 = Bigint.of_int64 n_1 in
            let res = Bigint.(n_1 * n_2) in
            let max_int64 = Bigint.of_int64 Int64.max_value in
            if Bigint.(res > max_int64) then
              raise (Runtime_error "mutez overflow")
            else E (SD_mutez (Mutez (Bigint.to_int64_exn res)))
        | SD_nat (Nat n_1), SD_mutez (Mutez n_2) ->
            let n_2 = Bigint.of_int64 n_2 in
            let res = Bigint.(n_1 * n_2) in
            let max_int64 = Bigint.of_int64 Int64.max_value in
            if Bigint.(res > max_int64) then
              raise (Runtime_error "mutez overflow")
            else E (SD_mutez (Mutez (Bigint.to_int64_exn res)))
        | _ -> raise Type_error
      in
      Ok res
  | E_div (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let div n_1 n_2 =
        if Bigint.(n_2 = zero) then None
        else
          let q = Bigint.(n_1 / n_2) in
          let r = Bigint.(n_1 - (n_1 / n_2)) in
          Some (q, r)
      in
      let res =
        match (d_1, d_2) with
        | SD_nat (Nat n_1), SD_nat (Nat n_2) -> (
            match div n_1 n_2 with
            | None -> E (SD_option O_none)
            | Some (q, r) ->
                E
                  (SD_option
                     (O_some (SD_pair (Pair (SD_nat (Nat q), SD_nat (Nat r))))))
            )
        | SD_nat (Nat n_1), SD_int (Int n_2)
        | SD_int (Int n_1), SD_nat (Nat n_2)
        | SD_int (Int n_1), SD_int (Int n_2) -> (
            match div n_1 n_2 with
            | None -> E (SD_option O_none)
            | Some (q, r) ->
                E
                  (SD_option
                     (O_some (SD_pair (Pair (SD_int (Int q), SD_nat (Nat r))))))
            )
        | SD_mutez (Mutez n_1), SD_nat (Nat n_2) -> (
            let n_1 = Bigint.of_int64 n_1 in
            match div n_1 n_2 with
            | None -> E (SD_option O_none)
            | Some (q, r) ->
                let q = Bigint.to_int64_exn q in
                let r = Bigint.to_int64_exn r in
                E
                  (SD_option
                     (O_some
                        (SD_pair (Pair (SD_mutez (Mutez q), SD_mutez (Mutez r))))))
            )
        | SD_mutez (Mutez n_1), SD_mutez (Mutez n_2) -> (
            let n_1 = Bigint.of_int64 n_1 in
            let n_2 = Bigint.of_int64 n_2 in
            match div n_1 n_2 with
            | None -> E (SD_option O_none)
            | Some (q, r) ->
                let r = Bigint.to_int64_exn r in
                E
                  (SD_option
                     (O_some
                        (SD_pair (Pair (SD_nat (Nat q), SD_mutez (Mutez r)))))))
        | _ -> raise Type_error
      in
      Ok res
  | E_shiftL (v_1, v_2) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      match (d_1, d_2) with
      | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
          if Bigint.(n_2 > of_int 256) then Failed
          else
            let n_2 = Bigint.to_int_exn n_2 in
            let res = Bigint.(shift_left n_1 n_2) in
            Ok (E (SD_nat (Nat res)))
      | _ -> raise Type_error)
  | E_shiftR (v_1, v_2) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      match (d_1, d_2) with
      | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
          if Bigint.(n_2 > of_int 256) then Failed
          else
            let n_2 = Bigint.to_int_exn n_2 in
            let res = Bigint.(shift_right n_1 n_2) in
            Ok (E (SD_nat (Nat res)))
      | _ -> raise Type_error)
  | E_and (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_bool (Bool b_1), SD_bool (Bool b_2) ->
            E (SD_bool (Bool (b_1 && b_2)))
        | SD_nat (Nat n_1), SD_nat (Nat n_2)
        | SD_int (Int n_1), SD_nat (Nat n_2) ->
            E (SD_nat (Nat Bigint.(n_1 land n_2)))
        | _ -> raise Type_error
      in
      Ok res
  | E_or (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_bool (Bool b_1), SD_bool (Bool b_2) ->
            E (SD_bool (Bool (b_1 || b_2)))
        | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
            E (SD_nat (Nat Bigint.(n_1 lor n_2)))
        | _ -> raise Type_error
      in
      Ok res
  | E_xor (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res =
        match (d_1, d_2) with
        | SD_bool (Bool b_1), SD_bool (Bool b_2) ->
            E (SD_bool (Bool Bool.(b_1 <> b_2)))
        | SD_nat (Nat n_1), SD_nat (Nat n_2) ->
            E (SD_nat (Nat Bigint.(n_1 lxor n_2)))
        | _ -> raise Type_error
      in
      Ok res
  | E_eq v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n = zero))))
      | _ -> raise Type_error)
  | E_neq v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n <> zero))))
      | _ -> raise Type_error)
  | E_lt v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n < zero))))
      | _ -> raise Type_error)
  | E_gt v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n > zero))))
      | _ -> raise Type_error)
  | E_leq v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n <= zero))))
      | _ -> raise Type_error)
  | E_geq v -> (
      let (E d) = find v in
      match d with
      | SD_int (Int n) -> Ok (E (SD_bool (Bool Bigint.(n >= zero))))
      | _ -> raise Type_error)
  | E_compare (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let res = compare d_1 d_2 in
      Ok (E (SD_int (Int (bigint_of_comp res))))
  | E_cons (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let (E_T t) = typ_from_adt_typ v_1.var_type in
      let d_1 = cast t d_1 in
      let (SD_list d_2) = cast (List_t t) d_2 in
      Ok (E (SD_list (L_cons (d_1, d_2))))
  | E_operation o -> Ok (E (SD_operation (Operation o)))
  | E_pair (v_1, v_2) ->
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      Ok (E (SD_pair (Pair (d_1, d_2))))
  | E_left (v, _) ->
      let (E d) = find v in
      Ok (E (SD_or (Or_left d)))
  | E_right (v, _) ->
      let (E d) = find v in
      Ok (E (SD_or (Or_right d)))
  | E_some v ->
      let (E d) = find v in
      Ok (E (SD_option (O_some d)))
  | E_none _ -> Ok (E (SD_option O_none))
  | E_mem (v_1, v_2) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let (E_T t) = typ_from_adt_typ v_1.var_type in
      let d_1 = cast t d_1 in
      let rec f_set : type a. a t -> a t_set -> bool =
       fun d -> function
        | Set_nil -> false
        | Set_cons (hd, tl) -> if equal hd d then true else f_set d tl
      in
      let rec f_map : type a. a t -> (a, _) t_map -> bool =
       fun d -> function
        | Map_nil -> false
        | Map_cons ((k, _), tl) -> if equal k d then true else f_map d tl
      in
      let rec f_big_map : type a. a t -> (a, _) t_big_map -> bool =
       fun d -> function
        | Big_map_nil -> false
        | Big_map_cons ((k, _), tl) ->
            if equal k d then true else f_big_map d tl
      in
      match d_2 with
      | SD_set _ ->
          let (SD_set s) = cast (Set_t t) d_2 in
          Ok (E (SD_bool (Bool (f_set d_1 s))))
      | SD_map m ->
          let m = cast_map_key t m in
          Ok (E (SD_bool (Bool (f_map d_1 m))))
      | SD_big_map m ->
          let m = cast_big_map_key t m in
          Ok (E (SD_bool (Bool (f_big_map d_1 m))))
      | _ -> raise Type_error)
  | E_get (v_1, v_2) -> (
      let rec f_map : type a b. a t -> (a, b) t_map -> b t_option t =
       fun d -> function
        | Map_nil -> SD_option O_none
        | Map_cons ((k, v), tl) ->
            if equal k d then SD_option (O_some v) else f_map d tl
      in
      let rec f_big_map : type a b. a t -> (a, b) t_big_map -> b t_option t =
       fun d -> function
        | Big_map_nil -> SD_option O_none
        | Big_map_cons ((k, v), tl) ->
            if equal k d then SD_option (O_some v) else f_big_map d tl
      in
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      match v_2.var_type with
      | T_big_map (t_k, t_v) ->
          let (E_T t_k) = typ_from_adt_typ t_k in
          let (E_T t_v) = typ_from_adt_typ t_v in
          let d_1 = cast t_k d_1 in
          let (SD_big_map m) = cast (Big_map_t (t_k, t_v)) d_2 in
          Ok (E (f_big_map d_1 m))
      | T_map (t_k, t_v) ->
          let (E_T t_k) = typ_from_adt_typ t_k in
          let (E_T t_v) = typ_from_adt_typ t_v in
          let d_1 = cast t_k d_1 in
          let (SD_map m) = cast (Map_t (t_k, t_v)) d_2 in
          Ok (E (f_map d_1 m))
      | _ -> raise Type_error)
  | E_update (v_1, v_2, v_3) -> (
      let rec f_set : type a. a t -> bool -> a t_set -> a t_set =
       fun x b s ->
        match s with
        | Set_nil -> if b then Set_cons (x, Set_nil) else Set_nil
        | Set_cons (y, tl) -> (
            match (b, compare x y) with
            | _, Gt -> Set_cons (y, f_set x b tl)
            | false, Eq -> tl
            | true, Eq -> Set_cons (y, tl)
            | false, Lt -> Set_cons (y, tl)
            | true, Lt -> Set_cons (x, Set_cons (y, tl)))
      in
      let rec f_map :
          type k v. k t -> v t_option -> (k, v) t_map -> (k, v) t_map =
       fun x y -> function
        | Map_nil -> (
            match y with
            | O_none -> Map_nil
            | O_some y -> Map_cons ((x, y), Map_nil))
        | Map_cons ((k, v), m) -> (
            match (y, compare x k) with
            | y, Gt -> Map_cons ((k, v), f_map x y m)
            | O_none, Eq -> m
            | O_some y, Eq -> Map_cons ((k, y), m)
            | O_none, Lt -> Map_cons ((k, v), m)
            | O_some y, Lt -> Map_cons ((x, y), Map_cons ((k, v), m)))
      in
      let rec f_big_map :
          type k v. k t -> v t_option -> (k, v) t_big_map -> (k, v) t_big_map =
       fun x y -> function
        | Big_map_nil -> (
            match y with
            | O_none -> Big_map_nil
            | O_some y -> Big_map_cons ((x, y), Big_map_nil))
        | Big_map_cons ((k, v), m) -> (
            match (y, compare x k) with
            | y, Gt -> Big_map_cons ((k, v), f_big_map x y m)
            | O_none, Eq -> m
            | O_some y, Eq -> Big_map_cons ((k, y), m)
            | O_none, Lt -> Big_map_cons ((k, v), m)
            | O_some y, Lt -> Big_map_cons ((x, y), Big_map_cons ((k, v), m)))
      in
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let (E d_3) = find v_3 in
      match v_3.var_type with
      | T_set t ->
          let (E_T t) = typ_from_adt_typ t in
          let x = cast t d_1 in
          let (SD_bool (Bool b)) = cast Bool_t d_2 in
          let (SD_set s) = cast (Set_t t) d_3 in
          Ok (E (SD_set (f_set x b s)))
      | T_map (t_k, t_v) ->
          let (E_T t_k) = typ_from_adt_typ t_k in
          let (E_T t_v) = typ_from_adt_typ t_v in
          let x = cast t_k d_1 in
          let (SD_option y) = cast (Option_t t_v) d_2 in
          let (SD_map m) = cast (Map_t (t_k, t_v)) d_3 in
          Ok (E (SD_map (f_map x y m)))
      | T_big_map (t_k, t_v) ->
          let (E_T t_k) = typ_from_adt_typ t_k in
          let (E_T t_v) = typ_from_adt_typ t_v in
          let x = cast t_k d_1 in
          let (SD_option y) = cast (Option_t t_v) d_2 in
          let (SD_big_map m) = cast (Big_map_t (t_k, t_v)) d_3 in
          Ok (E (SD_big_map (f_big_map x y m)))
      | _ -> raise Type_error)
  | E_concat (v_1, v_2) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      match v_1.var_type with
      | T_string ->
          let (SD_string (String s_1)) = cast String_t d_1 in
          let (SD_string (String s_2)) = cast String_t d_2 in
          Ok (E (SD_string (String (s_1 ^ s_2))))
      | T_bytes ->
          let (SD_bytes (Bytes b_1)) = cast Bytes_t d_1 in
          let (SD_bytes (Bytes b_2)) = cast Bytes_t d_2 in
          Ok
            (E
               (SD_bytes
                  (Bytes (Stdlib.Bytes.concat Stdlib.Bytes.empty [ b_1; b_2 ]))))
      | _ -> raise Type_error)
  | E_concat_list v -> (
      let (E d) = find v in
      match v.var_type with
      | T_list T_string ->
          let (SD_list l) = cast (List_t String_t) d in
          let rec concat : string -> t_string t_list -> string =
           fun acc -> function
            | L_nil -> acc
            | L_cons (SD_string (String h), t) -> concat (acc ^ h) t
          in
          Ok (E (SD_string (String (concat "" l))))
      | T_list T_bytes ->
          let (SD_list l) = cast (List_t Bytes_t) d in
          let rec concat : bytes -> t_bytes t_list -> bytes =
           fun acc -> function
            | L_nil -> acc
            | L_cons (SD_bytes (Bytes h), t) ->
                concat (Stdlib.Bytes.concat Stdlib.Bytes.empty [ acc; h ]) t
          in
          Ok (E (SD_bytes (Bytes (concat Stdlib.Bytes.empty l))))
      | _ -> raise Type_error)
  | E_slice (v_1, v_2, v_3) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let (E d_3) = find v_3 in
      let (SD_nat (Nat n_1)) = cast Nat_t d_1 in
      let (SD_nat (Nat n_2)) = cast Nat_t d_2 in
      let n_1 = Bigint.to_int_exn n_1 in
      let n_2 = Bigint.to_int_exn n_2 in
      match v_3.var_type with
      | T_string ->
          let (SD_string (String s)) = cast String_t d_3 in
          let s = String.sub s ~pos:n_1 ~len:n_2 in
          Ok (E (SD_string (String s)))
      | T_bytes ->
          let (SD_bytes (Bytes b)) = cast Bytes_t d_3 in
          let b = Bytes.sub b ~pos:n_1 ~len:n_2 in
          Ok (E (SD_bytes (Bytes b)))
      | _ -> raise Type_error)
  | E_contract_of_address (t, v) ->
      let (E d) = find v in
      let (SD_address d) = cast Address_t d in
      let (E_T _t) = typ_from_adt_typ t in
      Ok (E (SD_contract (Contract_addr d)))
  | E_implicit_account v ->
      let (E d) = find v in
      let (SD_key_hash d) = cast Key_hash_t d in
      Ok (E (SD_contract (Contract_key_hash d)))
  | E_address_of_contract v ->
      let (E d) = find v in
      let (SD_contract c) = cast (Contract_t Unit_t) d in
      Ok (E (SD_address (Address_contract c)))
  | E_unlift_option v -> (
      let (E d) = find v in
      match d with SD_option (O_some d) -> Ok (E d) | _ -> raise Type_error)
  | E_unlift_or_left v -> (
      let (E d) = find v in
      match d with SD_or (Or_left d) -> Ok (E d) | _ -> raise Type_error)
  | E_unlift_or_right v -> (
      let (E d) = find v in
      match d with SD_or (Or_right d) -> Ok (E d) | _ -> raise Type_error)
  | E_hd v -> (
      let (E d) = find v in
      match d with SD_list (L_cons (d, _)) -> Ok (E d) | _ -> raise Type_error)
  | E_tl v -> (
      let (E d) = find v in
      match d with
      | SD_list (L_cons (_, tl)) -> Ok (E (SD_list tl))
      | _ -> raise Type_error)
  | E_isnat v ->
      let (E d) = find v in
      let (SD_int (Int d)) = cast Int_t d in
      if Bigint.(d < zero) then Ok (E (SD_option O_none))
      else Ok (E (SD_option (O_some (SD_nat (Nat d)))))
  | E_int_of_nat v ->
      let (E d) = find v in
      let (SD_nat (Nat d)) = cast Nat_t d in
      Ok (E (SD_int (Int d)))
  | E_lambda (_, _, _, i) -> Ok (E (SD_lambda (Lambda i)))
  | E_special_empty_list _ | E_nil _ -> Ok (E (SD_list L_nil))
  | E_empty_set _ -> Ok (E (SD_set Set_nil))
  | E_special_empty_map (_, _) | E_empty_map (_, _) -> Ok (E (SD_map Map_nil))
  | E_empty_big_map (_, _) -> Ok (E (SD_big_map Big_map_nil))
  | E_append (v_1, v_2) -> (
      let (E d_1) = find v_1 in
      let (E d_2) = find v_2 in
      let (E_T t) = typ_from_adt_typ v_1.var_type in
      let d_1 = cast t d_1 in
      let d_2 = cast t d_2 in
      let rec f : type a. a t_list -> a t_list -> a t_list =
       fun l_1 l_2 ->
        match l_1 with L_nil -> l_2 | L_cons (h, tl) -> L_cons (h, f tl l_2)
      in
      match (d_1, d_2) with
      | SD_list l_1, SD_list l_2 -> Ok (E (SD_list (f l_1 l_2)))
      | _ -> raise Type_error)
  | E_exec (_, _)
  | E_apply (_, _)
  | E_create_contract_address (_, _, _, _)
  | E_pack _
  | E_unpack (_, _)
  | E_check_signature (_, _, _)
  | E_blake2b _ | E_sha256 _ | E_sha512 _ | E_hash_key _ ->
      raise Not_implemented
| E_total_voting_power
  | (E_self_address
     | (E_level
        | (E_size_list _
           | (E_size_set _
              | (E_size_map _
                 | (E_size_string _
                    | (E_size_bytes _
                       | (E_create_account_operation (_, _, _, _)
                          | (E_create_account_address (_, _, _, _)
                             | (E_voting_power _
                                | (E_keccak _
                                   | (E_sha3 _
                                      | (E_pairing_check _
                                         | (E_sapling_verify_update (_, _)
                                            | (E_sapling_empty_state _
                                               | (E_ticket (_, _)
                                                  | (E_read_ticket_pair _
                                                     | (E_read_ticket_ticket
                                                        _
                                                        | (E_split_ticket
                                                           (_, _)
                                                           | (E_join_ticket _
                                                              | (E_open_chest
                                                                 (_, _, _)
                                                                 | (E_get_and_update_val
                                                                    (_, _, _)
                                                                    | (
                                                                    E_get_and_update_map
                                                                    (_, _, _)
                                                                    | (
                                                                    E_dup_n
                                                                    (_, _)
                                                                    | (
                                                                    E_unpair_n
                                                                    (_, _)
                                                                    | (
                                                                    E_get_n
                                                                    (_, _)
                                                                    | E_update_n
                                                                    (_, _, _)))))))))))))))))))))))))))
    -> _

and stmt ctx env s =
  let open Adt in
  let module Map = Var.Map in
  let exception Return of e_t in
  let rec stmt_aux env s =
    match env with
    | Failed -> Failed
    | Ok env' -> (
        let find = Map.find_exn env' in
        match s.Node.value with
        | S_assign (v, e) -> (
            match expr ctx env' e with
            | Ok d ->
                let (E d') = d in
                Debug.eprintf "%s := %s (%s)" v.var_name (Expr.to_string e)
                  (Stack_data.to_string d');
                Ok (Map.set env' ~key:v ~data:d)
            | Failed -> Failed)
        | S_drop _ | S_swap | S_dig | S_dug | S_skip -> env
        | S_seq (s_1, s_2) -> stmt_aux (stmt_aux env s_1) s_2
        | S_if (c, s_t, s_f) -> (
            match find c with
            | E (SD_bool (Bool b)) ->
                if b then stmt_aux env s_t else stmt_aux env s_f
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_if_none (c, s_t, s_f) -> (
            match find c with
            | E (SD_option O_none) -> stmt_aux env s_t
            | E (SD_option (O_some _)) -> stmt_aux env s_f
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_if_left (c, s_t, s_f) -> (
            match find c with
            | E (SD_or (Or_left _)) -> stmt_aux env s_t
            | E (SD_or (Or_right _)) -> stmt_aux env s_f
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_if_cons (c, s_t, s_f) -> (
            match find c with
            | E (SD_list L_nil) -> stmt_aux env s_f
            | E (SD_list (L_cons _)) -> stmt_aux env s_t
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_loop (c, b) -> (
            match find c with
            | E (SD_bool (Bool true)) -> stmt_aux (stmt_aux env b) s
            | E (SD_bool (Bool false)) -> env
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_loop_left (c, b) -> (
            match find c with
            | E (SD_or (Or_left _)) -> stmt_aux (stmt_aux env b) s
            | E (SD_or (Or_right _)) -> env
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_map (c, b) -> (
            match find c with
            | E (SD_list L_nil) -> env
            | E (SD_list _) -> stmt_aux (stmt_aux env b) s
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_iter (c, b) -> (
            match find c with
            | E (SD_list L_nil) -> env
            | E (SD_list _) -> stmt_aux (stmt_aux env b) s
            | _ ->
                Debug.amf [%here] "type error";
                raise Type_error)
        | S_failwith _ -> Failed
        | S_return v -> raise (Return (find v)))
  in
  try
    let _e = stmt_aux env s in
    None
  with Return r -> Some r

let program ctx ((param_t, storage_t, code) : program) =
  let initial_env =
    Ok
      (Var.Map.set Var.Map.empty
         ~key:
           {
             var_name = "parameter_storage";
             var_type = T_pair (param_t, storage_t);
           }
         ~data:(E (SD_pair (Pair (ctx.ctx_param, ctx.ctx_storage)))))
  in
  stmt ctx initial_env code
